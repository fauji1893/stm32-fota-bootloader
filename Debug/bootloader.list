
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08004aa8  08004aa8  00014aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef0  08004ef0  00020280  2**0
                  CONTENTS
  4 .ARM          00000000  08004ef0  08004ef0  00020280  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ef0  08004ef0  00020280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef0  08004ef0  00014ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ef4  08004ef4  00014ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  08004ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014bc  20000280  08005178  00020280  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000173c  08005178  0002173c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a90e  00000000  00000000  000202a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028a7  00000000  00000000  0002abb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000988  00000000  00000000  0002d460  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  0002dde8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c5a8  00000000  00000000  0002e618  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a84c  00000000  00000000  0004abc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097fe6  00000000  00000000  0005540c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ed3f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e0c  00000000  00000000  000ed470  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000280 	.word	0x20000280
 8000200:	00000000 	.word	0x00000000
 8000204:	08004a90 	.word	0x08004a90

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000284 	.word	0x20000284
 8000220:	08004a90 	.word	0x08004a90

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <MX_CRC_Init+0x20>)
 800024e:	4a07      	ldr	r2, [pc, #28]	; (800026c <MX_CRC_Init+0x24>)
 8000250:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000252:	4805      	ldr	r0, [pc, #20]	; (8000268 <MX_CRC_Init+0x20>)
 8000254:	f001 fed1 	bl	8001ffa <HAL_CRC_Init>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800025e:	f000 fdcd 	bl	8000dfc <Error_Handler>
  }

}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	200002b0 	.word	0x200002b0
 800026c:	40023000 	.word	0x40023000

08000270 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a09      	ldr	r2, [pc, #36]	; (80002a4 <HAL_CRC_MspInit+0x34>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d10b      	bne.n	800029a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <HAL_CRC_MspInit+0x38>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	4a08      	ldr	r2, [pc, #32]	; (80002a8 <HAL_CRC_MspInit+0x38>)
 8000288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800028c:	6153      	str	r3, [r2, #20]
 800028e:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <HAL_CRC_MspInit+0x38>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800029a:	bf00      	nop
 800029c:	3714      	adds	r7, #20
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr
 80002a4:	40023000 	.word	0x40023000
 80002a8:	40021000 	.word	0x40021000

080002ac <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* Unlock the Program memory */
  HAL_FLASH_Unlock();
 80002b0:	f001 ff62 	bl	8002178 <HAL_FLASH_Unlock>

  /* Clear all FLASH flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);
 80002b4:	4b03      	ldr	r3, [pc, #12]	; (80002c4 <FLASH_If_Init+0x18>)
 80002b6:	2234      	movs	r2, #52	; 0x34
 80002b8:	60da      	str	r2, [r3, #12]
  /* Unlock the Program memory */
  HAL_FLASH_Lock();
 80002ba:	f001 ff83 	bl	80021c4 <HAL_FLASH_Lock>
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40022000 	.word	0x40022000

080002c8 <FLASH_If_Erase>:
  * @param  start: start of user flash area
  * @retval FLASHIF_OK : user flash area successfully erased
  *         FLASHIF_ERASEKO : error occurred
  */
uint32_t FLASH_If_Erase(uint32_t start, uint32_t end)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b08a      	sub	sp, #40	; 0x28
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	6039      	str	r1, [r7, #0]
  uint32_t NbrOfPages = 0;
 80002d2:	2300      	movs	r3, #0
 80002d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t PageError = 0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;
  HAL_StatusTypeDef status = HAL_OK;
 80002da:	2300      	movs	r3, #0
 80002dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 80002e0:	f001 ff4a 	bl	8002178 <HAL_FLASH_Unlock>

  /* Get the sector where start the user flash area */
  NbrOfPages = (end - start)/FLASH_PAGE_SIZE;
 80002e4:	683a      	ldr	r2, [r7, #0]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	1ad3      	subs	r3, r2, r3
 80002ea:	0adb      	lsrs	r3, r3, #11
 80002ec:	627b      	str	r3, [r7, #36]	; 0x24

  pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80002ee:	2300      	movs	r3, #0
 80002f0:	60fb      	str	r3, [r7, #12]
  pEraseInit.PageAddress = start;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	617b      	str	r3, [r7, #20]
  pEraseInit.Banks = FLASH_BANK_1;
 80002f6:	2301      	movs	r3, #1
 80002f8:	613b      	str	r3, [r7, #16]
  pEraseInit.NbPages = NbrOfPages;
 80002fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002fc:	61bb      	str	r3, [r7, #24]
  status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80002fe:	f107 021c 	add.w	r2, r7, #28
 8000302:	f107 030c 	add.w	r3, r7, #12
 8000306:	4611      	mov	r1, r2
 8000308:	4618      	mov	r0, r3
 800030a:	f002 f81d 	bl	8002348 <HAL_FLASHEx_Erase>
 800030e:	4603      	mov	r3, r0
 8000310:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8000314:	f001 ff56 	bl	80021c4 <HAL_FLASH_Lock>

  if (status != HAL_OK)
 8000318:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <FLASH_If_Erase+0x5c>
  {
    /* Error occurred while page erase */
    return FLASHIF_ERASEKO;
 8000320:	2301      	movs	r3, #1
 8000322:	e000      	b.n	8000326 <FLASH_If_Erase+0x5e>
  }

  return FLASHIF_OK;
 8000324:	2300      	movs	r3, #0
}
 8000326:	4618      	mov	r0, r3
 8000328:	3728      	adds	r7, #40	; 0x28
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <FLASH_If_Write>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t destination, uint32_t *p_source, uint32_t length)
{
 8000330:	b590      	push	{r4, r7, lr}
 8000332:	b087      	sub	sp, #28
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	607a      	str	r2, [r7, #4]
  uint32_t i = 0;
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]


//  printf("Start value: %#010x\r\n", *(uint32_t*)(p_source+i));
  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8000340:	f001 ff1a 	bl	8002178 <HAL_FLASH_Unlock>

  for (i = 0; (i < length) && (destination <= (USER_FLASH_END_ADDRESS-4)); i++)
 8000344:	2300      	movs	r3, #0
 8000346:	617b      	str	r3, [r7, #20]
 8000348:	e023      	b.n	8000392 <FLASH_If_Write+0x62>
  {

    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, destination, *(uint32_t*)(p_source+i)) == HAL_OK)
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	68ba      	ldr	r2, [r7, #8]
 8000350:	4413      	add	r3, r2
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	f04f 0400 	mov.w	r4, #0
 8000358:	461a      	mov	r2, r3
 800035a:	4623      	mov	r3, r4
 800035c:	68f9      	ldr	r1, [r7, #12]
 800035e:	2002      	movs	r0, #2
 8000360:	f001 fe9a 	bl	8002098 <HAL_FLASH_Program>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d10e      	bne.n	8000388 <FLASH_If_Write+0x58>
    {
     /* Check the written value */
      if (*(uint32_t*)destination != *(uint32_t*)(p_source+i))
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	68b9      	ldr	r1, [r7, #8]
 8000374:	440b      	add	r3, r1
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	429a      	cmp	r2, r3
 800037a:	d001      	beq.n	8000380 <FLASH_If_Write+0x50>
      {
//    	  printf("error1\r\n");
        /* Flash content doesn't match SRAM content */
        return(FLASHIF_WRITINGCTRL_ERROR);
 800037c:	2302      	movs	r3, #2
 800037e:	e013      	b.n	80003a8 <FLASH_If_Write+0x78>
      }
      /* Increment FLASH destination address */
      destination += 4;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	3304      	adds	r3, #4
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	e001      	b.n	800038c <FLASH_If_Write+0x5c>
    }
    else
    {
//    	printf("error2\r\n");
      /* Error occurred while writing data in Flash memory */
      return (FLASHIF_WRITING_ERROR);
 8000388:	2303      	movs	r3, #3
 800038a:	e00d      	b.n	80003a8 <FLASH_If_Write+0x78>
  for (i = 0; (i < length) && (destination <= (USER_FLASH_END_ADDRESS-4)); i++)
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	3301      	adds	r3, #1
 8000390:	617b      	str	r3, [r7, #20]
 8000392:	697a      	ldr	r2, [r7, #20]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	429a      	cmp	r2, r3
 8000398:	d203      	bcs.n	80003a2 <FLASH_If_Write+0x72>
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	4a04      	ldr	r2, [pc, #16]	; (80003b0 <FLASH_If_Write+0x80>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d9d3      	bls.n	800034a <FLASH_If_Write+0x1a>
  }
//  printf("End value: %#010x\r\n", *(uint32_t*)(p_source+i));

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 80003a2:	f001 ff0f 	bl	80021c4 <HAL_FLASH_Lock>

  return (FLASHIF_OK);
 80003a6:	2300      	movs	r3, #0
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	371c      	adds	r7, #28
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd90      	pop	{r4, r7, pc}
 80003b0:	0807fffc 	.word	0x0807fffc

080003b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b088      	sub	sp, #32
 80003b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	f107 0310 	add.w	r3, r7, #16
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c8:	4b3b      	ldr	r3, [pc, #236]	; (80004b8 <MX_GPIO_Init+0x104>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a3a      	ldr	r2, [pc, #232]	; (80004b8 <MX_GPIO_Init+0x104>)
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <MX_GPIO_Init+0x104>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0310 	and.w	r3, r3, #16
 80003dc:	60fb      	str	r3, [r7, #12]
 80003de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <MX_GPIO_Init+0x104>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a34      	ldr	r2, [pc, #208]	; (80004b8 <MX_GPIO_Init+0x104>)
 80003e6:	f043 0320 	orr.w	r3, r3, #32
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b32      	ldr	r3, [pc, #200]	; (80004b8 <MX_GPIO_Init+0x104>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0320 	and.w	r3, r3, #32
 80003f4:	60bb      	str	r3, [r7, #8]
 80003f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f8:	4b2f      	ldr	r3, [pc, #188]	; (80004b8 <MX_GPIO_Init+0x104>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a2e      	ldr	r2, [pc, #184]	; (80004b8 <MX_GPIO_Init+0x104>)
 80003fe:	f043 0304 	orr.w	r3, r3, #4
 8000402:	6193      	str	r3, [r2, #24]
 8000404:	4b2c      	ldr	r3, [pc, #176]	; (80004b8 <MX_GPIO_Init+0x104>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	f003 0304 	and.w	r3, r3, #4
 800040c:	607b      	str	r3, [r7, #4]
 800040e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000410:	4b29      	ldr	r3, [pc, #164]	; (80004b8 <MX_GPIO_Init+0x104>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a28      	ldr	r2, [pc, #160]	; (80004b8 <MX_GPIO_Init+0x104>)
 8000416:	f043 0308 	orr.w	r3, r3, #8
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b26      	ldr	r3, [pc, #152]	; (80004b8 <MX_GPIO_Init+0x104>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0308 	and.w	r3, r3, #8
 8000424:	603b      	str	r3, [r7, #0]
 8000426:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800042e:	4823      	ldr	r0, [pc, #140]	; (80004bc <MX_GPIO_Init+0x108>)
 8000430:	f002 f9b3 	bl	800279a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000434:	2200      	movs	r2, #0
 8000436:	f44f 714a 	mov.w	r1, #808	; 0x328
 800043a:	4821      	ldr	r0, [pc, #132]	; (80004c0 <MX_GPIO_Init+0x10c>)
 800043c:	f002 f9ad 	bl	800279a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000446:	2301      	movs	r3, #1
 8000448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	2300      	movs	r3, #0
 800044c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044e:	2302      	movs	r3, #2
 8000450:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000452:	f107 0310 	add.w	r3, r7, #16
 8000456:	4619      	mov	r1, r3
 8000458:	4818      	ldr	r0, [pc, #96]	; (80004bc <MX_GPIO_Init+0x108>)
 800045a:	f002 f81d 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800045e:	2308      	movs	r3, #8
 8000460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046a:	f107 0310 	add.w	r3, r7, #16
 800046e:	4619      	mov	r1, r3
 8000470:	4814      	ldr	r0, [pc, #80]	; (80004c4 <MX_GPIO_Init+0x110>)
 8000472:	f002 f811 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000476:	2308      	movs	r3, #8
 8000478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047a:	2301      	movs	r3, #1
 800047c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800047e:	2301      	movs	r3, #1
 8000480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000482:	2302      	movs	r3, #2
 8000484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	4619      	mov	r1, r3
 800048c:	480c      	ldr	r0, [pc, #48]	; (80004c0 <MX_GPIO_Init+0x10c>)
 800048e:	f002 f803 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8000492:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000498:	2301      	movs	r3, #1
 800049a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a0:	2302      	movs	r3, #2
 80004a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	4619      	mov	r1, r3
 80004aa:	4805      	ldr	r0, [pc, #20]	; (80004c0 <MX_GPIO_Init+0x10c>)
 80004ac:	f001 fff4 	bl	8002498 <HAL_GPIO_Init>

}
 80004b0:	bf00      	nop
 80004b2:	3720      	adds	r7, #32
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40011000 	.word	0x40011000
 80004c0:	40010c00 	.word	0x40010c00
 80004c4:	40010800 	.word	0x40010800

080004c8 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	f043 0220 	orr.w	r2, r3, #32
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	60da      	str	r2, [r3, #12]
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
	...

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b5b0      	push	{r4, r5, r7, lr}
 80004ea:	b09c      	sub	sp, #112	; 0x70
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f001 fc1d 	bl	8001d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f977 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f7ff ff5d 	bl	80003b4 <MX_GPIO_Init>
  MX_CRC_Init();
 80004fa:	f7ff fea5 	bl	8000248 <MX_CRC_Init>
  MX_UART5_Init();
 80004fe:	f001 fadf 	bl	8001ac0 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000502:	f001 fb47 	bl	8001b94 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	LL_USART_EnableIT_RXNE(UART5);
 8000506:	4896      	ldr	r0, [pc, #600]	; (8000760 <main+0x278>)
 8000508:	f7ff ffde 	bl	80004c8 <LL_USART_EnableIT_RXNE>
//	LL_USART_EnableIT_RXNE(USART1);

	/* check for update */
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)==GPIO_PIN_RESET || *(__IO uint32_t*) UPDATE_INDICATOR == 0xABABABAB){
 800050c:	2108      	movs	r1, #8
 800050e:	4895      	ldr	r0, [pc, #596]	; (8000764 <main+0x27c>)
 8000510:	f002 f92c 	bl	800276c <HAL_GPIO_ReadPin>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d005      	beq.n	8000526 <main+0x3e>
 800051a:	4b93      	ldr	r3, [pc, #588]	; (8000768 <main+0x280>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f1b3 3fab 	cmp.w	r3, #2880154539	; 0xabababab
 8000522:	f040 810a 	bne.w	800073a <main+0x252>
		updateMode = 1;
 8000526:	4b91      	ldr	r3, [pc, #580]	; (800076c <main+0x284>)
 8000528:	2201      	movs	r2, #1
 800052a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000532:	488f      	ldr	r0, [pc, #572]	; (8000770 <main+0x288>)
 8000534:	f002 f931 	bl	800279a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000538:	2201      	movs	r2, #1
 800053a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800053e:	488d      	ldr	r0, [pc, #564]	; (8000774 <main+0x28c>)
 8000540:	f002 f92b 	bl	800279a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054a:	488a      	ldr	r0, [pc, #552]	; (8000774 <main+0x28c>)
 800054c:	f002 f925 	bl	800279a <HAL_GPIO_WritePin>


		uint32_t timeout = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	66bb      	str	r3, [r7, #104]	; 0x68
		uint8_t modem_initCounter = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		printf("\r\nFirmware update mode\r\n");
 800055a:	4887      	ldr	r0, [pc, #540]	; (8000778 <main+0x290>)
 800055c:	f003 f914 	bl	8003788 <puts>
		/* Read FTP configuration from EEPROM */
		Read_FTPConfig();
 8000560:	f000 f986 	bl	8000870 <Read_FTPConfig>

		while (modem_initCounter++ < 3) {
 8000564:	e004      	b.n	8000570 <main+0x88>
			if (M95_Init())
 8000566:	f000 fe0d 	bl	8001184 <M95_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d107      	bne.n	8000580 <main+0x98>
		while (modem_initCounter++ < 3) {
 8000570:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000574:	1c5a      	adds	r2, r3, #1
 8000576:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 800057a:	2b02      	cmp	r3, #2
 800057c:	d9f3      	bls.n	8000566 <main+0x7e>
 800057e:	e000      	b.n	8000582 <main+0x9a>
				break;
 8000580:	bf00      	nop
		}

		M95_SendATCommand("AT+CGREG=1\r", 10000);
 8000582:	f242 7110 	movw	r1, #10000	; 0x2710
 8000586:	487d      	ldr	r0, [pc, #500]	; (800077c <main+0x294>)
 8000588:	f000 fe42 	bl	8001210 <M95_SendATCommand>
		M95_SendATCommand("AT+CMGF=1\r", 10000);
 800058c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000590:	487b      	ldr	r0, [pc, #492]	; (8000780 <main+0x298>)
 8000592:	f000 fe3d 	bl	8001210 <M95_SendATCommand>
		M95_SendATCommand("AT+CSCS=\"GSM\"\r", 10000);
 8000596:	f242 7110 	movw	r1, #10000	; 0x2710
 800059a:	487a      	ldr	r0, [pc, #488]	; (8000784 <main+0x29c>)
 800059c:	f000 fe38 	bl	8001210 <M95_SendATCommand>

		FLASH_If_Init();
 80005a0:	f7ff fe84 	bl	80002ac <FLASH_If_Init>
		FLASH_If_Write(UPDATE_INDICATOR, (uint32_t*) indicatorValue, 1);
 80005a4:	4b78      	ldr	r3, [pc, #480]	; (8000788 <main+0x2a0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2201      	movs	r2, #1
 80005aa:	4619      	mov	r1, r3
 80005ac:	486e      	ldr	r0, [pc, #440]	; (8000768 <main+0x280>)
 80005ae:	f7ff febf 	bl	8000330 <FLASH_If_Write>

		/* Wait untill internet connection is ready */
		timeout = HAL_GetTick();
 80005b2:	f001 fc13 	bl	8001ddc <HAL_GetTick>
 80005b6:	66b8      	str	r0, [r7, #104]	; 0x68
		while (HAL_GetTick() - timeout < 60000 * 10) {
 80005b8:	e006      	b.n	80005c8 <main+0xe0>
			if (m95.GPRSSignal)
 80005ba:	4b74      	ldr	r3, [pc, #464]	; (800078c <main+0x2a4>)
 80005bc:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80005c0:	330e      	adds	r3, #14
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d108      	bne.n	80005da <main+0xf2>
		while (HAL_GetTick() - timeout < 60000 * 10) {
 80005c8:	f001 fc08 	bl	8001ddc <HAL_GetTick>
 80005cc:	4602      	mov	r2, r0
 80005ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	4a6f      	ldr	r2, [pc, #444]	; (8000790 <main+0x2a8>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d9f0      	bls.n	80005ba <main+0xd2>
 80005d8:	e000      	b.n	80005dc <main+0xf4>
				break;
 80005da:	bf00      	nop
		}

		/* Set FTP username and password */
		M95_FTPConfig(ftpUser, ftpPass, fileName);
 80005dc:	4a6d      	ldr	r2, [pc, #436]	; (8000794 <main+0x2ac>)
 80005de:	496e      	ldr	r1, [pc, #440]	; (8000798 <main+0x2b0>)
 80005e0:	486e      	ldr	r0, [pc, #440]	; (800079c <main+0x2b4>)
 80005e2:	f000 fc6f 	bl	8000ec4 <M95_FTPConfig>

		if (m95.GPRSSignal) {
 80005e6:	4b69      	ldr	r3, [pc, #420]	; (800078c <main+0x2a4>)
 80005e8:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80005ec:	330e      	adds	r3, #14
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	f000 8085 	beq.w	8000700 <main+0x218>

			/* Open connection with FTP server */
			if (M95_FTPOpen(ftpIp, ftpPort)) {
 80005f6:	496a      	ldr	r1, [pc, #424]	; (80007a0 <main+0x2b8>)
 80005f8:	486a      	ldr	r0, [pc, #424]	; (80007a4 <main+0x2bc>)
 80005fa:	f000 fca5 	bl	8000f48 <M95_FTPOpen>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	f000 8090 	beq.w	8000726 <main+0x23e>
				char buffer[100]={0};
 8000606:	463b      	mov	r3, r7
 8000608:	2264      	movs	r2, #100	; 0x64
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f003 f83f 	bl	8003690 <memset>

				/* Check the new firmware file size
				 * Skip firmware update if file size exceeds the predetermined memory allocation */
				sprintf(buffer, "%s.%d",fileName,totalFile);
 8000612:	4b65      	ldr	r3, [pc, #404]	; (80007a8 <main+0x2c0>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	4638      	mov	r0, r7
 8000618:	4a5e      	ldr	r2, [pc, #376]	; (8000794 <main+0x2ac>)
 800061a:	4964      	ldr	r1, [pc, #400]	; (80007ac <main+0x2c4>)
 800061c:	f003 f8bc 	bl	8003798 <siprintf>
				m95.FTP.FileSize = M95_FTPFileSize(buffer);
 8000620:	463b      	mov	r3, r7
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fcdc 	bl	8000fe0 <M95_FTPFileSize>
 8000628:	4602      	mov	r2, r0
 800062a:	4b58      	ldr	r3, [pc, #352]	; (800078c <main+0x2a4>)
 800062c:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000630:	330c      	adds	r3, #12
 8000632:	601a      	str	r2, [r3, #0]
				if (m95.FTP.FileSize != 0 && (m95.FTP.FileSize + 4096*totalFile) < USER_FLASH_SIZE) {
 8000634:	4b55      	ldr	r3, [pc, #340]	; (800078c <main+0x2a4>)
 8000636:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800063a:	330c      	adds	r3, #12
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d04a      	beq.n	80006d8 <main+0x1f0>
 8000642:	4b52      	ldr	r3, [pc, #328]	; (800078c <main+0x2a4>)
 8000644:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000648:	330c      	adds	r3, #12
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a56      	ldr	r2, [pc, #344]	; (80007a8 <main+0x2c0>)
 800064e:	7812      	ldrb	r2, [r2, #0]
 8000650:	0312      	lsls	r2, r2, #12
 8000652:	4413      	add	r3, r2
 8000654:	f5b3 3f48 	cmp.w	r3, #204800	; 0x32000
 8000658:	d23e      	bcs.n	80006d8 <main+0x1f0>

					printf("Create backup point\r\n");
 800065a:	4855      	ldr	r0, [pc, #340]	; (80007b0 <main+0x2c8>)
 800065c:	f003 f894 	bl	8003788 <puts>
					/* Free up APPLICATION_2 space */
					FLASH_If_Erase(APPLICATION_2, USER_FLASH_END_ADDRESS);
 8000660:	4954      	ldr	r1, [pc, #336]	; (80007b4 <main+0x2cc>)
 8000662:	4855      	ldr	r0, [pc, #340]	; (80007b8 <main+0x2d0>)
 8000664:	f7ff fe30 	bl	80002c8 <FLASH_If_Erase>

					/* Copy old firmware (APPLICATION_1) to APPLICATION_2 */
					FLASH_If_Write(APPLICATION_2,(uint32_t*) APPLICATION_1, USER_FLASH_SIZE / 4);
 8000668:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 800066c:	4953      	ldr	r1, [pc, #332]	; (80007bc <main+0x2d4>)
 800066e:	4852      	ldr	r0, [pc, #328]	; (80007b8 <main+0x2d0>)
 8000670:	f7ff fe5e 	bl	8000330 <FLASH_If_Write>

					/* Free up APPLICATION_1 space */
					FLASH_If_Erase(APPLICATION_1, APPLICATION_2);
 8000674:	4950      	ldr	r1, [pc, #320]	; (80007b8 <main+0x2d0>)
 8000676:	4851      	ldr	r0, [pc, #324]	; (80007bc <main+0x2d4>)
 8000678:	f7ff fe26 	bl	80002c8 <FLASH_If_Erase>

					/* Download new firmware and write to APPLICATION_1 */
					if (!DownloadFile(fileName, m95.FTP.FileSize + 4096*totalFile)) {
 800067c:	4b43      	ldr	r3, [pc, #268]	; (800078c <main+0x2a4>)
 800067e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000682:	330c      	adds	r3, #12
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a48      	ldr	r2, [pc, #288]	; (80007a8 <main+0x2c0>)
 8000688:	7812      	ldrb	r2, [r2, #0]
 800068a:	0312      	lsls	r2, r2, #12
 800068c:	4413      	add	r3, r2
 800068e:	4619      	mov	r1, r3
 8000690:	4840      	ldr	r0, [pc, #256]	; (8000794 <main+0x2ac>)
 8000692:	f000 fa7f 	bl	8000b94 <DownloadFile>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d144      	bne.n	8000726 <main+0x23e>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a2:	4834      	ldr	r0, [pc, #208]	; (8000774 <main+0x28c>)
 80006a4:	f002 f879 	bl	800279a <HAL_GPIO_WritePin>
						FLASH_If_Erase(APPLICATION_1, APPLICATION_2);
 80006a8:	4943      	ldr	r1, [pc, #268]	; (80007b8 <main+0x2d0>)
 80006aa:	4844      	ldr	r0, [pc, #272]	; (80007bc <main+0x2d4>)
 80006ac:	f7ff fe0c 	bl	80002c8 <FLASH_If_Erase>

						/* Copy old firmware (APPLICATION_1) to APPLICATION_2 */
						FLASH_If_Write(APPLICATION_1, (uint32_t*) APPLICATION_2,
 80006b0:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 80006b4:	4940      	ldr	r1, [pc, #256]	; (80007b8 <main+0x2d0>)
 80006b6:	4841      	ldr	r0, [pc, #260]	; (80007bc <main+0x2d4>)
 80006b8:	f7ff fe3a 	bl	8000330 <FLASH_If_Write>
								USER_FLASH_SIZE / 4);
						strcpy(smsMessage, "Firmware update failed\nERROR:1\n");
 80006bc:	4a40      	ldr	r2, [pc, #256]	; (80007c0 <main+0x2d8>)
 80006be:	4b41      	ldr	r3, [pc, #260]	; (80007c4 <main+0x2dc>)
 80006c0:	4614      	mov	r4, r2
 80006c2:	461d      	mov	r5, r3
 80006c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

						status = 0;
 80006d0:	4b3d      	ldr	r3, [pc, #244]	; (80007c8 <main+0x2e0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
					if (!DownloadFile(fileName, m95.FTP.FileSize + 4096*totalFile)) {
 80006d6:	e026      	b.n	8000726 <main+0x23e>

					}

//					HAL_NVIC_SystemReset();
				} else {
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006de:	4825      	ldr	r0, [pc, #148]	; (8000774 <main+0x28c>)
 80006e0:	f002 f85b 	bl	800279a <HAL_GPIO_WritePin>
					strcpy(smsMessage, "Firmware update failed\nERROR:2\n");
 80006e4:	4a36      	ldr	r2, [pc, #216]	; (80007c0 <main+0x2d8>)
 80006e6:	4b39      	ldr	r3, [pc, #228]	; (80007cc <main+0x2e4>)
 80006e8:	4614      	mov	r4, r2
 80006ea:	461d      	mov	r5, r3
 80006ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					status = 0;
 80006f8:	4b33      	ldr	r3, [pc, #204]	; (80007c8 <main+0x2e0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
 80006fe:	e012      	b.n	8000726 <main+0x23e>
				}

			}
		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000706:	481b      	ldr	r0, [pc, #108]	; (8000774 <main+0x28c>)
 8000708:	f002 f847 	bl	800279a <HAL_GPIO_WritePin>
			status = 0;
 800070c:	4b2e      	ldr	r3, [pc, #184]	; (80007c8 <main+0x2e0>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
			strcpy(smsMessage, "Firmware update failed\nERROR:3\n");
 8000712:	4a2b      	ldr	r2, [pc, #172]	; (80007c0 <main+0x2d8>)
 8000714:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <main+0x2e8>)
 8000716:	4614      	mov	r4, r2
 8000718:	461d      	mov	r5, r3
 800071a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		}

		printf(smsMessage);
 8000726:	4826      	ldr	r0, [pc, #152]	; (80007c0 <main+0x2d8>)
 8000728:	f002 ffba 	bl	80036a0 <iprintf>
		M95_SMSSend(phoneNum, smsMessage);
 800072c:	4924      	ldr	r1, [pc, #144]	; (80007c0 <main+0x2d8>)
 800072e:	4829      	ldr	r0, [pc, #164]	; (80007d4 <main+0x2ec>)
 8000730:	f000 fcf4 	bl	800111c <M95_SMSSend>
		HAL_Delay(100);
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	f001 fb5b 	bl	8001df0 <HAL_Delay>
	}

	/* Run application */
	JumpAddress = *(__IO uint32_t*) (APPLICATION_1 + 4);
 800073a:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <main+0x2f0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a27      	ldr	r2, [pc, #156]	; (80007dc <main+0x2f4>)
 8000740:	6013      	str	r3, [r2, #0]
	JumpToApplication = (pFunction) JumpAddress;
 8000742:	4b26      	ldr	r3, [pc, #152]	; (80007dc <main+0x2f4>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <main+0x2f8>)
 800074a:	601a      	str	r2, [r3, #0]

	/* Initialize user application's Stack Pointer */
	__set_MSP(*(__IO uint32_t*) APPLICATION_1);
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <main+0x2d4>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000752:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000754:	f383 8808 	msr	MSP, r3
	JumpToApplication();
 8000758:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <main+0x2f8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4798      	blx	r3

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800075e:	e7fe      	b.n	800075e <main+0x276>
 8000760:	40005000 	.word	0x40005000
 8000764:	40010800 	.word	0x40010800
 8000768:	08005800 	.word	0x08005800
 800076c:	200002a0 	.word	0x200002a0
 8000770:	40011000 	.word	0x40011000
 8000774:	40010c00 	.word	0x40010c00
 8000778:	08004aa8 	.word	0x08004aa8
 800077c:	08004ac0 	.word	0x08004ac0
 8000780:	08004acc 	.word	0x08004acc
 8000784:	08004ad8 	.word	0x08004ad8
 8000788:	2000029c 	.word	0x2000029c
 800078c:	200002c4 	.word	0x200002c4
 8000790:	000927bf 	.word	0x000927bf
 8000794:	20000034 	.word	0x20000034
 8000798:	20000060 	.word	0x20000060
 800079c:	20000054 	.word	0x20000054
 80007a0:	20000014 	.word	0x20000014
 80007a4:	20000000 	.word	0x20000000
 80007a8:	200002c0 	.word	0x200002c0
 80007ac:	08004ae8 	.word	0x08004ae8
 80007b0:	08004af0 	.word	0x08004af0
 80007b4:	08080000 	.word	0x08080000
 80007b8:	08043800 	.word	0x08043800
 80007bc:	08006800 	.word	0x08006800
 80007c0:	20000070 	.word	0x20000070
 80007c4:	08004b08 	.word	0x08004b08
 80007c8:	2000006c 	.word	0x2000006c
 80007cc:	08004b28 	.word	0x08004b28
 80007d0:	08004b48 	.word	0x08004b48
 80007d4:	20000020 	.word	0x20000020
 80007d8:	08006804 	.word	0x08006804
 80007dc:	200002b8 	.word	0x200002b8
 80007e0:	200002bc 	.word	0x200002bc

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b090      	sub	sp, #64	; 0x40
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0318 	add.w	r3, r7, #24
 80007ee:	2228      	movs	r2, #40	; 0x28
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 ff4c 	bl	8003690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000806:	2301      	movs	r3, #1
 8000808:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800080a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800080e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000814:	2301      	movs	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000818:	2302      	movs	r3, #2
 800081a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000820:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000822:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0318 	add.w	r3, r7, #24
 800082c:	4618      	mov	r0, r3
 800082e:	f001 ffe5 	bl	80027fc <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000838:	f000 fae0 	bl	8000dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	230f      	movs	r3, #15
 800083e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	2302      	movs	r3, #2
 8000842:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2102      	movs	r1, #2
 8000856:	4618      	mov	r0, r3
 8000858:	f002 fa50 	bl	8002cfc <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000862:	f000 facb 	bl	8000dfc <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	3740      	adds	r7, #64	; 0x40
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <Read_FTPConfig>:

/* USER CODE BEGIN 4 */

void Read_FTPConfig(void) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b08e      	sub	sp, #56	; 0x38
 8000874:	af00      	add	r7, sp, #0
	uint32_t address = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t buffer[32] = { 0 };
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	2220      	movs	r2, #32
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f002 ff04 	bl	8003690 <memset>
	uint8_t x = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	/* Read FTP IP address */
	for (address = FTP_IP, x = 0; address < FTP_IP + 20; address++, x++) {
 800088e:	4baf      	ldr	r3, [pc, #700]	; (8000b4c <Read_FTPConfig+0x2dc>)
 8000890:	637b      	str	r3, [r7, #52]	; 0x34
 8000892:	2300      	movs	r3, #0
 8000894:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000898:	e01b      	b.n	80008d2 <Read_FTPConfig+0x62>
		if (*(__IO uint8_t*) address == 0||*(__IO uint8_t*) address == 0xFF)
 800089a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d01a      	beq.n	80008da <Read_FTPConfig+0x6a>
 80008a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2bff      	cmp	r3, #255	; 0xff
 80008ac:	d015      	beq.n	80008da <Read_FTPConfig+0x6a>
			break;
		buffer[x] = *(__IO uint8_t*) address;
 80008ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008b4:	7812      	ldrb	r2, [r2, #0]
 80008b6:	b2d2      	uxtb	r2, r2
 80008b8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80008bc:	440b      	add	r3, r1
 80008be:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (address = FTP_IP, x = 0; address < FTP_IP + 20; address++, x++) {
 80008c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008c4:	3301      	adds	r3, #1
 80008c6:	637b      	str	r3, [r7, #52]	; 0x34
 80008c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008cc:	3301      	adds	r3, #1
 80008ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80008d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008d4:	4a9e      	ldr	r2, [pc, #632]	; (8000b50 <Read_FTPConfig+0x2e0>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d9df      	bls.n	800089a <Read_FTPConfig+0x2a>
	}
	if (strlen(buffer) > 7) {
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fcaa 	bl	8000238 <strlen>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b07      	cmp	r3, #7
 80008e8:	d905      	bls.n	80008f6 <Read_FTPConfig+0x86>
		strcpy(ftpIp, buffer);
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	4619      	mov	r1, r3
 80008f0:	4898      	ldr	r0, [pc, #608]	; (8000b54 <Read_FTPConfig+0x2e4>)
 80008f2:	f002 ff7e 	bl	80037f2 <strcpy>
	}

	printf("FTP IP Address: %s\r\n", ftpIp);
 80008f6:	4997      	ldr	r1, [pc, #604]	; (8000b54 <Read_FTPConfig+0x2e4>)
 80008f8:	4897      	ldr	r0, [pc, #604]	; (8000b58 <Read_FTPConfig+0x2e8>)
 80008fa:	f002 fed1 	bl	80036a0 <iprintf>
	memset(buffer, 0, sizeof(buffer));
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	2220      	movs	r2, #32
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f002 fec2 	bl	8003690 <memset>

	/* Read FTP port */
	for (address = FTP_PORT, x = 0; address < FTP_PORT + 20; address++, x++) {
 800090c:	4b93      	ldr	r3, [pc, #588]	; (8000b5c <Read_FTPConfig+0x2ec>)
 800090e:	637b      	str	r3, [r7, #52]	; 0x34
 8000910:	2300      	movs	r3, #0
 8000912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000916:	e01b      	b.n	8000950 <Read_FTPConfig+0xe0>
		if (*(__IO uint8_t*) address == 0||*(__IO uint8_t*) address == 0xFF)
 8000918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d01a      	beq.n	8000958 <Read_FTPConfig+0xe8>
 8000922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	2bff      	cmp	r3, #255	; 0xff
 800092a:	d015      	beq.n	8000958 <Read_FTPConfig+0xe8>
			break;
		buffer[x] = *(__IO uint8_t*) address;
 800092c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800092e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000932:	7812      	ldrb	r2, [r2, #0]
 8000934:	b2d2      	uxtb	r2, r2
 8000936:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800093a:	440b      	add	r3, r1
 800093c:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (address = FTP_PORT, x = 0; address < FTP_PORT + 20; address++, x++) {
 8000940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000942:	3301      	adds	r3, #1
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
 8000946:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800094a:	3301      	adds	r3, #1
 800094c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000952:	4a83      	ldr	r2, [pc, #524]	; (8000b60 <Read_FTPConfig+0x2f0>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d9df      	bls.n	8000918 <Read_FTPConfig+0xa8>
	}

	if (strlen(buffer) > 1) {
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fc6b 	bl	8000238 <strlen>
 8000962:	4603      	mov	r3, r0
 8000964:	2b01      	cmp	r3, #1
 8000966:	d905      	bls.n	8000974 <Read_FTPConfig+0x104>
		strcpy(ftpPort, buffer);
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	4619      	mov	r1, r3
 800096e:	487d      	ldr	r0, [pc, #500]	; (8000b64 <Read_FTPConfig+0x2f4>)
 8000970:	f002 ff3f 	bl	80037f2 <strcpy>
	}
	printf("FTP Port: %s\r\n", ftpPort);
 8000974:	497b      	ldr	r1, [pc, #492]	; (8000b64 <Read_FTPConfig+0x2f4>)
 8000976:	487c      	ldr	r0, [pc, #496]	; (8000b68 <Read_FTPConfig+0x2f8>)
 8000978:	f002 fe92 	bl	80036a0 <iprintf>
	memset(buffer, 0, sizeof(buffer));
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	2220      	movs	r2, #32
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f002 fe83 	bl	8003690 <memset>

	/* Read firmware file name */
	for (address = FTP_FILENAME, x = 0; address < FTP_FILENAME + 32;
 800098a:	4b78      	ldr	r3, [pc, #480]	; (8000b6c <Read_FTPConfig+0x2fc>)
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
 800098e:	2300      	movs	r3, #0
 8000990:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000994:	e020      	b.n	80009d8 <Read_FTPConfig+0x168>
			address++, x++) {
		if (*(__IO uint8_t*) address == 0||*(__IO uint8_t*) address == 0xFF||*(__IO uint8_t*) address == 0x0D)
 8000996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2b00      	cmp	r3, #0
 800099e:	d01f      	beq.n	80009e0 <Read_FTPConfig+0x170>
 80009a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2bff      	cmp	r3, #255	; 0xff
 80009a8:	d01a      	beq.n	80009e0 <Read_FTPConfig+0x170>
 80009aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b0d      	cmp	r3, #13
 80009b2:	d015      	beq.n	80009e0 <Read_FTPConfig+0x170>
			break;
		buffer[x] = *(__IO uint8_t*) address;
 80009b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009ba:	7812      	ldrb	r2, [r2, #0]
 80009bc:	b2d2      	uxtb	r2, r2
 80009be:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80009c2:	440b      	add	r3, r1
 80009c4:	f803 2c30 	strb.w	r2, [r3, #-48]
			address++, x++) {
 80009c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ca:	3301      	adds	r3, #1
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
 80009ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009d2:	3301      	adds	r3, #1
 80009d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	for (address = FTP_FILENAME, x = 0; address < FTP_FILENAME + 32;
 80009d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009da:	4a65      	ldr	r2, [pc, #404]	; (8000b70 <Read_FTPConfig+0x300>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d9da      	bls.n	8000996 <Read_FTPConfig+0x126>
	}

	if (strlen(buffer) > 3) {
 80009e0:	f107 0308 	add.w	r3, r7, #8
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fc27 	bl	8000238 <strlen>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	d95a      	bls.n	8000aa6 <Read_FTPConfig+0x236>
		uint8_t parseFileName = 1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		uint x = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint8_t buffer2[5] = {0};
 80009fa:	463b      	mov	r3, r7
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	711a      	strb	r2, [r3, #4]
		for(int i = 0; i<strlen(buffer);i++){
 8000a02:	2300      	movs	r3, #0
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a06:	e03d      	b.n	8000a84 <Read_FTPConfig+0x214>

			if(parseFileName){
 8000a08:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d00a      	beq.n	8000a26 <Read_FTPConfig+0x1b6>
				fileName[i] = buffer[i];
 8000a10:	f107 0208 	add.w	r2, r7, #8
 8000a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a16:	4413      	add	r3, r2
 8000a18:	7819      	ldrb	r1, [r3, #0]
 8000a1a:	4a56      	ldr	r2, [pc, #344]	; (8000b74 <Read_FTPConfig+0x304>)
 8000a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1e:	4413      	add	r3, r2
 8000a20:	460a      	mov	r2, r1
 8000a22:	701a      	strb	r2, [r3, #0]
 8000a24:	e013      	b.n	8000a4e <Read_FTPConfig+0x1de>
			}
			else{
				if(buffer[i]=='.')continue;
 8000a26:	f107 0208 	add.w	r2, r7, #8
 8000a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2c:	4413      	add	r3, r2
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b2e      	cmp	r3, #46	; 0x2e
 8000a32:	d023      	beq.n	8000a7c <Read_FTPConfig+0x20c>
				buffer2[i - x] = buffer[i];
 8000a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	f107 0108 	add.w	r1, r7, #8
 8000a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a40:	440a      	add	r2, r1
 8000a42:	7812      	ldrb	r2, [r2, #0]
 8000a44:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000a48:	440b      	add	r3, r1
 8000a4a:	f803 2c38 	strb.w	r2, [r3, #-56]
			}
			if(buffer[i]=='n'&&buffer[i+1]=='.'){
 8000a4e:	f107 0208 	add.w	r2, r7, #8
 8000a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a54:	4413      	add	r3, r2
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b6e      	cmp	r3, #110	; 0x6e
 8000a5a:	d110      	bne.n	8000a7e <Read_FTPConfig+0x20e>
 8000a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a5e:	3301      	adds	r3, #1
 8000a60:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a64:	4413      	add	r3, r2
 8000a66:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8000a6a:	2b2e      	cmp	r3, #46	; 0x2e
 8000a6c:	d107      	bne.n	8000a7e <Read_FTPConfig+0x20e>
				parseFileName = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				x = i + 2;
 8000a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a76:	3302      	adds	r3, #2
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a7a:	e000      	b.n	8000a7e <Read_FTPConfig+0x20e>
				if(buffer[i]=='.')continue;
 8000a7c:	bf00      	nop
		for(int i = 0; i<strlen(buffer);i++){
 8000a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a80:	3301      	adds	r3, #1
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fbd5 	bl	8000238 <strlen>
 8000a8e:	4602      	mov	r2, r0
 8000a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d8b8      	bhi.n	8000a08 <Read_FTPConfig+0x198>
			}
		}
		totalFile = atoi(buffer2);
 8000a96:	463b      	mov	r3, r7
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f002 fdcb 	bl	8003634 <atoi>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4b35      	ldr	r3, [pc, #212]	; (8000b78 <Read_FTPConfig+0x308>)
 8000aa4:	701a      	strb	r2, [r3, #0]
		//strcpy(fileName, buffer);
	}
	memset(buffer, 0, sizeof(buffer));
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	2220      	movs	r2, #32
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 fdee 	bl	8003690 <memset>

	/* Read sender phone number */
	for (address = PHONE_NUMBER, x = 0; address < PHONE_NUMBER + 32;
 8000ab4:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <Read_FTPConfig+0x30c>)
 8000ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000abe:	e020      	b.n	8000b02 <Read_FTPConfig+0x292>
			address++, x++) {
		if (*(__IO uint8_t*) address == 0||*(__IO uint8_t*) address == 0xFF||*(__IO uint8_t*) address == 0x0D)
 8000ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d01f      	beq.n	8000b0a <Read_FTPConfig+0x29a>
 8000aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2bff      	cmp	r3, #255	; 0xff
 8000ad2:	d01a      	beq.n	8000b0a <Read_FTPConfig+0x29a>
 8000ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b0d      	cmp	r3, #13
 8000adc:	d015      	beq.n	8000b0a <Read_FTPConfig+0x29a>
			break;
		buffer[x] = *(__IO uint8_t*) address;
 8000ade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ae0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ae4:	7812      	ldrb	r2, [r2, #0]
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000aec:	440b      	add	r3, r1
 8000aee:	f803 2c30 	strb.w	r2, [r3, #-48]
			address++, x++) {
 8000af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af4:	3301      	adds	r3, #1
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
 8000af8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000afc:	3301      	adds	r3, #1
 8000afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	for (address = PHONE_NUMBER, x = 0; address < PHONE_NUMBER + 32;
 8000b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b04:	4a1e      	ldr	r2, [pc, #120]	; (8000b80 <Read_FTPConfig+0x310>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d9da      	bls.n	8000ac0 <Read_FTPConfig+0x250>
	}
	if (strlen(buffer) > 7) {
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fb92 	bl	8000238 <strlen>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b07      	cmp	r3, #7
 8000b18:	d905      	bls.n	8000b26 <Read_FTPConfig+0x2b6>
		strcpy(phoneNum, buffer);
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4818      	ldr	r0, [pc, #96]	; (8000b84 <Read_FTPConfig+0x314>)
 8000b22:	f002 fe66 	bl	80037f2 <strcpy>
	}
	printf("Sender Phone Number: %s\r\n", phoneNum);
 8000b26:	4917      	ldr	r1, [pc, #92]	; (8000b84 <Read_FTPConfig+0x314>)
 8000b28:	4817      	ldr	r0, [pc, #92]	; (8000b88 <Read_FTPConfig+0x318>)
 8000b2a:	f002 fdb9 	bl	80036a0 <iprintf>



	printf("File name: %s\r\n", fileName);
 8000b2e:	4911      	ldr	r1, [pc, #68]	; (8000b74 <Read_FTPConfig+0x304>)
 8000b30:	4816      	ldr	r0, [pc, #88]	; (8000b8c <Read_FTPConfig+0x31c>)
 8000b32:	f002 fdb5 	bl	80036a0 <iprintf>
	printf("Total file: %d\r\n", totalFile);
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <Read_FTPConfig+0x308>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4814      	ldr	r0, [pc, #80]	; (8000b90 <Read_FTPConfig+0x320>)
 8000b3e:	f002 fdaf 	bl	80036a0 <iprintf>

}
 8000b42:	bf00      	nop
 8000b44:	3738      	adds	r7, #56	; 0x38
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	08005808 	.word	0x08005808
 8000b50:	0800581b 	.word	0x0800581b
 8000b54:	20000000 	.word	0x20000000
 8000b58:	08004b68 	.word	0x08004b68
 8000b5c:	08005828 	.word	0x08005828
 8000b60:	0800583b 	.word	0x0800583b
 8000b64:	20000014 	.word	0x20000014
 8000b68:	08004b80 	.word	0x08004b80
 8000b6c:	08005848 	.word	0x08005848
 8000b70:	08005867 	.word	0x08005867
 8000b74:	20000034 	.word	0x20000034
 8000b78:	200002c0 	.word	0x200002c0
 8000b7c:	08005868 	.word	0x08005868
 8000b80:	08005887 	.word	0x08005887
 8000b84:	20000020 	.word	0x20000020
 8000b88:	08004b90 	.word	0x08004b90
 8000b8c:	08004bac 	.word	0x08004bac
 8000b90:	08004bbc 	.word	0x08004bbc

08000b94 <DownloadFile>:

uint8_t DownloadFile(uint8_t *fileName, uint32_t fileSize) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b0a4      	sub	sp, #144	; 0x90
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]

	uint16_t totalPacket = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	uint16_t packetDataIndex = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	uint32_t flashDestination = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	uint32_t CRCFile = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	uint32_t CRCCalculated = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	677b      	str	r3, [r7, #116]	; 0x74
	uint16_t packetLength = 4096;
 8000bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bbe:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	uint8_t status = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint32_t ramsource = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t timeout = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	uint32_t timeout2 = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint8_t buffer[100] = {0};
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	2264      	movs	r2, #100	; 0x64
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f002 fd56 	bl	8003690 <memset>

	/* data dari ftp dibagi menjadi kibibytes packet */
	m95.FTP.TotalPacket = fileSize / 4096;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	0b1b      	lsrs	r3, r3, #12
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b7a      	ldr	r3, [pc, #488]	; (8000dd4 <DownloadFile+0x240>)
 8000bec:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000bf0:	3314      	adds	r3, #20
 8000bf2:	701a      	strb	r2, [r3, #0]

	/* Set APPLICATION_1 as starting point to be flash */
	flashDestination = APPLICATION_1;
 8000bf4:	4b78      	ldr	r3, [pc, #480]	; (8000dd8 <DownloadFile+0x244>)
 8000bf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	/* Request to get file from FTP server */


	printf("\nDownload new firmware\r\n");
 8000bfa:	4878      	ldr	r0, [pc, #480]	; (8000ddc <DownloadFile+0x248>)
 8000bfc:	f002 fdc4 	bl	8003788 <puts>

	timeout = HAL_GetTick();
 8000c00:	f001 f8ec 	bl	8001ddc <HAL_GetTick>
 8000c04:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	timeout2 = timeout;
 8000c08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000c0c:	67fb      	str	r3, [r7, #124]	; 0x7c
	while (m95.FTP.PacketIndex <= m95.FTP.TotalPacket) {
 8000c0e:	e0b0      	b.n	8000d72 <DownloadFile+0x1de>
		if(HAL_GetTick() - timeout2> 30000)break;
 8000c10:	f001 f8e4 	bl	8001ddc <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	f247 5230 	movw	r2, #30000	; 0x7530
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	f200 80b5 	bhi.w	8000d8e <DownloadFile+0x1fa>


		sprintf(buffer, "%s.%d",fileName,m95.FTP.PacketIndex);
 8000c24:	4b6b      	ldr	r3, [pc, #428]	; (8000dd4 <DownloadFile+0x240>)
 8000c26:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000c2a:	3308      	adds	r3, #8
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	f107 000c 	add.w	r0, r7, #12
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	496a      	ldr	r1, [pc, #424]	; (8000de0 <DownloadFile+0x24c>)
 8000c36:	f002 fdaf 	bl	8003798 <siprintf>
		if (M95_FTPGetFile(buffer)==true) {
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 fa28 	bl	8001094 <M95_FTPGetFile>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f000 80a3 	beq.w	8000d92 <DownloadFile+0x1fe>

			timeout2 = HAL_GetTick();
 8000c4c:	f001 f8c6 	bl	8001ddc <HAL_GetTick>
 8000c50:	67f8      	str	r0, [r7, #124]	; 0x7c
			while(HAL_GetTick() - timeout< 90000){
 8000c52:	e082      	b.n	8000d5a <DownloadFile+0x1c6>
				if (m95.FTP.PacketReady) {
 8000c54:	4b5f      	ldr	r3, [pc, #380]	; (8000dd4 <DownloadFile+0x240>)
 8000c56:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000c5a:	3309      	adds	r3, #9
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d07b      	beq.n	8000d5a <DownloadFile+0x1c6>

					m95.FTP.PacketReady = 0;
 8000c62:	4b5c      	ldr	r3, [pc, #368]	; (8000dd4 <DownloadFile+0x240>)
 8000c64:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000c68:	3309      	adds	r3, #9
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
					if (m95.FTP.PacketIndex == m95.FTP.TotalPacket) {
 8000c6e:	4b59      	ldr	r3, [pc, #356]	; (8000dd4 <DownloadFile+0x240>)
 8000c70:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000c74:	3308      	adds	r3, #8
 8000c76:	781a      	ldrb	r2, [r3, #0]
 8000c78:	4b56      	ldr	r3, [pc, #344]	; (8000dd4 <DownloadFile+0x240>)
 8000c7a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000c7e:	3314      	adds	r3, #20
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d12c      	bne.n	8000ce0 <DownloadFile+0x14c>
						packetLength = (fileSize % 4096) - 4;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	3b04      	subs	r3, #4
 8000c92:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

						CRCFile =
								((uint32_t) m95.FTP.FtpPacket[packetLength])
 8000c96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000c9a:	4a4e      	ldr	r2, [pc, #312]	; (8000dd4 <DownloadFile+0x240>)
 8000c9c:	4413      	add	r3, r2
 8000c9e:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8000ca2:	4619      	mov	r1, r3
										| ((uint32_t) m95.FTP.FtpPacket[packetLength
												+ 1]) << 8
 8000ca4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000ca8:	3301      	adds	r3, #1
										| ((uint32_t) m95.FTP.FtpPacket[packetLength
 8000caa:	4a4a      	ldr	r2, [pc, #296]	; (8000dd4 <DownloadFile+0x240>)
 8000cac:	4413      	add	r3, r2
 8000cae:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
												+ 1]) << 8
 8000cb2:	021b      	lsls	r3, r3, #8
										| ((uint32_t) m95.FTP.FtpPacket[packetLength
 8000cb4:	ea41 0203 	orr.w	r2, r1, r3
										| ((uint32_t) m95.FTP.FtpPacket[packetLength
												+ 2]) << 16
 8000cb8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000cbc:	3302      	adds	r3, #2
										| ((uint32_t) m95.FTP.FtpPacket[packetLength
 8000cbe:	4945      	ldr	r1, [pc, #276]	; (8000dd4 <DownloadFile+0x240>)
 8000cc0:	440b      	add	r3, r1
 8000cc2:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
												+ 2]) << 16
 8000cc6:	041b      	lsls	r3, r3, #16
										| ((uint32_t) m95.FTP.FtpPacket[packetLength
 8000cc8:	431a      	orrs	r2, r3
										| ((uint32_t) m95.FTP.FtpPacket[packetLength
												+ 3]) << 24;
 8000cca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000cce:	3303      	adds	r3, #3
										| ((uint32_t) m95.FTP.FtpPacket[packetLength
 8000cd0:	4940      	ldr	r1, [pc, #256]	; (8000dd4 <DownloadFile+0x240>)
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
												+ 3]) << 24;
 8000cd8:	061b      	lsls	r3, r3, #24
						CRCFile =
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					}
					ramsource =
 8000ce0:	4b40      	ldr	r3, [pc, #256]	; (8000de4 <DownloadFile+0x250>)
 8000ce2:	673b      	str	r3, [r7, #112]	; 0x70
							(uint32_t) & m95.FTP.FtpPacket;
					if (FLASH_If_Write(flashDestination, (uint32_t*) ramsource,
 8000ce4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000ce6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000cea:	089b      	lsrs	r3, r3, #2
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	461a      	mov	r2, r3
 8000cf0:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000cf4:	f7ff fb1c 	bl	8000330 <FLASH_If_Write>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d138      	bne.n	8000d70 <DownloadFile+0x1dc>
							packetLength / 4) == FLASHIF_OK) {
		//					printf("write ok\r\n");
						timeout = HAL_GetTick();
 8000cfe:	f001 f86d 	bl	8001ddc <HAL_GetTick>
 8000d02:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
						memset(m95.FTP.FtpPacket, 0,sizeof(m95.FTP.FtpPacket));
 8000d06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4835      	ldr	r0, [pc, #212]	; (8000de4 <DownloadFile+0x250>)
 8000d0e:	f002 fcbf 	bl	8003690 <memset>
						flashDestination += packetLength;
 8000d12:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000d16:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000d1a:	4413      	add	r3, r2
 8000d1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						m95.FTP.PacketIndex++;
 8000d20:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <DownloadFile+0x240>)
 8000d22:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000d26:	3308      	adds	r3, #8
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <DownloadFile+0x240>)
 8000d30:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000d34:	3308      	adds	r3, #8
 8000d36:	701a      	strb	r2, [r3, #0]
						printf("Update process %lu of %lu\r\n",m95.FTP.PacketIndex,  m95.FTP.TotalPacket+1);
 8000d38:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <DownloadFile+0x240>)
 8000d3a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000d3e:	3308      	adds	r3, #8
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <DownloadFile+0x240>)
 8000d46:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000d4a:	3314      	adds	r3, #20
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	461a      	mov	r2, r3
 8000d52:	4825      	ldr	r0, [pc, #148]	; (8000de8 <DownloadFile+0x254>)
 8000d54:	f002 fca4 	bl	80036a0 <iprintf>
						break;
 8000d58:	e00b      	b.n	8000d72 <DownloadFile+0x1de>
			while(HAL_GetTick() - timeout< 90000){
 8000d5a:	f001 f83f 	bl	8001ddc <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	4a21      	ldr	r2, [pc, #132]	; (8000dec <DownloadFile+0x258>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	f67f af73 	bls.w	8000c54 <DownloadFile+0xc0>
 8000d6e:	e000      	b.n	8000d72 <DownloadFile+0x1de>
					} else
						break;
 8000d70:	bf00      	nop
	while (m95.FTP.PacketIndex <= m95.FTP.TotalPacket) {
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <DownloadFile+0x240>)
 8000d74:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000d78:	3308      	adds	r3, #8
 8000d7a:	781a      	ldrb	r2, [r3, #0]
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <DownloadFile+0x240>)
 8000d7e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000d82:	3314      	adds	r3, #20
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	f67f af42 	bls.w	8000c10 <DownloadFile+0x7c>
 8000d8c:	e002      	b.n	8000d94 <DownloadFile+0x200>
		if(HAL_GetTick() - timeout2> 30000)break;
 8000d8e:	bf00      	nop
 8000d90:	e000      	b.n	8000d94 <DownloadFile+0x200>

				}
			}
		}
		else break;
 8000d92:	bf00      	nop

	}
	/* Perform CRC checksum */
	CRCCalculated = HAL_CRC_Calculate(&hcrc, (uint32_t*) APPLICATION_1,
			(fileSize - 4) / 4);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	3b04      	subs	r3, #4
	CRCCalculated = HAL_CRC_Calculate(&hcrc, (uint32_t*) APPLICATION_1,
 8000d98:	089b      	lsrs	r3, r3, #2
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	490e      	ldr	r1, [pc, #56]	; (8000dd8 <DownloadFile+0x244>)
 8000d9e:	4814      	ldr	r0, [pc, #80]	; (8000df0 <DownloadFile+0x25c>)
 8000da0:	f001 f947 	bl	8002032 <HAL_CRC_Calculate>
 8000da4:	6778      	str	r0, [r7, #116]	; 0x74
	printf("CRC File: %lu\r\n", CRCFile);
 8000da6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000daa:	4812      	ldr	r0, [pc, #72]	; (8000df4 <DownloadFile+0x260>)
 8000dac:	f002 fc78 	bl	80036a0 <iprintf>
	printf("CRC Calculated: %lu\r\n", CRCCalculated);
 8000db0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000db2:	4811      	ldr	r0, [pc, #68]	; (8000df8 <DownloadFile+0x264>)
 8000db4:	f002 fc74 	bl	80036a0 <iprintf>
	if (CRCCalculated == CRCFile) {
 8000db8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000dba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d102      	bne.n	8000dc8 <DownloadFile+0x234>
		status = 1;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	}
	return status;
 8000dc8:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85

}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3790      	adds	r7, #144	; 0x90
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200002c4 	.word	0x200002c4
 8000dd8:	08006800 	.word	0x08006800
 8000ddc:	08004bd0 	.word	0x08004bd0
 8000de0:	08004ae8 	.word	0x08004ae8
 8000de4:	200006cc 	.word	0x200006cc
 8000de8:	08004be8 	.word	0x08004be8
 8000dec:	00015f8f 	.word	0x00015f8f
 8000df0:	200002b0 	.word	0x200002b0
 8000df4:	08004c04 	.word	0x08004c04
 8000df8:	08004c14 	.word	0x08004c14

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e02:	e7fe      	b.n	8000e02 <Error_Handler+0x6>

08000e04 <LL_USART_ClearFlag_TC>:
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000e12:	601a      	str	r2, [r3, #0]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr

08000e1e <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	b2db      	uxtb	r3, r3
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr

08000e36 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000e42:	78fa      	ldrb	r2, [r7, #3]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	605a      	str	r2, [r3, #4]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr

08000e52 <StrToInt>:


uint32_t StrToInt(uint8_t *input);


uint32_t StrToInt(uint8_t *input){
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b088      	sub	sp, #32
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
	uint32_t result = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
	uint8_t buffer[15]={0};
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	f8c3 200b 	str.w	r2, [r3, #11]
	uint8_t i = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	77fb      	strb	r3, [r7, #31]

	while(1){
		if(*input>47 && *input<58){
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b2f      	cmp	r3, #47	; 0x2f
 8000e78:	d90e      	bls.n	8000e98 <StrToInt+0x46>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b39      	cmp	r3, #57	; 0x39
 8000e80:	d80a      	bhi.n	8000e98 <StrToInt+0x46>
			buffer[i++]=*input;
 8000e82:	7ffb      	ldrb	r3, [r7, #31]
 8000e84:	1c5a      	adds	r2, r3, #1
 8000e86:	77fa      	strb	r2, [r7, #31]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	781a      	ldrb	r2, [r3, #0]
 8000e8e:	f107 0320 	add.w	r3, r7, #32
 8000e92:	440b      	add	r3, r1
 8000e94:	f803 2c18 	strb.w	r2, [r3, #-24]
		}
		if(*input==0) break;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <StrToInt+0x56>
		input++;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	607b      	str	r3, [r7, #4]
		if(*input>47 && *input<58){
 8000ea6:	e7e4      	b.n	8000e72 <StrToInt+0x20>
		if(*input==0) break;
 8000ea8:	bf00      	nop
	}


	return result = atoi(buffer);
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f002 fbc0 	bl	8003634 <atoi>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	61bb      	str	r3, [r7, #24]
 8000eb8:	69bb      	ldr	r3, [r7, #24]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3720      	adds	r7, #32
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <M95_FTPConfig>:

bool M95_FTPConfig(uint8_t* user, uint8_t* pass, uint8_t* dir){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b09e      	sub	sp, #120	; 0x78
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]

	char buffer[100] = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2264      	movs	r2, #100	; 0x64
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 fbd9 	bl	8003690 <memset>
	sprintf(buffer, "AT+QFTPUSER=\"%s\"\r",user);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	4915      	ldr	r1, [pc, #84]	; (8000f3c <M95_FTPConfig+0x78>)
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f002 fc56 	bl	8003798 <siprintf>
	M95_SendATCommand(buffer, 1000);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 f98b 	bl	8001210 <M95_SendATCommand>

	sprintf(buffer, "AT+QFTPPASS=\"%s\"\r",pass);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	490f      	ldr	r1, [pc, #60]	; (8000f40 <M95_FTPConfig+0x7c>)
 8000f02:	4618      	mov	r0, r3
 8000f04:	f002 fc48 	bl	8003798 <siprintf>
	M95_SendATCommand(buffer, 1000);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f97d 	bl	8001210 <M95_SendATCommand>

	sprintf(buffer, "AT+QFTPPATH=\"Firmware Release/%s/\"\r",dir);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	4909      	ldr	r1, [pc, #36]	; (8000f44 <M95_FTPConfig+0x80>)
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f002 fc3a 	bl	8003798 <siprintf>
	M95_SendATCommand(buffer, 1000);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f96f 	bl	8001210 <M95_SendATCommand>
//	M95_SendATCommand("AT+QFTPPATH=\"Firmware Release/\"\r", 1000);
}
 8000f32:	bf00      	nop
 8000f34:	4618      	mov	r0, r3
 8000f36:	3778      	adds	r7, #120	; 0x78
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	08004c2c 	.word	0x08004c2c
 8000f40:	08004c40 	.word	0x08004c40
 8000f44:	08004c54 	.word	0x08004c54

08000f48 <M95_FTPOpen>:

bool M95_FTPOpen(uint8_t* ip, uint8_t* port){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08e      	sub	sp, #56	; 0x38
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]

	bool status = false;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t timeout = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	633b      	str	r3, [r7, #48]	; 0x30

	timeout = HAL_GetTick();
 8000f5c:	f000 ff3e 	bl	8001ddc <HAL_GetTick>
 8000f60:	6338      	str	r0, [r7, #48]	; 0x30

	char buffer[40] = {0};
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	2228      	movs	r2, #40	; 0x28
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f002 fb90 	bl	8003690 <memset>
	sprintf(buffer, "AT+QFTPOPEN=\"%s\",%s\r",ip,port);
 8000f70:	f107 0008 	add.w	r0, r7, #8
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	4916      	ldr	r1, [pc, #88]	; (8000fd4 <M95_FTPOpen+0x8c>)
 8000f7a:	f002 fc0d 	bl	8003798 <siprintf>
	if(M95_SendATCommand(buffer, 20000)== Module_Idle){
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f942 	bl	8001210 <M95_SendATCommand>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d11a      	bne.n	8000fc8 <M95_FTPOpen+0x80>

		/* wait untill ftp connected/not connected */
		while(HAL_GetTick() - timeout < 10000){
 8000f92:	e010      	b.n	8000fb6 <M95_FTPOpen+0x6e>
			if(strstr(m95.UsartRxBuffer[m95.RxBufferQueue], "+QFTPOPEN:0")){
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <M95_FTPOpen+0x90>)
 8000f96:	79db      	ldrb	r3, [r3, #7]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	3308      	adds	r3, #8
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <M95_FTPOpen+0x90>)
 8000f9e:	4413      	add	r3, r2
 8000fa0:	490e      	ldr	r1, [pc, #56]	; (8000fdc <M95_FTPOpen+0x94>)
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f002 fc2d 	bl	8003802 <strstr>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <M95_FTPOpen+0x6e>
				status = true;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8000fb4:	e008      	b.n	8000fc8 <M95_FTPOpen+0x80>
		while(HAL_GetTick() - timeout < 10000){
 8000fb6:	f000 ff11 	bl	8001ddc <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d9e5      	bls.n	8000f94 <M95_FTPOpen+0x4c>
			}
		}

	}

	return status;
 8000fc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3738      	adds	r7, #56	; 0x38
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	08004c78 	.word	0x08004c78
 8000fd8:	200002c4 	.word	0x200002c4
 8000fdc:	08004c90 	.word	0x08004c90

08000fe0 <M95_FTPFileSize>:

uint32_t M95_FTPFileSize(uint8_t* fileName){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b09e      	sub	sp, #120	; 0x78
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

	char buffer[100] = {0};
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2264      	movs	r2, #100	; 0x64
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 fb4d 	bl	8003690 <memset>
	uint32_t timeout = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t size = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	677b      	str	r3, [r7, #116]	; 0x74

	timeout = HAL_GetTick();
 8000ffe:	f000 feed 	bl	8001ddc <HAL_GetTick>
 8001002:	6738      	str	r0, [r7, #112]	; 0x70

	sprintf(buffer, "AT+QFTPSIZE=\"%s\"\r",fileName);
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	491f      	ldr	r1, [pc, #124]	; (8001088 <M95_FTPFileSize+0xa8>)
 800100c:	4618      	mov	r0, r3
 800100e:	f002 fbc3 	bl	8003798 <siprintf>
	if(M95_SendATCommand(buffer, 20000)== Module_Idle){
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	f644 6120 	movw	r1, #20000	; 0x4e20
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f8f8 	bl	8001210 <M95_SendATCommand>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d12a      	bne.n	800107c <M95_FTPFileSize+0x9c>
		/* wait server response */
		while(HAL_GetTick() - timeout < 10000){
 8001026:	e020      	b.n	800106a <M95_FTPFileSize+0x8a>
			if(m95.AtCommand.status == Module_Idle){
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <M95_FTPFileSize+0xac>)
 800102a:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800102e:	3308      	adds	r3, #8
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d119      	bne.n	800106a <M95_FTPFileSize+0x8a>
				if(strstr(m95.UsartRxBuffer[m95.RxBufferQueue-1], "+QFTPSIZE:")){
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <M95_FTPFileSize+0xac>)
 8001038:	79db      	ldrb	r3, [r3, #7]
 800103a:	3b01      	subs	r3, #1
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	3308      	adds	r3, #8
 8001040:	4a12      	ldr	r2, [pc, #72]	; (800108c <M95_FTPFileSize+0xac>)
 8001042:	4413      	add	r3, r2
 8001044:	4912      	ldr	r1, [pc, #72]	; (8001090 <M95_FTPFileSize+0xb0>)
 8001046:	4618      	mov	r0, r3
 8001048:	f002 fbdb 	bl	8003802 <strstr>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00b      	beq.n	800106a <M95_FTPFileSize+0x8a>
					size = StrToInt(m95.UsartRxBuffer[m95.RxBufferQueue-1]);
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <M95_FTPFileSize+0xac>)
 8001054:	79db      	ldrb	r3, [r3, #7]
 8001056:	3b01      	subs	r3, #1
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	3308      	adds	r3, #8
 800105c:	4a0b      	ldr	r2, [pc, #44]	; (800108c <M95_FTPFileSize+0xac>)
 800105e:	4413      	add	r3, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fef6 	bl	8000e52 <StrToInt>
 8001066:	6778      	str	r0, [r7, #116]	; 0x74
					break;
 8001068:	e008      	b.n	800107c <M95_FTPFileSize+0x9c>
		while(HAL_GetTick() - timeout < 10000){
 800106a:	f000 feb7 	bl	8001ddc <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	f242 720f 	movw	r2, #9999	; 0x270f
 8001078:	4293      	cmp	r3, r2
 800107a:	d9d5      	bls.n	8001028 <M95_FTPFileSize+0x48>
				}
			}
		}
	}
	return size;
 800107c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 800107e:	4618      	mov	r0, r3
 8001080:	3778      	adds	r7, #120	; 0x78
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	08004c9c 	.word	0x08004c9c
 800108c:	200002c4 	.word	0x200002c4
 8001090:	08004cb0 	.word	0x08004cb0

08001094 <M95_FTPGetFile>:

bool M95_FTPGetFile(uint8_t* fileName){
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	; 0x38
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	bool status = false;
 800109c:	2300      	movs	r3, #0
 800109e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t timeout = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	633b      	str	r3, [r7, #48]	; 0x30

	timeout = HAL_GetTick();
 80010a6:	f000 fe99 	bl	8001ddc <HAL_GetTick>
 80010aa:	6338      	str	r0, [r7, #48]	; 0x30

	char buffer[40] = {0};
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	2228      	movs	r2, #40	; 0x28
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f002 faeb 	bl	8003690 <memset>
	sprintf(buffer, "AT+QFTPGET=\"%s\"\r",fileName);
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	4914      	ldr	r1, [pc, #80]	; (8001114 <M95_FTPGetFile+0x80>)
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 fb68 	bl	8003798 <siprintf>
	if(M95_SendATCommand(buffer, 20000)== Module_Idle){
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	f644 6120 	movw	r1, #20000	; 0x4e20
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f89d 	bl	8001210 <M95_SendATCommand>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d112      	bne.n	8001102 <M95_FTPGetFile+0x6e>

		/* wait server response */
		while(HAL_GetTick() - timeout < 30000){
 80010dc:	e006      	b.n	80010ec <M95_FTPGetFile+0x58>
			if (m95.FTP.DataMode==true)break;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <M95_FTPGetFile+0x84>)
 80010e0:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80010e4:	3310      	adds	r3, #16
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d109      	bne.n	8001100 <M95_FTPGetFile+0x6c>
		while(HAL_GetTick() - timeout < 30000){
 80010ec:	f000 fe76 	bl	8001ddc <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	f247 522f 	movw	r2, #29999	; 0x752f
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d9ef      	bls.n	80010de <M95_FTPGetFile+0x4a>
 80010fe:	e000      	b.n	8001102 <M95_FTPGetFile+0x6e>
			if (m95.FTP.DataMode==true)break;
 8001100:	bf00      	nop
		}


	}
	return m95.FTP.DataMode;
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <M95_FTPGetFile+0x84>)
 8001104:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001108:	3310      	adds	r3, #16
 800110a:	781b      	ldrb	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3738      	adds	r7, #56	; 0x38
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	08004cbc 	.word	0x08004cbc
 8001118:	200002c4 	.word	0x200002c4

0800111c <M95_SMSSend>:


bool M95_SMSSend(uint8_t* phone, uint8_t* message){
 800111c:	b580      	push	{r7, lr}
 800111e:	b08e      	sub	sp, #56	; 0x38
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
	bool status = false;
 8001126:	2300      	movs	r3, #0
 8001128:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	char buffer[40] = {0};
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2228      	movs	r2, #40	; 0x28
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f002 faab 	bl	8003690 <memset>
	sprintf(buffer, "AT+CMGS=\"%s\"\r",phone);
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	490f      	ldr	r1, [pc, #60]	; (8001180 <M95_SMSSend+0x64>)
 8001142:	4618      	mov	r0, r3
 8001144:	f002 fb28 	bl	8003798 <siprintf>
	if(M95_SendATCommand(buffer, 2000)== Module_Idle){
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f85d 	bl	8001210 <M95_SendATCommand>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10a      	bne.n	8001172 <M95_SMSSend+0x56>
		if(M95_SendATCommand(message, 5000)== Module_Idle){
 800115c:	f241 3188 	movw	r1, #5000	; 0x1388
 8001160:	6838      	ldr	r0, [r7, #0]
 8001162:	f000 f855 	bl	8001210 <M95_SendATCommand>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <M95_SMSSend+0x56>
			status = true;
 800116c:	2301      	movs	r3, #1
 800116e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
	}
	return status;
 8001172:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001176:	4618      	mov	r0, r3
 8001178:	3738      	adds	r7, #56	; 0x38
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	08004cd0 	.word	0x08004cd0

08001184 <M95_Init>:

bool M95_Init(void) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0

	uint32_t timeout = HAL_GetTick();
 800118a:	f000 fe27 	bl	8001ddc <HAL_GetTick>
 800118e:	6078      	str	r0, [r7, #4]

	m95.FTP.DataMode=false;
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <M95_Init+0x84>)
 8001192:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001196:	3310      	adds	r3, #16
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
	m95.AtCommand.status = Module_Idle;
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <M95_Init+0x84>)
 800119e:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80011a2:	3308      	adds	r3, #8
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]

	HAL_Delay(750);
 80011a8:	f240 20ee 	movw	r0, #750	; 0x2ee
 80011ac:	f000 fe20 	bl	8001df0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2108      	movs	r1, #8
 80011b4:	4815      	ldr	r0, [pc, #84]	; (800120c <M95_Init+0x88>)
 80011b6:	f001 faf0 	bl	800279a <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80011ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011be:	f000 fe17 	bl	8001df0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	2108      	movs	r1, #8
 80011c6:	4811      	ldr	r0, [pc, #68]	; (800120c <M95_Init+0x88>)
 80011c8:	f001 fae7 	bl	800279a <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 80011cc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80011d0:	f000 fe0e 	bl	8001df0 <HAL_Delay>
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
	//HAL_Delay(10000);


	while (m95.ready == 0)
 80011d4:	e008      	b.n	80011e8 <M95_Init+0x64>
	{
		if (HAL_GetTick() - timeout > 20000){
 80011d6:	f000 fe01 	bl	8001ddc <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d807      	bhi.n	80011f8 <M95_Init+0x74>
	while (m95.ready == 0)
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <M95_Init+0x84>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	f083 0301 	eor.w	r3, r3, #1
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1ef      	bne.n	80011d6 <M95_Init+0x52>
 80011f6:	e000      	b.n	80011fa <M95_Init+0x76>

			break;
 80011f8:	bf00      	nop
		}

	}

	return m95.ready;
 80011fa:	4b03      	ldr	r3, [pc, #12]	; (8001208 <M95_Init+0x84>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
	//M95_SendATCommand("AT\r", 10000);

}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200002c4 	.word	0x200002c4
 800120c:	40010c00 	.word	0x40010c00

08001210 <M95_SendATCommand>:


uint8_t M95_SendATCommand(char *AtCommand, uint32_t maxWaiting_ms) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]

	uint32_t sendCommandTime;

	sendCommandTime = HAL_GetTick();
 800121a:	f000 fddf 	bl	8001ddc <HAL_GetTick>
 800121e:	60f8      	str	r0, [r7, #12]

	/* wait until end of URC message */
	while (1) {
		//if ((HAL_GetTick() - sendCommandTime) > maxWaiting_ms) return 0;
		if (m95.timeout > 250 && m95.AtCommand.status == Module_Idle)
 8001220:	4b2c      	ldr	r3, [pc, #176]	; (80012d4 <M95_SendATCommand+0xc4>)
 8001222:	889b      	ldrh	r3, [r3, #4]
 8001224:	2bfa      	cmp	r3, #250	; 0xfa
 8001226:	d9fb      	bls.n	8001220 <M95_SendATCommand+0x10>
 8001228:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <M95_SendATCommand+0xc4>)
 800122a:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800122e:	3308      	adds	r3, #8
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d000      	beq.n	8001238 <M95_SendATCommand+0x28>
 8001236:	e7f3      	b.n	8001220 <M95_SendATCommand+0x10>
			break;
 8001238:	bf00      	nop
	}
	//HAL_UART_Transmit(&huart2, (uint8_t*) "\0x13", 1, 0xFFFF);
//	for(int i = 0; i<4;i++){
		memset(m95.UsartRxBuffer, 0, sizeof(m95.UsartRxBuffer));
 800123a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800123e:	2100      	movs	r1, #0
 8001240:	4825      	ldr	r0, [pc, #148]	; (80012d8 <M95_SendATCommand+0xc8>)
 8001242:	f002 fa25 	bl	8003690 <memset>
//	}
	m95.RxBufferQueue = 0;
 8001246:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <M95_SendATCommand+0xc4>)
 8001248:	2200      	movs	r2, #0
 800124a:	71da      	strb	r2, [r3, #7]
	m95.AtCommand.status = Module_Busy;
 800124c:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <M95_SendATCommand+0xc4>)
 800124e:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8001252:	3308      	adds	r3, #8
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
	m95.UsartRxIndex = 0;
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <M95_SendATCommand+0xc4>)
 800125a:	2200      	movs	r2, #0
 800125c:	805a      	strh	r2, [r3, #2]
	m95.AtCommand.response = COMMAND_IDLE;
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <M95_SendATCommand+0xc4>)
 8001260:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8001264:	330a      	adds	r3, #10
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]

	//sendCommandTime = HAL_GetTick();
	printf("%s\n", AtCommand);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f002 fa8c 	bl	8003788 <puts>
	USART_Puts(UART5, AtCommand);
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	481a      	ldr	r0, [pc, #104]	; (80012dc <M95_SendATCommand+0xcc>)
 8001274:	f000 fd12 	bl	8001c9c <USART_Puts>
	//HAL_UART_Transmit(&huart2, (uint8_t*) AtCommand, strlen(AtCommand), 0xFFFF);
	if (AtCommand[0] != 'A')
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b41      	cmp	r3, #65	; 0x41
 800127e:	d018      	beq.n	80012b2 <M95_SendATCommand+0xa2>
		USART_Puts(UART5, "\x1A");
 8001280:	4917      	ldr	r1, [pc, #92]	; (80012e0 <M95_SendATCommand+0xd0>)
 8001282:	4816      	ldr	r0, [pc, #88]	; (80012dc <M95_SendATCommand+0xcc>)
 8001284:	f000 fd0a 	bl	8001c9c <USART_Puts>
	//HAL_UART_Transmit(&huart2, (uint8_t*) "\x1A", 1, 0xFFFF);
	//HAL_UART_Transmit(&huart2, (uint8_t*) "\0x11", 1, 0xFFFF);
	while (m95.AtCommand.status == Module_Busy) {
 8001288:	e013      	b.n	80012b2 <M95_SendATCommand+0xa2>

		if ((HAL_GetTick() - sendCommandTime) > maxWaiting_ms) {
 800128a:	f000 fda7 	bl	8001ddc <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d20b      	bcs.n	80012b2 <M95_SendATCommand+0xa2>
			printf("Modem Not Responding\r\n");
 800129a:	4812      	ldr	r0, [pc, #72]	; (80012e4 <M95_SendATCommand+0xd4>)
 800129c:	f002 fa74 	bl	8003788 <puts>
			m95.AtCommand.status = Module_Not_Responding;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <M95_SendATCommand+0xc4>)
 80012a2:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80012a6:	3308      	adds	r3, #8
 80012a8:	2202      	movs	r2, #2
 80012aa:	701a      	strb	r2, [r3, #0]
//			M95_SendATCommand(AtCommand, maxWaiting_ms);
			M95_Init();
 80012ac:	f7ff ff6a 	bl	8001184 <M95_Init>
			break;
 80012b0:	e006      	b.n	80012c0 <M95_SendATCommand+0xb0>
	while (m95.AtCommand.status == Module_Busy) {
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <M95_SendATCommand+0xc4>)
 80012b4:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80012b8:	3308      	adds	r3, #8
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d0e4      	beq.n	800128a <M95_SendATCommand+0x7a>
		}
	}
	return m95.AtCommand.status;
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <M95_SendATCommand+0xc4>)
 80012c2:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80012c6:	3308      	adds	r3, #8
 80012c8:	781b      	ldrb	r3, [r3, #0]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200002c4 	.word	0x200002c4
 80012d8:	200002cc 	.word	0x200002cc
 80012dc:	40005000 	.word	0x40005000
 80012e0:	08004ce0 	.word	0x08004ce0
 80012e4:	08004ce4 	.word	0x08004ce4

080012e8 <M95_RxCallBack>:


void M95_RxCallBack(void) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
	static uint8_t parseResponse = 0;
	uint8_t rxTemp;
	static uint8_t rxTemp2;


	m95.timeout = 0;
 80012ee:	4baf      	ldr	r3, [pc, #700]	; (80015ac <M95_RxCallBack+0x2c4>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	809a      	strh	r2, [r3, #4]
	rxTemp = LL_USART_ReceiveData8(UART5);
 80012f4:	48ae      	ldr	r0, [pc, #696]	; (80015b0 <M95_RxCallBack+0x2c8>)
 80012f6:	f7ff fd92 	bl	8000e1e <LL_USART_ReceiveData8>
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]

	if(m95.FTP.DataMode){
 80012fe:	4bab      	ldr	r3, [pc, #684]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001300:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001304:	3310      	adds	r3, #16
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d061      	beq.n	80013d0 <M95_RxCallBack+0xe8>
		m95.AtCommand.status = Module_Busy;
 800130c:	4ba7      	ldr	r3, [pc, #668]	; (80015ac <M95_RxCallBack+0x2c4>)
 800130e:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8001312:	3308      	adds	r3, #8
 8001314:	2201      	movs	r2, #1
 8001316:	701a      	strb	r2, [r3, #0]
		m95.FTP.FtpPacket[m95.FTP.DataIndex++] = rxTemp;
 8001318:	4ba4      	ldr	r3, [pc, #656]	; (80015ac <M95_RxCallBack+0x2c4>)
 800131a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800131e:	3312      	adds	r3, #18
 8001320:	881a      	ldrh	r2, [r3, #0]
 8001322:	1c53      	adds	r3, r2, #1
 8001324:	b299      	uxth	r1, r3
 8001326:	4ba1      	ldr	r3, [pc, #644]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001328:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800132c:	3312      	adds	r3, #18
 800132e:	8019      	strh	r1, [r3, #0]
 8001330:	4b9e      	ldr	r3, [pc, #632]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001332:	4413      	add	r3, r2
 8001334:	79fa      	ldrb	r2, [r7, #7]
 8001336:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
		if(m95.FTP.PacketIndex<m95.FTP.TotalPacket){
 800133a:	4b9c      	ldr	r3, [pc, #624]	; (80015ac <M95_RxCallBack+0x2c4>)
 800133c:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001340:	3308      	adds	r3, #8
 8001342:	781a      	ldrb	r2, [r3, #0]
 8001344:	4b99      	ldr	r3, [pc, #612]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001346:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800134a:	3314      	adds	r3, #20
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d21b      	bcs.n	800138a <M95_RxCallBack+0xa2>
			if(m95.FTP.DataIndex == 4096){
 8001352:	4b96      	ldr	r3, [pc, #600]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001354:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001358:	3312      	adds	r3, #18
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001360:	f040 811f 	bne.w	80015a2 <M95_RxCallBack+0x2ba>
				m95.FTP.DataMode = false;
 8001364:	4b91      	ldr	r3, [pc, #580]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001366:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800136a:	3310      	adds	r3, #16
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
				m95.FTP.PacketReady = 1;
 8001370:	4b8e      	ldr	r3, [pc, #568]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001372:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001376:	3309      	adds	r3, #9
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
				m95.FTP.DataIndex = 0;
 800137c:	4b8b      	ldr	r3, [pc, #556]	; (80015ac <M95_RxCallBack+0x2c4>)
 800137e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001382:	3312      	adds	r3, #18
 8001384:	2200      	movs	r2, #0
 8001386:	801a      	strh	r2, [r3, #0]


	}


}
 8001388:	e10b      	b.n	80015a2 <M95_RxCallBack+0x2ba>
			if(m95.FTP.DataIndex == m95.FTP.FileSize%4096){
 800138a:	4b88      	ldr	r3, [pc, #544]	; (80015ac <M95_RxCallBack+0x2c4>)
 800138c:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001390:	3312      	adds	r3, #18
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b85      	ldr	r3, [pc, #532]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001398:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800139c:	330c      	adds	r3, #12
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a4:	429a      	cmp	r2, r3
 80013a6:	f040 80fc 	bne.w	80015a2 <M95_RxCallBack+0x2ba>
				m95.FTP.DataMode = false;
 80013aa:	4b80      	ldr	r3, [pc, #512]	; (80015ac <M95_RxCallBack+0x2c4>)
 80013ac:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80013b0:	3310      	adds	r3, #16
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
				m95.FTP.PacketReady = 1;
 80013b6:	4b7d      	ldr	r3, [pc, #500]	; (80015ac <M95_RxCallBack+0x2c4>)
 80013b8:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80013bc:	3309      	adds	r3, #9
 80013be:	2201      	movs	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]
				m95.FTP.DataIndex = 0;
 80013c2:	4b7a      	ldr	r3, [pc, #488]	; (80015ac <M95_RxCallBack+0x2c4>)
 80013c4:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80013c8:	3312      	adds	r3, #18
 80013ca:	2200      	movs	r2, #0
 80013cc:	801a      	strh	r2, [r3, #0]
}
 80013ce:	e0e8      	b.n	80015a2 <M95_RxCallBack+0x2ba>
		if(parseResponse){
 80013d0:	4b78      	ldr	r3, [pc, #480]	; (80015b4 <M95_RxCallBack+0x2cc>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80a4 	beq.w	8001522 <M95_RxCallBack+0x23a>
			if(rxTemp == '\n'){
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	2b0a      	cmp	r3, #10
 80013de:	f040 8088 	bne.w	80014f2 <M95_RxCallBack+0x20a>
				if(m95.ready){
 80013e2:	4b72      	ldr	r3, [pc, #456]	; (80015ac <M95_RxCallBack+0x2c4>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d063      	beq.n	80014b2 <M95_RxCallBack+0x1ca>
					if(strcmp(m95.UsartRxBuffer[m95.RxBufferQueue], "OK")==0){
 80013ea:	4b70      	ldr	r3, [pc, #448]	; (80015ac <M95_RxCallBack+0x2c4>)
 80013ec:	79db      	ldrb	r3, [r3, #7]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	3308      	adds	r3, #8
 80013f2:	4a6e      	ldr	r2, [pc, #440]	; (80015ac <M95_RxCallBack+0x2c4>)
 80013f4:	4413      	add	r3, r2
 80013f6:	4970      	ldr	r1, [pc, #448]	; (80015b8 <M95_RxCallBack+0x2d0>)
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7fe ff13 	bl	8000224 <strcmp>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d106      	bne.n	8001412 <M95_RxCallBack+0x12a>
						m95.AtCommand.response = COMMAND_OK;
 8001404:	4b69      	ldr	r3, [pc, #420]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001406:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800140a:	330a      	adds	r3, #10
 800140c:	2201      	movs	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	e05f      	b.n	80014d2 <M95_RxCallBack+0x1ea>
					else if (strchr(m95.UsartRxBuffer[m95.RxBufferQueue], '.') != NULL){
 8001412:	4b66      	ldr	r3, [pc, #408]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001414:	79db      	ldrb	r3, [r3, #7]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	3308      	adds	r3, #8
 800141a:	4a64      	ldr	r2, [pc, #400]	; (80015ac <M95_RxCallBack+0x2c4>)
 800141c:	4413      	add	r3, r2
 800141e:	212e      	movs	r1, #46	; 0x2e
 8001420:	4618      	mov	r0, r3
 8001422:	f002 f9d9 	bl	80037d8 <strchr>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d006      	beq.n	800143a <M95_RxCallBack+0x152>
						m95.AtCommand.response = COMMAND_OK;
 800142c:	4b5f      	ldr	r3, [pc, #380]	; (80015ac <M95_RxCallBack+0x2c4>)
 800142e:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8001432:	330a      	adds	r3, #10
 8001434:	2201      	movs	r2, #1
 8001436:	701a      	strb	r2, [r3, #0]
 8001438:	e04b      	b.n	80014d2 <M95_RxCallBack+0x1ea>
					else if(strstr(m95.UsartRxBuffer[m95.RxBufferQueue], "ERROR")!=NULL){
 800143a:	4b5c      	ldr	r3, [pc, #368]	; (80015ac <M95_RxCallBack+0x2c4>)
 800143c:	79db      	ldrb	r3, [r3, #7]
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	3308      	adds	r3, #8
 8001442:	4a5a      	ldr	r2, [pc, #360]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001444:	4413      	add	r3, r2
 8001446:	495d      	ldr	r1, [pc, #372]	; (80015bc <M95_RxCallBack+0x2d4>)
 8001448:	4618      	mov	r0, r3
 800144a:	f002 f9da 	bl	8003802 <strstr>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d006      	beq.n	8001462 <M95_RxCallBack+0x17a>
						m95.AtCommand.response = COMMAND_ERROR;
 8001454:	4b55      	ldr	r3, [pc, #340]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001456:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800145a:	330a      	adds	r3, #10
 800145c:	2203      	movs	r2, #3
 800145e:	701a      	strb	r2, [r3, #0]
 8001460:	e037      	b.n	80014d2 <M95_RxCallBack+0x1ea>
					else if(strstr(m95.UsartRxBuffer[m95.RxBufferQueue], "+CGREG: 1")!=NULL){
 8001462:	4b52      	ldr	r3, [pc, #328]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001464:	79db      	ldrb	r3, [r3, #7]
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	3308      	adds	r3, #8
 800146a:	4a50      	ldr	r2, [pc, #320]	; (80015ac <M95_RxCallBack+0x2c4>)
 800146c:	4413      	add	r3, r2
 800146e:	4954      	ldr	r1, [pc, #336]	; (80015c0 <M95_RxCallBack+0x2d8>)
 8001470:	4618      	mov	r0, r3
 8001472:	f002 f9c6 	bl	8003802 <strstr>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d006      	beq.n	800148a <M95_RxCallBack+0x1a2>
						m95.GPRSSignal = 1;
 800147c:	4b4b      	ldr	r3, [pc, #300]	; (80015ac <M95_RxCallBack+0x2c4>)
 800147e:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8001482:	330e      	adds	r3, #14
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
 8001488:	e023      	b.n	80014d2 <M95_RxCallBack+0x1ea>
					else if(strstr(m95.UsartRxBuffer[m95.RxBufferQueue], "CONNECT") !=NULL){
 800148a:	4b48      	ldr	r3, [pc, #288]	; (80015ac <M95_RxCallBack+0x2c4>)
 800148c:	79db      	ldrb	r3, [r3, #7]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	3308      	adds	r3, #8
 8001492:	4a46      	ldr	r2, [pc, #280]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001494:	4413      	add	r3, r2
 8001496:	494b      	ldr	r1, [pc, #300]	; (80015c4 <M95_RxCallBack+0x2dc>)
 8001498:	4618      	mov	r0, r3
 800149a:	f002 f9b2 	bl	8003802 <strstr>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d016      	beq.n	80014d2 <M95_RxCallBack+0x1ea>
						m95.FTP.DataMode = true;
 80014a4:	4b41      	ldr	r3, [pc, #260]	; (80015ac <M95_RxCallBack+0x2c4>)
 80014a6:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80014aa:	3310      	adds	r3, #16
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
 80014b0:	e00f      	b.n	80014d2 <M95_RxCallBack+0x1ea>
					if(strstr(m95.UsartRxBuffer[m95.RxBufferQueue], "RDY")!=NULL){
 80014b2:	4b3e      	ldr	r3, [pc, #248]	; (80015ac <M95_RxCallBack+0x2c4>)
 80014b4:	79db      	ldrb	r3, [r3, #7]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	3308      	adds	r3, #8
 80014ba:	4a3c      	ldr	r2, [pc, #240]	; (80015ac <M95_RxCallBack+0x2c4>)
 80014bc:	4413      	add	r3, r2
 80014be:	4942      	ldr	r1, [pc, #264]	; (80015c8 <M95_RxCallBack+0x2e0>)
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 f99e 	bl	8003802 <strstr>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <M95_RxCallBack+0x1ea>
						m95.ready = 1;
 80014cc:	4b37      	ldr	r3, [pc, #220]	; (80015ac <M95_RxCallBack+0x2c4>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
				m95.AtCommand.status = Module_Idle;
 80014d2:	4b36      	ldr	r3, [pc, #216]	; (80015ac <M95_RxCallBack+0x2c4>)
 80014d4:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80014d8:	3308      	adds	r3, #8
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
				parseResponse = 0;
 80014de:	4b35      	ldr	r3, [pc, #212]	; (80015b4 <M95_RxCallBack+0x2cc>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
				m95.RxBufferQueue++;
 80014e4:	4b31      	ldr	r3, [pc, #196]	; (80015ac <M95_RxCallBack+0x2c4>)
 80014e6:	79db      	ldrb	r3, [r3, #7]
 80014e8:	3301      	adds	r3, #1
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	4b2f      	ldr	r3, [pc, #188]	; (80015ac <M95_RxCallBack+0x2c4>)
 80014ee:	71da      	strb	r2, [r3, #7]
 80014f0:	e04c      	b.n	800158c <M95_RxCallBack+0x2a4>
				m95.AtCommand.status = Module_Busy;
 80014f2:	4b2e      	ldr	r3, [pc, #184]	; (80015ac <M95_RxCallBack+0x2c4>)
 80014f4:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80014f8:	3308      	adds	r3, #8
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
				m95.UsartRxBuffer[m95.RxBufferQueue][m95.UsartRxIndex++]=rxTemp;
 80014fe:	4b2b      	ldr	r3, [pc, #172]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001500:	79db      	ldrb	r3, [r3, #7]
 8001502:	4618      	mov	r0, r3
 8001504:	4b29      	ldr	r3, [pc, #164]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001506:	885b      	ldrh	r3, [r3, #2]
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	b291      	uxth	r1, r2
 800150c:	4a27      	ldr	r2, [pc, #156]	; (80015ac <M95_RxCallBack+0x2c4>)
 800150e:	8051      	strh	r1, [r2, #2]
 8001510:	4619      	mov	r1, r3
 8001512:	4a26      	ldr	r2, [pc, #152]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001514:	0203      	lsls	r3, r0, #8
 8001516:	4413      	add	r3, r2
 8001518:	440b      	add	r3, r1
 800151a:	3308      	adds	r3, #8
 800151c:	79fa      	ldrb	r2, [r7, #7]
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	e034      	b.n	800158c <M95_RxCallBack+0x2a4>
			if(rxTemp2 == '\n' && rxTemp != '\r' ){
 8001522:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <M95_RxCallBack+0x2e4>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b0a      	cmp	r3, #10
 8001528:	d130      	bne.n	800158c <M95_RxCallBack+0x2a4>
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	2b0d      	cmp	r3, #13
 800152e:	d02d      	beq.n	800158c <M95_RxCallBack+0x2a4>
				if(rxTemp=='>'){
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	2b3e      	cmp	r3, #62	; 0x3e
 8001534:	d10c      	bne.n	8001550 <M95_RxCallBack+0x268>
					m95.AtCommand.response = COMMAND_OK;
 8001536:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001538:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800153c:	330a      	adds	r3, #10
 800153e:	2201      	movs	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]
					m95.AtCommand.status = Module_Idle;
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001544:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8001548:	3308      	adds	r3, #8
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
 800154e:	e01d      	b.n	800158c <M95_RxCallBack+0x2a4>
					if(m95.RxBufferQueue>3)m95.RxBufferQueue=0;
 8001550:	4b16      	ldr	r3, [pc, #88]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001552:	79db      	ldrb	r3, [r3, #7]
 8001554:	2b03      	cmp	r3, #3
 8001556:	d902      	bls.n	800155e <M95_RxCallBack+0x276>
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <M95_RxCallBack+0x2c4>)
 800155a:	2200      	movs	r2, #0
 800155c:	71da      	strb	r2, [r3, #7]
					parseResponse = 1;
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <M95_RxCallBack+0x2cc>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
					m95.UsartRxIndex = 0;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001566:	2200      	movs	r2, #0
 8001568:	805a      	strh	r2, [r3, #2]
					m95.UsartRxBuffer[m95.RxBufferQueue][m95.UsartRxIndex++]=rxTemp;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <M95_RxCallBack+0x2c4>)
 800156c:	79db      	ldrb	r3, [r3, #7]
 800156e:	4618      	mov	r0, r3
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001572:	885b      	ldrh	r3, [r3, #2]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	b291      	uxth	r1, r2
 8001578:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <M95_RxCallBack+0x2c4>)
 800157a:	8051      	strh	r1, [r2, #2]
 800157c:	4619      	mov	r1, r3
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <M95_RxCallBack+0x2c4>)
 8001580:	0203      	lsls	r3, r0, #8
 8001582:	4413      	add	r3, r2
 8001584:	440b      	add	r3, r1
 8001586:	3308      	adds	r3, #8
 8001588:	79fa      	ldrb	r2, [r7, #7]
 800158a:	701a      	strb	r2, [r3, #0]
		rxTemp2 = rxTemp;
 800158c:	4a0f      	ldr	r2, [pc, #60]	; (80015cc <M95_RxCallBack+0x2e4>)
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	7013      	strb	r3, [r2, #0]
			LL_USART_ClearFlag_TC(USART1);
 8001592:	480f      	ldr	r0, [pc, #60]	; (80015d0 <M95_RxCallBack+0x2e8>)
 8001594:	f7ff fc36 	bl	8000e04 <LL_USART_ClearFlag_TC>
			LL_USART_TransmitData8(USART1,rxTemp);
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	4619      	mov	r1, r3
 800159c:	480c      	ldr	r0, [pc, #48]	; (80015d0 <M95_RxCallBack+0x2e8>)
 800159e:	f7ff fc4a 	bl	8000e36 <LL_USART_TransmitData8>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200002c4 	.word	0x200002c4
 80015b0:	40005000 	.word	0x40005000
 80015b4:	200002a1 	.word	0x200002a1
 80015b8:	08004cfc 	.word	0x08004cfc
 80015bc:	08004d00 	.word	0x08004d00
 80015c0:	08004d08 	.word	0x08004d08
 80015c4:	08004d14 	.word	0x08004d14
 80015c8:	08004d1c 	.word	0x08004d1c
 80015cc:	200002a2 	.word	0x200002a2
 80015d0:	40013800 	.word	0x40013800

080015d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_MspInit+0x5c>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	4a14      	ldr	r2, [pc, #80]	; (8001630 <HAL_MspInit+0x5c>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6193      	str	r3, [r2, #24]
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_MspInit+0x5c>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_MspInit+0x5c>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <HAL_MspInit+0x5c>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fc:	61d3      	str	r3, [r2, #28]
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_MspInit+0x5c>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_MspInit+0x60>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	4a04      	ldr	r2, [pc, #16]	; (8001634 <HAL_MspInit+0x60>)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	40021000 	.word	0x40021000
 8001634:	40010000 	.word	0x40010000

08001638 <LL_USART_IsActiveFlag_RXNE>:
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0320 	and.w	r3, r3, #32
 8001648:	2b20      	cmp	r3, #32
 800164a:	bf0c      	ite	eq
 800164c:	2301      	moveq	r3, #1
 800164e:	2300      	movne	r3, #0
 8001650:	b2db      	uxtb	r3, r3
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <NMI_Handler+0x4>

08001662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <HardFault_Handler+0x4>

08001668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <MemManage_Handler+0x4>

0800166e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <BusFault_Handler+0x4>

08001674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <UsageFault_Handler+0x4>

0800167a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr

08001692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
	...

080016a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a4:	f000 fb88 	bl	8001db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */


  m95.timeout++;
 80016a8:	4b1c      	ldr	r3, [pc, #112]	; (800171c <SysTick_Handler+0x7c>)
 80016aa:	889b      	ldrh	r3, [r3, #4]
 80016ac:	3301      	adds	r3, #1
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <SysTick_Handler+0x7c>)
 80016b2:	809a      	strh	r2, [r3, #4]

  if(updateMode){
 80016b4:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <SysTick_Handler+0x80>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00f      	beq.n	80016dc <SysTick_Handler+0x3c>
	  if(blinkTime2++>1000){
 80016bc:	4b19      	ldr	r3, [pc, #100]	; (8001724 <SysTick_Handler+0x84>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	b291      	uxth	r1, r2
 80016c4:	4a17      	ldr	r2, [pc, #92]	; (8001724 <SysTick_Handler+0x84>)
 80016c6:	8011      	strh	r1, [r2, #0]
 80016c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016cc:	d906      	bls.n	80016dc <SysTick_Handler+0x3c>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80016ce:	2120      	movs	r1, #32
 80016d0:	4815      	ldr	r0, [pc, #84]	; (8001728 <SysTick_Handler+0x88>)
 80016d2:	f001 f87a 	bl	80027ca <HAL_GPIO_TogglePin>
		  blinkTime2 = 0;
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <SysTick_Handler+0x84>)
 80016d8:	2200      	movs	r2, #0
 80016da:	801a      	strh	r2, [r3, #0]
	  }
  }

  if(m95.FTP.DataMode){
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <SysTick_Handler+0x7c>)
 80016de:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80016e2:	3310      	adds	r3, #16
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d010      	beq.n	800170c <SysTick_Handler+0x6c>
	  if(blinkTime++>50){
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <SysTick_Handler+0x8c>)
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	b291      	uxth	r1, r2
 80016f2:	4a0e      	ldr	r2, [pc, #56]	; (800172c <SysTick_Handler+0x8c>)
 80016f4:	8011      	strh	r1, [r2, #0]
 80016f6:	2b32      	cmp	r3, #50	; 0x32
 80016f8:	d90e      	bls.n	8001718 <SysTick_Handler+0x78>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80016fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016fe:	480c      	ldr	r0, [pc, #48]	; (8001730 <SysTick_Handler+0x90>)
 8001700:	f001 f863 	bl	80027ca <HAL_GPIO_TogglePin>
		  blinkTime = 0;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <SysTick_Handler+0x8c>)
 8001706:	2200      	movs	r2, #0
 8001708:	801a      	strh	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
  }


  /* USER CODE END SysTick_IRQn 1 */
}
 800170a:	e005      	b.n	8001718 <SysTick_Handler+0x78>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800170c:	2201      	movs	r2, #1
 800170e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001712:	4807      	ldr	r0, [pc, #28]	; (8001730 <SysTick_Handler+0x90>)
 8001714:	f001 f841 	bl	800279a <HAL_GPIO_WritePin>
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200002c4 	.word	0x200002c4
 8001720:	200002a0 	.word	0x200002a0
 8001724:	2000170c 	.word	0x2000170c
 8001728:	40010c00 	.word	0x40010c00
 800172c:	2000170e 	.word	0x2000170e
 8001730:	40011000 	.word	0x40011000

08001734 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint8_t temp = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	71fb      	strb	r3, [r7, #7]
//	{
//		temp = LL_USART_ReceiveData8(USART1);
//		LL_USART_TransmitData8(UART5, temp);
//	}
  /* USER CODE END USART1_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */
	if(LL_USART_IsActiveFlag_RXNE(UART5))
 800174c:	4804      	ldr	r0, [pc, #16]	; (8001760 <UART5_IRQHandler+0x18>)
 800174e:	f7ff ff73 	bl	8001638 <LL_USART_IsActiveFlag_RXNE>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <UART5_IRQHandler+0x14>
	{


		M95_RxCallBack();
 8001758:	f7ff fdc6 	bl	80012e8 <M95_RxCallBack>
	}
  /* USER CODE END UART5_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40005000 	.word	0x40005000

08001764 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	e00a      	b.n	800178c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001776:	f3af 8000 	nop.w
 800177a:	4601      	mov	r1, r0
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	60ba      	str	r2, [r7, #8]
 8001782:	b2ca      	uxtb	r2, r1
 8001784:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	429a      	cmp	r2, r3
 8001792:	dbf0      	blt.n	8001776 <_read+0x12>
	}

return len;
 8001794:	687b      	ldr	r3, [r7, #4]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	e009      	b.n	80017c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	60ba      	str	r2, [r7, #8]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fa53 	bl	8001c64 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	dbf1      	blt.n	80017b0 <_write+0x12>
	}
	return len;
 80017cc:	687b      	ldr	r3, [r7, #4]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_close>:

int _close(int file)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
	return -1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017fc:	605a      	str	r2, [r3, #4]
	return 0;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr

0800180a <_isatty>:

int _isatty(int file)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
	return 1;
 8001812:	2301      	movs	r3, #1
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800181e:	b480      	push	{r7}
 8001820:	b085      	sub	sp, #20
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
	return 0;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
	...

08001838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001840:	4a14      	ldr	r2, [pc, #80]	; (8001894 <_sbrk+0x5c>)
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <_sbrk+0x60>)
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <_sbrk+0x64>)
 8001856:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <_sbrk+0x68>)
 8001858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	429a      	cmp	r2, r3
 8001866:	d207      	bcs.n	8001878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001868:	f001 fee8 	bl	800363c <__errno>
 800186c:	4602      	mov	r2, r0
 800186e:	230c      	movs	r3, #12
 8001870:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	e009      	b.n	800188c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	4a05      	ldr	r2, [pc, #20]	; (800189c <_sbrk+0x64>)
 8001888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20010000 	.word	0x20010000
 8001898:	00000400 	.word	0x00000400
 800189c:	200002a4 	.word	0x200002a4
 80018a0:	20001740 	.word	0x20001740

080018a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	db0b      	blt.n	80018f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	4906      	ldr	r1, [pc, #24]	; (8001900 <__NVIC_EnableIRQ+0x34>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2001      	movs	r0, #1
 80018ee:	fa00 f202 	lsl.w	r2, r0, r2
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100

08001904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	2b00      	cmp	r3, #0
 8001916:	db0a      	blt.n	800192e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	490c      	ldr	r1, [pc, #48]	; (8001950 <__NVIC_SetPriority+0x4c>)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	440b      	add	r3, r1
 8001928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800192c:	e00a      	b.n	8001944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4908      	ldr	r1, [pc, #32]	; (8001954 <__NVIC_SetPriority+0x50>)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	3b04      	subs	r3, #4
 800193c:	0112      	lsls	r2, r2, #4
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	440b      	add	r3, r1
 8001942:	761a      	strb	r2, [r3, #24]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000e100 	.word	0xe000e100
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f1c3 0307 	rsb	r3, r3, #7
 8001972:	2b04      	cmp	r3, #4
 8001974:	bf28      	it	cs
 8001976:	2304      	movcs	r3, #4
 8001978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3304      	adds	r3, #4
 800197e:	2b06      	cmp	r3, #6
 8001980:	d902      	bls.n	8001988 <NVIC_EncodePriority+0x30>
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3b03      	subs	r3, #3
 8001986:	e000      	b.n	800198a <NVIC_EncodePriority+0x32>
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	f04f 32ff 	mov.w	r2, #4294967295
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43da      	mvns	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	401a      	ands	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a0:	f04f 31ff 	mov.w	r1, #4294967295
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43d9      	mvns	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	4313      	orrs	r3, r2
         );
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3724      	adds	r7, #36	; 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <LL_USART_Enable>:
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	60da      	str	r2, [r3, #12]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <LL_USART_ConfigAsyncMode>:
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	615a      	str	r2, [r3, #20]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <LL_USART_IsActiveFlag_TC>:
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a14:	2b40      	cmp	r3, #64	; 0x40
 8001a16:	bf0c      	ite	eq
 8001a18:	2301      	moveq	r3, #1
 8001a1a:	2300      	movne	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <LL_USART_ClearFlag_TC>:
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a36:	601a      	str	r2, [r3, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr

08001a42 <LL_USART_TransmitData8>:
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001a4e:	78fa      	ldrb	r2, [r7, #3]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	605a      	str	r2, [r3, #4]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
	...

08001a60 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a6a:	69da      	ldr	r2, [r3, #28]
 8001a6c:	4907      	ldr	r1, [pc, #28]	; (8001a8c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a76:	69da      	ldr	r2, [r3, #28]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000

08001a90 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a9a:	699a      	ldr	r2, [r3, #24]
 8001a9c:	4907      	ldr	r1, [pc, #28]	; (8001abc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001aa6:	699a      	ldr	r2, [r3, #24]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000

08001ac0 <MX_UART5_Init>:

/* USER CODE END 0 */

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08c      	sub	sp, #48	; 0x30
 8001ac4:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]
 8001ad6:	615a      	str	r2, [r3, #20]
 8001ad8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ada:	463b      	mov	r3, r7
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8001ae8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001aec:	f7ff ffb8 	bl	8001a60 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8001af0:	2010      	movs	r0, #16
 8001af2:	f7ff ffcd 	bl	8001a90 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8001af6:	2020      	movs	r0, #32
 8001af8:	f7ff ffca 	bl	8001a90 <LL_APB2_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8001afc:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <MX_UART5_Init+0xc4>)
 8001afe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b00:	2309      	movs	r3, #9
 8001b02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001b04:	2303      	movs	r3, #3
 8001b06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	4619      	mov	r1, r3
 8001b10:	481d      	ldr	r0, [pc, #116]	; (8001b88 <MX_UART5_Init+0xc8>)
 8001b12:	f001 fb17 	bl	8003144 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001b16:	f240 4304 	movw	r3, #1028	; 0x404
 8001b1a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b20:	463b      	mov	r3, r7
 8001b22:	4619      	mov	r1, r3
 8001b24:	4819      	ldr	r0, [pc, #100]	; (8001b8c <MX_UART5_Init+0xcc>)
 8001b26:	f001 fb0d 	bl	8003144 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8001b2a:	f7ff fec1 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2200      	movs	r2, #0
 8001b32:	2101      	movs	r1, #1
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff0f 	bl	8001958 <NVIC_EncodePriority>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	2035      	movs	r0, #53	; 0x35
 8001b40:	f7ff fee0 	bl	8001904 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8001b44:	2035      	movs	r0, #53	; 0x35
 8001b46:	f7ff fec1 	bl	80018cc <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 9600;
 8001b4a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001b4e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001b5c:	230c      	movs	r3, #12
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_USART_Init(UART5, &USART_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4809      	ldr	r0, [pc, #36]	; (8001b90 <MX_UART5_Init+0xd0>)
 8001b6c:	f001 fcf0 	bl	8003550 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8001b70:	4807      	ldr	r0, [pc, #28]	; (8001b90 <MX_UART5_Init+0xd0>)
 8001b72:	f7ff ff32 	bl	80019da <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8001b76:	4806      	ldr	r0, [pc, #24]	; (8001b90 <MX_UART5_Init+0xd0>)
 8001b78:	f7ff ff20 	bl	80019bc <LL_USART_Enable>

}
 8001b7c:	bf00      	nop
 8001b7e:	3730      	adds	r7, #48	; 0x30
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	04100010 	.word	0x04100010
 8001b88:	40011000 	.word	0x40011000
 8001b8c:	40011400 	.word	0x40011400
 8001b90:	40005000 	.word	0x40005000

08001b94 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08c      	sub	sp, #48	; 0x30
 8001b98:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
 8001ba8:	611a      	str	r2, [r3, #16]
 8001baa:	615a      	str	r2, [r3, #20]
 8001bac:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bae:	463b      	mov	r3, r7
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001bbc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001bc0:	f7ff ff66 	bl	8001a90 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001bc4:	2004      	movs	r0, #4
 8001bc6:	f7ff ff63 	bl	8001a90 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001bca:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <MX_USART1_UART_Init+0xc0>)
 8001bcc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001bce:	2309      	movs	r3, #9
 8001bd0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	463b      	mov	r3, r7
 8001bdc:	4619      	mov	r1, r3
 8001bde:	481e      	ldr	r0, [pc, #120]	; (8001c58 <MX_USART1_UART_Init+0xc4>)
 8001be0:	f001 fab0 	bl	8003144 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <MX_USART1_UART_Init+0xc8>)
 8001be6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001be8:	2304      	movs	r3, #4
 8001bea:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bec:	463b      	mov	r3, r7
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4819      	ldr	r0, [pc, #100]	; (8001c58 <MX_USART1_UART_Init+0xc4>)
 8001bf2:	f001 faa7 	bl	8003144 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8001bf6:	f7ff fe5b 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2102      	movs	r1, #2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fea9 	bl	8001958 <NVIC_EncodePriority>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4619      	mov	r1, r3
 8001c0a:	2025      	movs	r0, #37	; 0x25
 8001c0c:	f7ff fe7a 	bl	8001904 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001c10:	2025      	movs	r0, #37	; 0x25
 8001c12:	f7ff fe5b 	bl	80018cc <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8001c16:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001c1a:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001c28:	230c      	movs	r3, #12
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4809      	ldr	r0, [pc, #36]	; (8001c60 <MX_USART1_UART_Init+0xcc>)
 8001c3c:	f001 fc88 	bl	8003550 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001c40:	4807      	ldr	r0, [pc, #28]	; (8001c60 <MX_USART1_UART_Init+0xcc>)
 8001c42:	f7ff feca 	bl	80019da <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001c46:	4806      	ldr	r0, [pc, #24]	; (8001c60 <MX_USART1_UART_Init+0xcc>)
 8001c48:	f7ff feb8 	bl	80019bc <LL_USART_Enable>

}
 8001c4c:	bf00      	nop
 8001c4e:	3730      	adds	r7, #48	; 0x30
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	04020002 	.word	0x04020002
 8001c58:	40010800 	.word	0x40010800
 8001c5c:	04040004 	.word	0x04040004
 8001c60:	40013800 	.word	0x40013800

08001c64 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	LL_USART_ClearFlag_TC(USART1);
 8001c6c:	480a      	ldr	r0, [pc, #40]	; (8001c98 <__io_putchar+0x34>)
 8001c6e:	f7ff fedb 	bl	8001a28 <LL_USART_ClearFlag_TC>
	LL_USART_TransmitData8 (USART1,ch);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	4619      	mov	r1, r3
 8001c78:	4807      	ldr	r0, [pc, #28]	; (8001c98 <__io_putchar+0x34>)
 8001c7a:	f7ff fee2 	bl	8001a42 <LL_USART_TransmitData8>
	while(0 == LL_USART_IsActiveFlag_TC(USART1)) {};
 8001c7e:	bf00      	nop
 8001c80:	4805      	ldr	r0, [pc, #20]	; (8001c98 <__io_putchar+0x34>)
 8001c82:	f7ff febf 	bl	8001a04 <LL_USART_IsActiveFlag_TC>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f9      	beq.n	8001c80 <__io_putchar+0x1c>
	return ch;
 8001c8c:	687b      	ldr	r3, [r7, #4]
//  /* Place your implementation of fputc here */
//  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  //HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1,0xFFFF);
//
//  return ch;
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40013800 	.word	0x40013800

08001c9c <USART_Puts>:


void USART_Puts(USART_TypeDef* USARTx, volatile char *txArray)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]

    while(*txArray)
 8001ca6:	e011      	b.n	8001ccc <USART_Puts+0x30>
    {
        while(!(USARTx ->SR & 0x0040)); // wait for the USART until its available again (TC bit)
 8001ca8:	bf00      	nop
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f9      	beq.n	8001caa <USART_Puts+0xe>
        LL_USART_TransmitData8(USARTx, *txArray); // send the data
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff febf 	bl	8001a42 <LL_USART_TransmitData8>
        *txArray++; // jump to next array member (next character)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	603a      	str	r2, [r7, #0]
 8001cca:	781b      	ldrb	r3, [r3, #0]
    while(*txArray)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1e8      	bne.n	8001ca8 <USART_Puts+0xc>
    }

}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ce0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001ce2:	e003      	b.n	8001cec <LoopCopyDataInit>

08001ce4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001ce6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001ce8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001cea:	3104      	adds	r1, #4

08001cec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001cec:	480a      	ldr	r0, [pc, #40]	; (8001d18 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001cf0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001cf2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001cf4:	d3f6      	bcc.n	8001ce4 <CopyDataInit>
  ldr r2, =_sbss
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001cf8:	e002      	b.n	8001d00 <LoopFillZerobss>

08001cfa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001cfc:	f842 3b04 	str.w	r3, [r2], #4

08001d00 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d00:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d04:	d3f9      	bcc.n	8001cfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d06:	f7ff fdcd 	bl	80018a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d0a:	f001 fc9d 	bl	8003648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d0e:	f7fe fbeb 	bl	80004e8 <main>
  bx lr
 8001d12:	4770      	bx	lr
  ldr r3, =_sidata
 8001d14:	08004ef8 	.word	0x08004ef8
  ldr r0, =_sdata
 8001d18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d1c:	20000280 	.word	0x20000280
  ldr r2, =_sbss
 8001d20:	20000280 	.word	0x20000280
  ldr r3, = _ebss
 8001d24:	2000173c 	.word	0x2000173c

08001d28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d28:	e7fe      	b.n	8001d28 <ADC1_2_IRQHandler>
	...

08001d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <HAL_Init+0x28>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <HAL_Init+0x28>)
 8001d36:	f043 0310 	orr.w	r3, r3, #16
 8001d3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	f000 f929 	bl	8001f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d42:	2000      	movs	r0, #0
 8001d44:	f000 f808 	bl	8001d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d48:	f7ff fc44 	bl	80015d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40022000 	.word	0x40022000

08001d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_InitTick+0x54>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_InitTick+0x58>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f933 	bl	8001fe2 <HAL_SYSTICK_Config>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00e      	b.n	8001da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b0f      	cmp	r3, #15
 8001d8a:	d80a      	bhi.n	8001da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f000 f909 	bl	8001faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d98:	4a06      	ldr	r2, [pc, #24]	; (8001db4 <HAL_InitTick+0x5c>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	200000a4 	.word	0x200000a4
 8001db0:	200000ac 	.word	0x200000ac
 8001db4:	200000a8 	.word	0x200000a8

08001db8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_IncTick+0x1c>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_IncTick+0x20>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a03      	ldr	r2, [pc, #12]	; (8001dd8 <HAL_IncTick+0x20>)
 8001dca:	6013      	str	r3, [r2, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	200000ac 	.word	0x200000ac
 8001dd8:	20001710 	.word	0x20001710

08001ddc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return uwTick;
 8001de0:	4b02      	ldr	r3, [pc, #8]	; (8001dec <HAL_GetTick+0x10>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	20001710 	.word	0x20001710

08001df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff fff0 	bl	8001ddc <HAL_GetTick>
 8001dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e08:	d005      	beq.n	8001e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_Delay+0x40>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e16:	bf00      	nop
 8001e18:	f7ff ffe0 	bl	8001ddc <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d8f7      	bhi.n	8001e18 <HAL_Delay+0x28>
  {
  }
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200000ac 	.word	0x200000ac

08001e34 <__NVIC_SetPriorityGrouping>:
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e50:	4013      	ands	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e66:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	60d3      	str	r3, [r2, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_GetPriorityGrouping>:
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <__NVIC_GetPriorityGrouping+0x18>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	f003 0307 	and.w	r3, r3, #7
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_SetPriority>:
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	db0a      	blt.n	8001ec2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	490c      	ldr	r1, [pc, #48]	; (8001ee4 <__NVIC_SetPriority+0x4c>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	0112      	lsls	r2, r2, #4
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	440b      	add	r3, r1
 8001ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ec0:	e00a      	b.n	8001ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4908      	ldr	r1, [pc, #32]	; (8001ee8 <__NVIC_SetPriority+0x50>)
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	3b04      	subs	r3, #4
 8001ed0:	0112      	lsls	r2, r2, #4
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	761a      	strb	r2, [r3, #24]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000e100 	.word	0xe000e100
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <NVIC_EncodePriority>:
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	; 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f1c3 0307 	rsb	r3, r3, #7
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	bf28      	it	cs
 8001f0a:	2304      	movcs	r3, #4
 8001f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3304      	adds	r3, #4
 8001f12:	2b06      	cmp	r3, #6
 8001f14:	d902      	bls.n	8001f1c <NVIC_EncodePriority+0x30>
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3b03      	subs	r3, #3
 8001f1a:	e000      	b.n	8001f1e <NVIC_EncodePriority+0x32>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	f04f 32ff 	mov.w	r2, #4294967295
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	401a      	ands	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f34:	f04f 31ff 	mov.w	r1, #4294967295
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43d9      	mvns	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	4313      	orrs	r3, r2
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3724      	adds	r7, #36	; 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f60:	d301      	bcc.n	8001f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00f      	b.n	8001f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f66:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <SysTick_Config+0x40>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6e:	210f      	movs	r1, #15
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	f7ff ff90 	bl	8001e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <SysTick_Config+0x40>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7e:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <SysTick_Config+0x40>)
 8001f80:	2207      	movs	r2, #7
 8001f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	e000e010 	.word	0xe000e010

08001f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ff49 	bl	8001e34 <__NVIC_SetPriorityGrouping>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fbc:	f7ff ff5e 	bl	8001e7c <__NVIC_GetPriorityGrouping>
 8001fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	6978      	ldr	r0, [r7, #20]
 8001fc8:	f7ff ff90 	bl	8001eec <NVIC_EncodePriority>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff5f 	bl	8001e98 <__NVIC_SetPriority>
}
 8001fda:	bf00      	nop
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff ffb0 	bl	8001f50 <SysTick_Config>
 8001ff0:	4603      	mov	r3, r0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e00e      	b.n	800202a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	795b      	ldrb	r3, [r3, #5]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d105      	bne.n	8002022 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7fe f927 	bl	8000270 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002032:	b480      	push	{r7}
 8002034:	b087      	sub	sp, #28
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2202      	movs	r2, #2
 8002046:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	e00a      	b.n	8002074 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	441a      	add	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	3301      	adds	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	429a      	cmp	r2, r3
 800207a:	d3f0      	bcc.n	800205e <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2201      	movs	r2, #1
 8002088:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800208a:	693b      	ldr	r3, [r7, #16]
}
 800208c:	4618      	mov	r0, r3
 800208e:	371c      	adds	r7, #28
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr
	...

08002098 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209a:	b087      	sub	sp, #28
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80020b2:	4b2f      	ldr	r3, [pc, #188]	; (8002170 <HAL_FLASH_Program+0xd8>)
 80020b4:	7e1b      	ldrb	r3, [r3, #24]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_FLASH_Program+0x26>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e054      	b.n	8002168 <HAL_FLASH_Program+0xd0>
 80020be:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <HAL_FLASH_Program+0xd8>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80020c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020c8:	f000 f8a8 	bl	800221c <FLASH_WaitForLastOperation>
 80020cc:	4603      	mov	r3, r0
 80020ce:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80020d0:	7dfb      	ldrb	r3, [r7, #23]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d144      	bne.n	8002160 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d102      	bne.n	80020e2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80020dc:	2301      	movs	r3, #1
 80020de:	757b      	strb	r3, [r7, #21]
 80020e0:	e007      	b.n	80020f2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d102      	bne.n	80020ee <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80020e8:	2302      	movs	r3, #2
 80020ea:	757b      	strb	r3, [r7, #21]
 80020ec:	e001      	b.n	80020f2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80020ee:	2304      	movs	r3, #4
 80020f0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80020f2:	2300      	movs	r3, #0
 80020f4:	75bb      	strb	r3, [r7, #22]
 80020f6:	e02d      	b.n	8002154 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80020f8:	7dbb      	ldrb	r3, [r7, #22]
 80020fa:	005a      	lsls	r2, r3, #1
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	eb02 0c03 	add.w	ip, r2, r3
 8002102:	7dbb      	ldrb	r3, [r7, #22]
 8002104:	0119      	lsls	r1, r3, #4
 8002106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800210a:	f1c1 0620 	rsb	r6, r1, #32
 800210e:	f1a1 0020 	sub.w	r0, r1, #32
 8002112:	fa22 f401 	lsr.w	r4, r2, r1
 8002116:	fa03 f606 	lsl.w	r6, r3, r6
 800211a:	4334      	orrs	r4, r6
 800211c:	fa23 f000 	lsr.w	r0, r3, r0
 8002120:	4304      	orrs	r4, r0
 8002122:	fa23 f501 	lsr.w	r5, r3, r1
 8002126:	b2a3      	uxth	r3, r4
 8002128:	4619      	mov	r1, r3
 800212a:	4660      	mov	r0, ip
 800212c:	f000 f85a 	bl	80021e4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002130:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002134:	f000 f872 	bl	800221c <FLASH_WaitForLastOperation>
 8002138:	4603      	mov	r3, r0
 800213a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800213c:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <HAL_FLASH_Program+0xdc>)
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	4a0c      	ldr	r2, [pc, #48]	; (8002174 <HAL_FLASH_Program+0xdc>)
 8002142:	f023 0301 	bic.w	r3, r3, #1
 8002146:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002148:	7dfb      	ldrb	r3, [r7, #23]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d107      	bne.n	800215e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800214e:	7dbb      	ldrb	r3, [r7, #22]
 8002150:	3301      	adds	r3, #1
 8002152:	75bb      	strb	r3, [r7, #22]
 8002154:	7dba      	ldrb	r2, [r7, #22]
 8002156:	7d7b      	ldrb	r3, [r7, #21]
 8002158:	429a      	cmp	r2, r3
 800215a:	d3cd      	bcc.n	80020f8 <HAL_FLASH_Program+0x60>
 800215c:	e000      	b.n	8002160 <HAL_FLASH_Program+0xc8>
      {
        break;
 800215e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <HAL_FLASH_Program+0xd8>)
 8002162:	2200      	movs	r2, #0
 8002164:	761a      	strb	r2, [r3, #24]

  return status;
 8002166:	7dfb      	ldrb	r3, [r7, #23]
}
 8002168:	4618      	mov	r0, r3
 800216a:	371c      	adds	r7, #28
 800216c:	46bd      	mov	sp, r7
 800216e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002170:	20001718 	.word	0x20001718
 8002174:	40022000 	.word	0x40022000

08002178 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002182:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <HAL_FLASH_Unlock+0x40>)
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00d      	beq.n	80021aa <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <HAL_FLASH_Unlock+0x40>)
 8002190:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <HAL_FLASH_Unlock+0x44>)
 8002192:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_FLASH_Unlock+0x40>)
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <HAL_FLASH_Unlock+0x48>)
 8002198:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <HAL_FLASH_Unlock+0x40>)
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80021aa:	79fb      	ldrb	r3, [r7, #7]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40022000 	.word	0x40022000
 80021bc:	45670123 	.word	0x45670123
 80021c0:	cdef89ab 	.word	0xcdef89ab

080021c4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_FLASH_Lock+0x1c>)
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <HAL_FLASH_Lock+0x1c>)
 80021ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40022000 	.word	0x40022000

080021e4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <FLASH_Program_HalfWord+0x30>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80021f6:	4b08      	ldr	r3, [pc, #32]	; (8002218 <FLASH_Program_HalfWord+0x34>)
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	4a07      	ldr	r2, [pc, #28]	; (8002218 <FLASH_Program_HalfWord+0x34>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	887a      	ldrh	r2, [r7, #2]
 8002206:	801a      	strh	r2, [r3, #0]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20001718 	.word	0x20001718
 8002218:	40022000 	.word	0x40022000

0800221c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002224:	f7ff fdda 	bl	8001ddc <HAL_GetTick>
 8002228:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800222a:	e010      	b.n	800224e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002232:	d00c      	beq.n	800224e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <FLASH_WaitForLastOperation+0x2e>
 800223a:	f7ff fdcf 	bl	8001ddc <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	429a      	cmp	r2, r3
 8002248:	d201      	bcs.n	800224e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e025      	b.n	800229a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800224e:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <FLASH_WaitForLastOperation+0x88>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1e8      	bne.n	800222c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <FLASH_WaitForLastOperation+0x88>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0320 	and.w	r3, r3, #32
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <FLASH_WaitForLastOperation+0x88>)
 8002268:	2220      	movs	r2, #32
 800226a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800226c:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <FLASH_WaitForLastOperation+0x88>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10b      	bne.n	8002290 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002278:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <FLASH_WaitForLastOperation+0x88>)
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002280:	2b00      	cmp	r3, #0
 8002282:	d105      	bne.n	8002290 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <FLASH_WaitForLastOperation+0x88>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002290:	f000 f80a 	bl	80022a8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40022000 	.word	0x40022000

080022a8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80022b2:	4b23      	ldr	r3, [pc, #140]	; (8002340 <FLASH_SetErrorCode+0x98>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80022be:	4b21      	ldr	r3, [pc, #132]	; (8002344 <FLASH_SetErrorCode+0x9c>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f043 0302 	orr.w	r3, r3, #2
 80022c6:	4a1f      	ldr	r2, [pc, #124]	; (8002344 <FLASH_SetErrorCode+0x9c>)
 80022c8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f043 0310 	orr.w	r3, r3, #16
 80022d0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80022d2:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <FLASH_SetErrorCode+0x98>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d009      	beq.n	80022f2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80022de:	4b19      	ldr	r3, [pc, #100]	; (8002344 <FLASH_SetErrorCode+0x9c>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	4a17      	ldr	r2, [pc, #92]	; (8002344 <FLASH_SetErrorCode+0x9c>)
 80022e8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f043 0304 	orr.w	r3, r3, #4
 80022f0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80022f2:	4b13      	ldr	r3, [pc, #76]	; (8002340 <FLASH_SetErrorCode+0x98>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <FLASH_SetErrorCode+0x9c>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f043 0304 	orr.w	r3, r3, #4
 8002306:	4a0f      	ldr	r2, [pc, #60]	; (8002344 <FLASH_SetErrorCode+0x9c>)
 8002308:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800230a:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <FLASH_SetErrorCode+0x98>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4a0c      	ldr	r2, [pc, #48]	; (8002340 <FLASH_SetErrorCode+0x98>)
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f240 1201 	movw	r2, #257	; 0x101
 800231c:	4293      	cmp	r3, r2
 800231e:	d106      	bne.n	800232e <FLASH_SetErrorCode+0x86>
 8002320:	4b07      	ldr	r3, [pc, #28]	; (8002340 <FLASH_SetErrorCode+0x98>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	4a06      	ldr	r2, [pc, #24]	; (8002340 <FLASH_SetErrorCode+0x98>)
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	61d3      	str	r3, [r2, #28]
}  
 800232c:	e002      	b.n	8002334 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800232e:	4a04      	ldr	r2, [pc, #16]	; (8002340 <FLASH_SetErrorCode+0x98>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	60d3      	str	r3, [r2, #12]
}  
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40022000 	.word	0x40022000
 8002344:	20001718 	.word	0x20001718

08002348 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800235a:	4b2f      	ldr	r3, [pc, #188]	; (8002418 <HAL_FLASHEx_Erase+0xd0>)
 800235c:	7e1b      	ldrb	r3, [r3, #24]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_FLASHEx_Erase+0x1e>
 8002362:	2302      	movs	r3, #2
 8002364:	e053      	b.n	800240e <HAL_FLASHEx_Erase+0xc6>
 8002366:	4b2c      	ldr	r3, [pc, #176]	; (8002418 <HAL_FLASHEx_Erase+0xd0>)
 8002368:	2201      	movs	r2, #1
 800236a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d116      	bne.n	80023a2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002374:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002378:	f7ff ff50 	bl	800221c <FLASH_WaitForLastOperation>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d141      	bne.n	8002406 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002382:	2001      	movs	r0, #1
 8002384:	f000 f84c 	bl	8002420 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002388:	f24c 3050 	movw	r0, #50000	; 0xc350
 800238c:	f7ff ff46 	bl	800221c <FLASH_WaitForLastOperation>
 8002390:	4603      	mov	r3, r0
 8002392:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002394:	4b21      	ldr	r3, [pc, #132]	; (800241c <HAL_FLASHEx_Erase+0xd4>)
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	4a20      	ldr	r2, [pc, #128]	; (800241c <HAL_FLASHEx_Erase+0xd4>)
 800239a:	f023 0304 	bic.w	r3, r3, #4
 800239e:	6113      	str	r3, [r2, #16]
 80023a0:	e031      	b.n	8002406 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80023a2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023a6:	f7ff ff39 	bl	800221c <FLASH_WaitForLastOperation>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d12a      	bne.n	8002406 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f04f 32ff 	mov.w	r2, #4294967295
 80023b6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	e019      	b.n	80023f4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80023c0:	68b8      	ldr	r0, [r7, #8]
 80023c2:	f000 f849 	bl	8002458 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023ca:	f7ff ff27 	bl	800221c <FLASH_WaitForLastOperation>
 80023ce:	4603      	mov	r3, r0
 80023d0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80023d2:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_FLASHEx_Erase+0xd4>)
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	4a11      	ldr	r2, [pc, #68]	; (800241c <HAL_FLASHEx_Erase+0xd4>)
 80023d8:	f023 0302 	bic.w	r3, r3, #2
 80023dc:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	601a      	str	r2, [r3, #0]
            break;
 80023ea:	e00c      	b.n	8002406 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023f2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	02da      	lsls	r2, r3, #11
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	429a      	cmp	r2, r3
 8002404:	d3dc      	bcc.n	80023c0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002406:	4b04      	ldr	r3, [pc, #16]	; (8002418 <HAL_FLASHEx_Erase+0xd0>)
 8002408:	2200      	movs	r2, #0
 800240a:	761a      	strb	r2, [r3, #24]

  return status;
 800240c:	7bfb      	ldrb	r3, [r7, #15]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20001718 	.word	0x20001718
 800241c:	40022000 	.word	0x40022000

08002420 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002428:	4b09      	ldr	r3, [pc, #36]	; (8002450 <FLASH_MassErase+0x30>)
 800242a:	2200      	movs	r2, #0
 800242c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <FLASH_MassErase+0x34>)
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	4a08      	ldr	r2, [pc, #32]	; (8002454 <FLASH_MassErase+0x34>)
 8002434:	f043 0304 	orr.w	r3, r3, #4
 8002438:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <FLASH_MassErase+0x34>)
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	4a05      	ldr	r2, [pc, #20]	; (8002454 <FLASH_MassErase+0x34>)
 8002440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002444:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	20001718 	.word	0x20001718
 8002454:	40022000 	.word	0x40022000

08002458 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <FLASH_PageErase+0x38>)
 8002462:	2200      	movs	r2, #0
 8002464:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <FLASH_PageErase+0x3c>)
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <FLASH_PageErase+0x3c>)
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002472:	4a08      	ldr	r2, [pc, #32]	; (8002494 <FLASH_PageErase+0x3c>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <FLASH_PageErase+0x3c>)
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	4a05      	ldr	r2, [pc, #20]	; (8002494 <FLASH_PageErase+0x3c>)
 800247e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002482:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20001718 	.word	0x20001718
 8002494:	40022000 	.word	0x40022000

08002498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002498:	b480      	push	{r7}
 800249a:	b08b      	sub	sp, #44	; 0x2c
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024a2:	2300      	movs	r3, #0
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024a6:	2300      	movs	r3, #0
 80024a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024aa:	e133      	b.n	8002714 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024ac:	2201      	movs	r2, #1
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	f040 8122 	bne.w	800270e <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b12      	cmp	r3, #18
 80024d0:	d034      	beq.n	800253c <HAL_GPIO_Init+0xa4>
 80024d2:	2b12      	cmp	r3, #18
 80024d4:	d80d      	bhi.n	80024f2 <HAL_GPIO_Init+0x5a>
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d02b      	beq.n	8002532 <HAL_GPIO_Init+0x9a>
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d804      	bhi.n	80024e8 <HAL_GPIO_Init+0x50>
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d031      	beq.n	8002546 <HAL_GPIO_Init+0xae>
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d01c      	beq.n	8002520 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024e6:	e048      	b.n	800257a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d043      	beq.n	8002574 <HAL_GPIO_Init+0xdc>
 80024ec:	2b11      	cmp	r3, #17
 80024ee:	d01b      	beq.n	8002528 <HAL_GPIO_Init+0x90>
          break;
 80024f0:	e043      	b.n	800257a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80024f2:	4a8f      	ldr	r2, [pc, #572]	; (8002730 <HAL_GPIO_Init+0x298>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d026      	beq.n	8002546 <HAL_GPIO_Init+0xae>
 80024f8:	4a8d      	ldr	r2, [pc, #564]	; (8002730 <HAL_GPIO_Init+0x298>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d806      	bhi.n	800250c <HAL_GPIO_Init+0x74>
 80024fe:	4a8d      	ldr	r2, [pc, #564]	; (8002734 <HAL_GPIO_Init+0x29c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d020      	beq.n	8002546 <HAL_GPIO_Init+0xae>
 8002504:	4a8c      	ldr	r2, [pc, #560]	; (8002738 <HAL_GPIO_Init+0x2a0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d01d      	beq.n	8002546 <HAL_GPIO_Init+0xae>
          break;
 800250a:	e036      	b.n	800257a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800250c:	4a8b      	ldr	r2, [pc, #556]	; (800273c <HAL_GPIO_Init+0x2a4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d019      	beq.n	8002546 <HAL_GPIO_Init+0xae>
 8002512:	4a8b      	ldr	r2, [pc, #556]	; (8002740 <HAL_GPIO_Init+0x2a8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d016      	beq.n	8002546 <HAL_GPIO_Init+0xae>
 8002518:	4a8a      	ldr	r2, [pc, #552]	; (8002744 <HAL_GPIO_Init+0x2ac>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <HAL_GPIO_Init+0xae>
          break;
 800251e:	e02c      	b.n	800257a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	623b      	str	r3, [r7, #32]
          break;
 8002526:	e028      	b.n	800257a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	3304      	adds	r3, #4
 800252e:	623b      	str	r3, [r7, #32]
          break;
 8002530:	e023      	b.n	800257a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	3308      	adds	r3, #8
 8002538:	623b      	str	r3, [r7, #32]
          break;
 800253a:	e01e      	b.n	800257a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	330c      	adds	r3, #12
 8002542:	623b      	str	r3, [r7, #32]
          break;
 8002544:	e019      	b.n	800257a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800254e:	2304      	movs	r3, #4
 8002550:	623b      	str	r3, [r7, #32]
          break;
 8002552:	e012      	b.n	800257a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d105      	bne.n	8002568 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800255c:	2308      	movs	r3, #8
 800255e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	611a      	str	r2, [r3, #16]
          break;
 8002566:	e008      	b.n	800257a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002568:	2308      	movs	r3, #8
 800256a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	615a      	str	r2, [r3, #20]
          break;
 8002572:	e002      	b.n	800257a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002574:	2300      	movs	r3, #0
 8002576:	623b      	str	r3, [r7, #32]
          break;
 8002578:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	2bff      	cmp	r3, #255	; 0xff
 800257e:	d801      	bhi.n	8002584 <HAL_GPIO_Init+0xec>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	e001      	b.n	8002588 <HAL_GPIO_Init+0xf0>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3304      	adds	r3, #4
 8002588:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	2bff      	cmp	r3, #255	; 0xff
 800258e:	d802      	bhi.n	8002596 <HAL_GPIO_Init+0xfe>
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	e002      	b.n	800259c <HAL_GPIO_Init+0x104>
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	3b08      	subs	r3, #8
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	210f      	movs	r1, #15
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	401a      	ands	r2, r3
 80025ae:	6a39      	ldr	r1, [r7, #32]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	431a      	orrs	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 80a2 	beq.w	800270e <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025ca:	4b5f      	ldr	r3, [pc, #380]	; (8002748 <HAL_GPIO_Init+0x2b0>)
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	4a5e      	ldr	r2, [pc, #376]	; (8002748 <HAL_GPIO_Init+0x2b0>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6193      	str	r3, [r2, #24]
 80025d6:	4b5c      	ldr	r3, [pc, #368]	; (8002748 <HAL_GPIO_Init+0x2b0>)
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025e2:	4a5a      	ldr	r2, [pc, #360]	; (800274c <HAL_GPIO_Init+0x2b4>)
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	089b      	lsrs	r3, r3, #2
 80025e8:	3302      	adds	r3, #2
 80025ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ee:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	220f      	movs	r2, #15
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4013      	ands	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a51      	ldr	r2, [pc, #324]	; (8002750 <HAL_GPIO_Init+0x2b8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d01f      	beq.n	800264e <HAL_GPIO_Init+0x1b6>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a50      	ldr	r2, [pc, #320]	; (8002754 <HAL_GPIO_Init+0x2bc>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d019      	beq.n	800264a <HAL_GPIO_Init+0x1b2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4f      	ldr	r2, [pc, #316]	; (8002758 <HAL_GPIO_Init+0x2c0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <HAL_GPIO_Init+0x1ae>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4e      	ldr	r2, [pc, #312]	; (800275c <HAL_GPIO_Init+0x2c4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00d      	beq.n	8002642 <HAL_GPIO_Init+0x1aa>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4d      	ldr	r2, [pc, #308]	; (8002760 <HAL_GPIO_Init+0x2c8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d007      	beq.n	800263e <HAL_GPIO_Init+0x1a6>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4c      	ldr	r2, [pc, #304]	; (8002764 <HAL_GPIO_Init+0x2cc>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d101      	bne.n	800263a <HAL_GPIO_Init+0x1a2>
 8002636:	2305      	movs	r3, #5
 8002638:	e00a      	b.n	8002650 <HAL_GPIO_Init+0x1b8>
 800263a:	2306      	movs	r3, #6
 800263c:	e008      	b.n	8002650 <HAL_GPIO_Init+0x1b8>
 800263e:	2304      	movs	r3, #4
 8002640:	e006      	b.n	8002650 <HAL_GPIO_Init+0x1b8>
 8002642:	2303      	movs	r3, #3
 8002644:	e004      	b.n	8002650 <HAL_GPIO_Init+0x1b8>
 8002646:	2302      	movs	r3, #2
 8002648:	e002      	b.n	8002650 <HAL_GPIO_Init+0x1b8>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <HAL_GPIO_Init+0x1b8>
 800264e:	2300      	movs	r3, #0
 8002650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002652:	f002 0203 	and.w	r2, r2, #3
 8002656:	0092      	lsls	r2, r2, #2
 8002658:	4093      	lsls	r3, r2
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4313      	orrs	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002660:	493a      	ldr	r1, [pc, #232]	; (800274c <HAL_GPIO_Init+0x2b4>)
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	089b      	lsrs	r3, r3, #2
 8002666:	3302      	adds	r3, #2
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d006      	beq.n	8002688 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800267a:	4b3b      	ldr	r3, [pc, #236]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	493a      	ldr	r1, [pc, #232]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
 8002686:	e006      	b.n	8002696 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002688:	4b37      	ldr	r3, [pc, #220]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	43db      	mvns	r3, r3
 8002690:	4935      	ldr	r1, [pc, #212]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 8002692:	4013      	ands	r3, r2
 8002694:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d006      	beq.n	80026b0 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026a2:	4b31      	ldr	r3, [pc, #196]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	4930      	ldr	r1, [pc, #192]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
 80026ae:	e006      	b.n	80026be <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026b0:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	492b      	ldr	r1, [pc, #172]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d006      	beq.n	80026d8 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026ca:	4b27      	ldr	r3, [pc, #156]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	4926      	ldr	r1, [pc, #152]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]
 80026d6:	e006      	b.n	80026e6 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026d8:	4b23      	ldr	r3, [pc, #140]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	43db      	mvns	r3, r3
 80026e0:	4921      	ldr	r1, [pc, #132]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d006      	beq.n	8002700 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	491c      	ldr	r1, [pc, #112]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60cb      	str	r3, [r1, #12]
 80026fe:	e006      	b.n	800270e <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	43db      	mvns	r3, r3
 8002708:	4917      	ldr	r1, [pc, #92]	; (8002768 <HAL_GPIO_Init+0x2d0>)
 800270a:	4013      	ands	r3, r2
 800270c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	3301      	adds	r3, #1
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	fa22 f303 	lsr.w	r3, r2, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	f47f aec4 	bne.w	80024ac <HAL_GPIO_Init+0x14>
  }
}
 8002724:	bf00      	nop
 8002726:	372c      	adds	r7, #44	; 0x2c
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	10210000 	.word	0x10210000
 8002734:	10110000 	.word	0x10110000
 8002738:	10120000 	.word	0x10120000
 800273c:	10310000 	.word	0x10310000
 8002740:	10320000 	.word	0x10320000
 8002744:	10220000 	.word	0x10220000
 8002748:	40021000 	.word	0x40021000
 800274c:	40010000 	.word	0x40010000
 8002750:	40010800 	.word	0x40010800
 8002754:	40010c00 	.word	0x40010c00
 8002758:	40011000 	.word	0x40011000
 800275c:	40011400 	.word	0x40011400
 8002760:	40011800 	.word	0x40011800
 8002764:	40011c00 	.word	0x40011c00
 8002768:	40010400 	.word	0x40010400

0800276c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	887b      	ldrh	r3, [r7, #2]
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	e001      	b.n	800278e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800278a:	2300      	movs	r3, #0
 800278c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800278e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr

0800279a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	460b      	mov	r3, r1
 80027a4:	807b      	strh	r3, [r7, #2]
 80027a6:	4613      	mov	r3, r2
 80027a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027aa:	787b      	ldrb	r3, [r7, #1]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027b0:	887a      	ldrh	r2, [r7, #2]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027b6:	e003      	b.n	80027c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	041a      	lsls	r2, r3, #16
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	611a      	str	r2, [r3, #16]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b085      	sub	sp, #20
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027dc:	887a      	ldrh	r2, [r7, #2]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4013      	ands	r3, r2
 80027e2:	041a      	lsls	r2, r3, #16
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	43d9      	mvns	r1, r3
 80027e8:	887b      	ldrh	r3, [r7, #2]
 80027ea:	400b      	ands	r3, r1
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	611a      	str	r2, [r3, #16]
}
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e26c      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 8087 	beq.w	800292a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800281c:	4b92      	ldr	r3, [pc, #584]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 030c 	and.w	r3, r3, #12
 8002824:	2b04      	cmp	r3, #4
 8002826:	d00c      	beq.n	8002842 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002828:	4b8f      	ldr	r3, [pc, #572]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	2b08      	cmp	r3, #8
 8002832:	d112      	bne.n	800285a <HAL_RCC_OscConfig+0x5e>
 8002834:	4b8c      	ldr	r3, [pc, #560]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002840:	d10b      	bne.n	800285a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002842:	4b89      	ldr	r3, [pc, #548]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d06c      	beq.n	8002928 <HAL_RCC_OscConfig+0x12c>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d168      	bne.n	8002928 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e246      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002862:	d106      	bne.n	8002872 <HAL_RCC_OscConfig+0x76>
 8002864:	4b80      	ldr	r3, [pc, #512]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a7f      	ldr	r2, [pc, #508]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 800286a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	e02e      	b.n	80028d0 <HAL_RCC_OscConfig+0xd4>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10c      	bne.n	8002894 <HAL_RCC_OscConfig+0x98>
 800287a:	4b7b      	ldr	r3, [pc, #492]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a7a      	ldr	r2, [pc, #488]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b78      	ldr	r3, [pc, #480]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a77      	ldr	r2, [pc, #476]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 800288c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	e01d      	b.n	80028d0 <HAL_RCC_OscConfig+0xd4>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800289c:	d10c      	bne.n	80028b8 <HAL_RCC_OscConfig+0xbc>
 800289e:	4b72      	ldr	r3, [pc, #456]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a71      	ldr	r2, [pc, #452]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	4b6f      	ldr	r3, [pc, #444]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a6e      	ldr	r2, [pc, #440]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	e00b      	b.n	80028d0 <HAL_RCC_OscConfig+0xd4>
 80028b8:	4b6b      	ldr	r3, [pc, #428]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a6a      	ldr	r2, [pc, #424]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80028be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	4b68      	ldr	r3, [pc, #416]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a67      	ldr	r2, [pc, #412]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80028ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d013      	beq.n	8002900 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7ff fa80 	bl	8001ddc <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e0:	f7ff fa7c 	bl	8001ddc <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	; 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e1fa      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	4b5d      	ldr	r3, [pc, #372]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0xe4>
 80028fe:	e014      	b.n	800292a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7ff fa6c 	bl	8001ddc <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002908:	f7ff fa68 	bl	8001ddc <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	; 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e1e6      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291a:	4b53      	ldr	r3, [pc, #332]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x10c>
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d063      	beq.n	80029fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002936:	4b4c      	ldr	r3, [pc, #304]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00b      	beq.n	800295a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002942:	4b49      	ldr	r3, [pc, #292]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b08      	cmp	r3, #8
 800294c:	d11c      	bne.n	8002988 <HAL_RCC_OscConfig+0x18c>
 800294e:	4b46      	ldr	r3, [pc, #280]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d116      	bne.n	8002988 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295a:	4b43      	ldr	r3, [pc, #268]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <HAL_RCC_OscConfig+0x176>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d001      	beq.n	8002972 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e1ba      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002972:	4b3d      	ldr	r3, [pc, #244]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4939      	ldr	r1, [pc, #228]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002982:	4313      	orrs	r3, r2
 8002984:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002986:	e03a      	b.n	80029fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d020      	beq.n	80029d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002990:	4b36      	ldr	r3, [pc, #216]	; (8002a6c <HAL_RCC_OscConfig+0x270>)
 8002992:	2201      	movs	r2, #1
 8002994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7ff fa21 	bl	8001ddc <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299e:	f7ff fa1d 	bl	8001ddc <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e19b      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b0:	4b2d      	ldr	r3, [pc, #180]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f0      	beq.n	800299e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029bc:	4b2a      	ldr	r3, [pc, #168]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4927      	ldr	r1, [pc, #156]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	600b      	str	r3, [r1, #0]
 80029d0:	e015      	b.n	80029fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d2:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <HAL_RCC_OscConfig+0x270>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7ff fa00 	bl	8001ddc <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e0:	f7ff f9fc 	bl	8001ddc <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e17a      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f2:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d03a      	beq.n	8002a80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d019      	beq.n	8002a46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a12:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <HAL_RCC_OscConfig+0x274>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a18:	f7ff f9e0 	bl	8001ddc <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a20:	f7ff f9dc 	bl	8001ddc <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e15a      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a32:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a3e:	2001      	movs	r0, #1
 8002a40:	f000 faaa 	bl	8002f98 <RCC_Delay>
 8002a44:	e01c      	b.n	8002a80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a46:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <HAL_RCC_OscConfig+0x274>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4c:	f7ff f9c6 	bl	8001ddc <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a52:	e00f      	b.n	8002a74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a54:	f7ff f9c2 	bl	8001ddc <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d908      	bls.n	8002a74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e140      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4ec>
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	42420000 	.word	0x42420000
 8002a70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a74:	4b9e      	ldr	r3, [pc, #632]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1e9      	bne.n	8002a54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80a6 	beq.w	8002bda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a92:	4b97      	ldr	r3, [pc, #604]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10d      	bne.n	8002aba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9e:	4b94      	ldr	r3, [pc, #592]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	4a93      	ldr	r2, [pc, #588]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	61d3      	str	r3, [r2, #28]
 8002aaa:	4b91      	ldr	r3, [pc, #580]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aba:	4b8e      	ldr	r3, [pc, #568]	; (8002cf4 <HAL_RCC_OscConfig+0x4f8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d118      	bne.n	8002af8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ac6:	4b8b      	ldr	r3, [pc, #556]	; (8002cf4 <HAL_RCC_OscConfig+0x4f8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a8a      	ldr	r2, [pc, #552]	; (8002cf4 <HAL_RCC_OscConfig+0x4f8>)
 8002acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad2:	f7ff f983 	bl	8001ddc <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ada:	f7ff f97f 	bl	8001ddc <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b64      	cmp	r3, #100	; 0x64
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e0fd      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aec:	4b81      	ldr	r3, [pc, #516]	; (8002cf4 <HAL_RCC_OscConfig+0x4f8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d106      	bne.n	8002b0e <HAL_RCC_OscConfig+0x312>
 8002b00:	4b7b      	ldr	r3, [pc, #492]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	4a7a      	ldr	r2, [pc, #488]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	6213      	str	r3, [r2, #32]
 8002b0c:	e02d      	b.n	8002b6a <HAL_RCC_OscConfig+0x36e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x334>
 8002b16:	4b76      	ldr	r3, [pc, #472]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	4a75      	ldr	r2, [pc, #468]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	6213      	str	r3, [r2, #32]
 8002b22:	4b73      	ldr	r3, [pc, #460]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	4a72      	ldr	r2, [pc, #456]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002b28:	f023 0304 	bic.w	r3, r3, #4
 8002b2c:	6213      	str	r3, [r2, #32]
 8002b2e:	e01c      	b.n	8002b6a <HAL_RCC_OscConfig+0x36e>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2b05      	cmp	r3, #5
 8002b36:	d10c      	bne.n	8002b52 <HAL_RCC_OscConfig+0x356>
 8002b38:	4b6d      	ldr	r3, [pc, #436]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	4a6c      	ldr	r2, [pc, #432]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002b3e:	f043 0304 	orr.w	r3, r3, #4
 8002b42:	6213      	str	r3, [r2, #32]
 8002b44:	4b6a      	ldr	r3, [pc, #424]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	4a69      	ldr	r2, [pc, #420]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	6213      	str	r3, [r2, #32]
 8002b50:	e00b      	b.n	8002b6a <HAL_RCC_OscConfig+0x36e>
 8002b52:	4b67      	ldr	r3, [pc, #412]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	4a66      	ldr	r2, [pc, #408]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	6213      	str	r3, [r2, #32]
 8002b5e:	4b64      	ldr	r3, [pc, #400]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	4a63      	ldr	r2, [pc, #396]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002b64:	f023 0304 	bic.w	r3, r3, #4
 8002b68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d015      	beq.n	8002b9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b72:	f7ff f933 	bl	8001ddc <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b78:	e00a      	b.n	8002b90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7a:	f7ff f92f 	bl	8001ddc <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e0ab      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b90:	4b57      	ldr	r3, [pc, #348]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0ee      	beq.n	8002b7a <HAL_RCC_OscConfig+0x37e>
 8002b9c:	e014      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9e:	f7ff f91d 	bl	8001ddc <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba4:	e00a      	b.n	8002bbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba6:	f7ff f919 	bl	8001ddc <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e095      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bbc:	4b4c      	ldr	r3, [pc, #304]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1ee      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bc8:	7dfb      	ldrb	r3, [r7, #23]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d105      	bne.n	8002bda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bce:	4b48      	ldr	r3, [pc, #288]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	4a47      	ldr	r2, [pc, #284]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 8081 	beq.w	8002ce6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be4:	4b42      	ldr	r3, [pc, #264]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 030c 	and.w	r3, r3, #12
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d061      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d146      	bne.n	8002c86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf8:	4b3f      	ldr	r3, [pc, #252]	; (8002cf8 <HAL_RCC_OscConfig+0x4fc>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfe:	f7ff f8ed 	bl	8001ddc <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c06:	f7ff f8e9 	bl	8001ddc <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e067      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c18:	4b35      	ldr	r3, [pc, #212]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1f0      	bne.n	8002c06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2c:	d108      	bne.n	8002c40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c2e:	4b30      	ldr	r3, [pc, #192]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	492d      	ldr	r1, [pc, #180]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c40:	4b2b      	ldr	r3, [pc, #172]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a19      	ldr	r1, [r3, #32]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	430b      	orrs	r3, r1
 8002c52:	4927      	ldr	r1, [pc, #156]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c58:	4b27      	ldr	r3, [pc, #156]	; (8002cf8 <HAL_RCC_OscConfig+0x4fc>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5e:	f7ff f8bd 	bl	8001ddc <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c66:	f7ff f8b9 	bl	8001ddc <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e037      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c78:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f0      	beq.n	8002c66 <HAL_RCC_OscConfig+0x46a>
 8002c84:	e02f      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c86:	4b1c      	ldr	r3, [pc, #112]	; (8002cf8 <HAL_RCC_OscConfig+0x4fc>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7ff f8a6 	bl	8001ddc <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c94:	f7ff f8a2 	bl	8001ddc <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e020      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca6:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x498>
 8002cb2:	e018      	b.n	8002ce6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e013      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_RCC_OscConfig+0x4f4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d106      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d001      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40007000 	.word	0x40007000
 8002cf8:	42420060 	.word	0x42420060

08002cfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0d0      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d10:	4b6a      	ldr	r3, [pc, #424]	; (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d910      	bls.n	8002d40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b67      	ldr	r3, [pc, #412]	; (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 0207 	bic.w	r2, r3, #7
 8002d26:	4965      	ldr	r1, [pc, #404]	; (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b63      	ldr	r3, [pc, #396]	; (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0b8      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d020      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d58:	4b59      	ldr	r3, [pc, #356]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a58      	ldr	r2, [pc, #352]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d70:	4b53      	ldr	r3, [pc, #332]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4a52      	ldr	r2, [pc, #328]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d7c:	4b50      	ldr	r3, [pc, #320]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	494d      	ldr	r1, [pc, #308]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d040      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	4b47      	ldr	r3, [pc, #284]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d115      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e07f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dba:	4b41      	ldr	r3, [pc, #260]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e073      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dca:	4b3d      	ldr	r3, [pc, #244]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e06b      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dda:	4b39      	ldr	r3, [pc, #228]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f023 0203 	bic.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4936      	ldr	r1, [pc, #216]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dec:	f7fe fff6 	bl	8001ddc <HAL_GetTick>
 8002df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df4:	f7fe fff2 	bl	8001ddc <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e053      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0a:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 020c 	and.w	r2, r3, #12
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d1eb      	bne.n	8002df4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b27      	ldr	r3, [pc, #156]	; (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d210      	bcs.n	8002e4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 0207 	bic.w	r2, r3, #7
 8002e32:	4922      	ldr	r1, [pc, #136]	; (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e032      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4916      	ldr	r1, [pc, #88]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e76:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	490e      	ldr	r1, [pc, #56]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e8a:	f000 f821 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8002e8e:	4601      	mov	r1, r0
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	4a0a      	ldr	r2, [pc, #40]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9c:	5cd3      	ldrb	r3, [r2, r3]
 8002e9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002ea2:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_RCC_ClockConfig+0x1d0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe ff54 	bl	8001d58 <HAL_InitTick>

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40022000 	.word	0x40022000
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	08004d34 	.word	0x08004d34
 8002ec8:	200000a4 	.word	0x200000a4
 8002ecc:	200000a8 	.word	0x200000a8

08002ed0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed0:	b490      	push	{r4, r7}
 8002ed2:	b08a      	sub	sp, #40	; 0x28
 8002ed4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ed6:	4b2a      	ldr	r3, [pc, #168]	; (8002f80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ed8:	1d3c      	adds	r4, r7, #4
 8002eda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002edc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ee0:	4b28      	ldr	r3, [pc, #160]	; (8002f84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	2300      	movs	r3, #0
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002efa:	4b23      	ldr	r3, [pc, #140]	; (8002f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d002      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x40>
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d003      	beq.n	8002f16 <HAL_RCC_GetSysClockFreq+0x46>
 8002f0e:	e02d      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f10:	4b1e      	ldr	r3, [pc, #120]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f12:	623b      	str	r3, [r7, #32]
      break;
 8002f14:	e02d      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	0c9b      	lsrs	r3, r3, #18
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f22:	4413      	add	r3, r2
 8002f24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d013      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f34:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	0c5b      	lsrs	r3, r3, #17
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f42:	4413      	add	r3, r2
 8002f44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	4a0f      	ldr	r2, [pc, #60]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f4e:	fb02 f203 	mul.w	r2, r2, r3
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5a:	e004      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	4a0c      	ldr	r2, [pc, #48]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f60:	fb02 f303 	mul.w	r3, r2, r3
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	623b      	str	r3, [r7, #32]
      break;
 8002f6a:	e002      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f6e:	623b      	str	r3, [r7, #32]
      break;
 8002f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f72:	6a3b      	ldr	r3, [r7, #32]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3728      	adds	r7, #40	; 0x28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc90      	pop	{r4, r7}
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	08004d20 	.word	0x08004d20
 8002f84:	08004d30 	.word	0x08004d30
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	00b71b00 	.word	0x00b71b00
 8002f90:	003d0900 	.word	0x003d0900
 8002f94:	007a1200 	.word	0x007a1200

08002f98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fa0:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <RCC_Delay+0x34>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <RCC_Delay+0x38>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	0a5b      	lsrs	r3, r3, #9
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fb4:	bf00      	nop
  }
  while (Delay --);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1e5a      	subs	r2, r3, #1
 8002fba:	60fa      	str	r2, [r7, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1f9      	bne.n	8002fb4 <RCC_Delay+0x1c>
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	200000a4 	.word	0x200000a4
 8002fd0:	10624dd3 	.word	0x10624dd3

08002fd4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002fd4:	b490      	push	{r4, r7}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	0e1b      	lsrs	r3, r3, #24
 8002fe8:	4413      	add	r3, r2
 8002fea:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002fec:	6822      	ldr	r2, [r4, #0]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	fab3 f383 	clz	r3, r3
 8003000:	b2db      	uxtb	r3, r3
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	210f      	movs	r1, #15
 8003006:	fa01 f303 	lsl.w	r3, r1, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	401a      	ands	r2, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	fa93 f3a3 	rbit	r3, r3
 8003018:	61bb      	str	r3, [r7, #24]
  return result;
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	fab3 f383 	clz	r3, r3
 8003020:	b2db      	uxtb	r3, r3
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	4313      	orrs	r3, r2
 800302c:	6023      	str	r3, [r4, #0]
}
 800302e:	bf00      	nop
 8003030:	3720      	adds	r7, #32
 8003032:	46bd      	mov	sp, r7
 8003034:	bc90      	pop	{r4, r7}
 8003036:	4770      	bx	lr

08003038 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8003038:	b490      	push	{r4, r7}
 800303a:	b088      	sub	sp, #32
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	461a      	mov	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	0e1b      	lsrs	r3, r3, #24
 800304c:	4413      	add	r3, r2
 800304e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8003050:	6822      	ldr	r2, [r4, #0]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	fa93 f3a3 	rbit	r3, r3
 800305c:	613b      	str	r3, [r7, #16]
  return result;
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	fab3 f383 	clz	r3, r3
 8003064:	b2db      	uxtb	r3, r3
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	2103      	movs	r1, #3
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	43db      	mvns	r3, r3
 8003070:	401a      	ands	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	fa93 f3a3 	rbit	r3, r3
 800307c:	61bb      	str	r3, [r7, #24]
  return result;
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	fab3 f383 	clz	r3, r3
 8003084:	b2db      	uxtb	r3, r3
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	fa01 f303 	lsl.w	r3, r1, r3
 800308e:	4313      	orrs	r3, r2
 8003090:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 8003092:	bf00      	nop
 8003094:	3720      	adds	r7, #32
 8003096:	46bd      	mov	sp, r7
 8003098:	bc90      	pop	{r4, r7}
 800309a:	4770      	bx	lr

0800309c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 800309c:	b490      	push	{r4, r7}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	461a      	mov	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	0e1b      	lsrs	r3, r3, #24
 80030b0:	4413      	add	r3, r2
 80030b2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80030b4:	6822      	ldr	r2, [r4, #0]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	613b      	str	r3, [r7, #16]
  return result;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	fab3 f383 	clz	r3, r3
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	2104      	movs	r1, #4
 80030ce:	fa01 f303 	lsl.w	r3, r1, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	401a      	ands	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	fa93 f3a3 	rbit	r3, r3
 80030e0:	61bb      	str	r3, [r7, #24]
  return result;
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	fa01 f303 	lsl.w	r3, r1, r3
 80030f2:	4313      	orrs	r3, r2
 80030f4:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 80030f6:	bf00      	nop
 80030f8:	3720      	adds	r7, #32
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc90      	pop	{r4, r7}
 80030fe:	4770      	bx	lr

08003100 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	43db      	mvns	r3, r3
 8003116:	401a      	ands	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	0a1b      	lsrs	r3, r3, #8
 800311c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	fa93 f3a3 	rbit	r3, r3
 8003124:	613b      	str	r3, [r7, #16]
  return result;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	fab3 f383 	clz	r3, r3
 800312c:	b2db      	uxtb	r3, r3
 800312e:	4619      	mov	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	408b      	lsls	r3, r1
 8003134:	431a      	orrs	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	60da      	str	r2, [r3, #12]
}
 800313a:	bf00      	nop
 800313c:	371c      	adds	r7, #28
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	60fb      	str	r3, [r7, #12]
  return result;
 8003164:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8003166:	fab3 f383 	clz	r3, r3
 800316a:	b2db      	uxtb	r3, r3
 800316c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800316e:	e040      	b.n	80031f2 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8003170:	2201      	movs	r2, #1
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	409a      	lsls	r2, r3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	4013      	ands	r3, r2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d036      	beq.n	80031ec <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	2b07      	cmp	r3, #7
 8003182:	d806      	bhi.n	8003192 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8003184:	f240 1201 	movw	r2, #257	; 0x101
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	e008      	b.n	80031a4 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3b08      	subs	r3, #8
 8003196:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031a2:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	461a      	mov	r2, r3
 80031aa:	69b9      	ldr	r1, [r7, #24]
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff ffa7 	bl	8003100 <LL_GPIO_SetPinPull>

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	461a      	mov	r2, r3
 80031b8:	69b9      	ldr	r1, [r7, #24]
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff ff0a 	bl	8002fd4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d003      	beq.n	80031d0 <LL_GPIO_Init+0x8c>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b09      	cmp	r3, #9
 80031ce:	d10d      	bne.n	80031ec <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	461a      	mov	r2, r3
 80031d6:	69b9      	ldr	r1, [r7, #24]
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7ff ff2d 	bl	8003038 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	461a      	mov	r2, r3
 80031e4:	69b9      	ldr	r1, [r7, #24]
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ff58 	bl	800309c <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	3301      	adds	r3, #1
 80031f0:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	fa22 f303 	lsr.w	r3, r2, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1b8      	bne.n	8003170 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3720      	adds	r7, #32
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800320c:	4b03      	ldr	r3, [pc, #12]	; (800321c <LL_RCC_GetSysClkSource+0x14>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 030c 	and.w	r3, r3, #12
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr
 800321c:	40021000 	.word	0x40021000

08003220 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003224:	4b03      	ldr	r3, [pc, #12]	; (8003234 <LL_RCC_GetAHBPrescaler+0x14>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr
 8003234:	40021000 	.word	0x40021000

08003238 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800323c:	4b03      	ldr	r3, [pc, #12]	; (800324c <LL_RCC_GetAPB1Prescaler+0x14>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003244:	4618      	mov	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr
 800324c:	40021000 	.word	0x40021000

08003250 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <LL_RCC_GetAPB2Prescaler+0x14>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800325c:	4618      	mov	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr
 8003264:	40021000 	.word	0x40021000

08003268 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <LL_RCC_PLL_GetMainSource+0x14>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8003274:	4618      	mov	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr
 800327c:	40021000 	.word	0x40021000

08003280 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8003284:	4b03      	ldr	r3, [pc, #12]	; (8003294 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr
 8003294:	40021000 	.word	0x40021000

08003298 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 800329c:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <LL_RCC_PLL_GetPrediv+0x18>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	0c5b      	lsrs	r3, r3, #17
 80032a2:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40021000 	.word	0x40021000

080032b4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80032bc:	f000 f820 	bl	8003300 <RCC_GetSystemClockFreq>
 80032c0:	4602      	mov	r2, r0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f83c 	bl	8003348 <RCC_GetHCLKClockFreq>
 80032d0:	4602      	mov	r2, r0
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 f84a 	bl	8003374 <RCC_GetPCLK1ClockFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 f856 	bl	800339c <RCC_GetPCLK2ClockFreq>
 80032f0:	4602      	mov	r2, r0
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	60da      	str	r2, [r3, #12]
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800330a:	f7ff ff7d 	bl	8003208 <LL_RCC_GetSysClkSource>
 800330e:	4603      	mov	r3, r0
 8003310:	2b04      	cmp	r3, #4
 8003312:	d006      	beq.n	8003322 <RCC_GetSystemClockFreq+0x22>
 8003314:	2b08      	cmp	r3, #8
 8003316:	d007      	beq.n	8003328 <RCC_GetSystemClockFreq+0x28>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d109      	bne.n	8003330 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800331c:	4b08      	ldr	r3, [pc, #32]	; (8003340 <RCC_GetSystemClockFreq+0x40>)
 800331e:	607b      	str	r3, [r7, #4]
      break;
 8003320:	e009      	b.n	8003336 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003322:	4b08      	ldr	r3, [pc, #32]	; (8003344 <RCC_GetSystemClockFreq+0x44>)
 8003324:	607b      	str	r3, [r7, #4]
      break;
 8003326:	e006      	b.n	8003336 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003328:	f000 f84c 	bl	80033c4 <RCC_PLL_GetFreqDomain_SYS>
 800332c:	6078      	str	r0, [r7, #4]
      break;
 800332e:	e002      	b.n	8003336 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8003330:	4b03      	ldr	r3, [pc, #12]	; (8003340 <RCC_GetSystemClockFreq+0x40>)
 8003332:	607b      	str	r3, [r7, #4]
      break;
 8003334:	bf00      	nop
  }

  return frequency;
 8003336:	687b      	ldr	r3, [r7, #4]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	007a1200 	.word	0x007a1200
 8003344:	00b71b00 	.word	0x00b71b00

08003348 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003350:	f7ff ff66 	bl	8003220 <LL_RCC_GetAHBPrescaler>
 8003354:	4603      	mov	r3, r0
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	4a04      	ldr	r2, [pc, #16]	; (8003370 <RCC_GetHCLKClockFreq+0x28>)
 800335e:	5cd3      	ldrb	r3, [r2, r3]
 8003360:	461a      	mov	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	40d3      	lsrs	r3, r2
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	08004d34 	.word	0x08004d34

08003374 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800337c:	f7ff ff5c 	bl	8003238 <LL_RCC_GetAPB1Prescaler>
 8003380:	4603      	mov	r3, r0
 8003382:	0a1b      	lsrs	r3, r3, #8
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <RCC_GetPCLK1ClockFreq+0x24>)
 8003386:	5cd3      	ldrb	r3, [r2, r3]
 8003388:	461a      	mov	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	40d3      	lsrs	r3, r2
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	08004d44 	.word	0x08004d44

0800339c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80033a4:	f7ff ff54 	bl	8003250 <LL_RCC_GetAPB2Prescaler>
 80033a8:	4603      	mov	r3, r0
 80033aa:	0adb      	lsrs	r3, r3, #11
 80033ac:	4a04      	ldr	r2, [pc, #16]	; (80033c0 <RCC_GetPCLK2ClockFreq+0x24>)
 80033ae:	5cd3      	ldrb	r3, [r2, r3]
 80033b0:	461a      	mov	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	40d3      	lsrs	r3, r2
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	08004d44 	.word	0x08004d44

080033c4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	607b      	str	r3, [r7, #4]
 80033ce:	2300      	movs	r3, #0
 80033d0:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80033d2:	f7ff ff49 	bl	8003268 <LL_RCC_PLL_GetMainSource>
 80033d6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <RCC_PLL_GetFreqDomain_SYS+0x22>
 80033de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e2:	d003      	beq.n	80033ec <RCC_PLL_GetFreqDomain_SYS+0x28>
 80033e4:	e00b      	b.n	80033fe <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80033e6:	4b0d      	ldr	r3, [pc, #52]	; (800341c <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80033e8:	607b      	str	r3, [r7, #4]
      break;
 80033ea:	e00b      	b.n	8003404 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80033ec:	f7ff ff54 	bl	8003298 <LL_RCC_PLL_GetPrediv>
 80033f0:	4603      	mov	r3, r0
 80033f2:	3301      	adds	r3, #1
 80033f4:	4a0a      	ldr	r2, [pc, #40]	; (8003420 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80033f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fa:	607b      	str	r3, [r7, #4]
      break;
 80033fc:	e002      	b.n	8003404 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80033fe:	4b07      	ldr	r3, [pc, #28]	; (800341c <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8003400:	607b      	str	r3, [r7, #4]
      break;
 8003402:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8003404:	f7ff ff3c 	bl	8003280 <LL_RCC_PLL_GetMultiplicator>
 8003408:	4603      	mov	r3, r0
 800340a:	0c9b      	lsrs	r3, r3, #18
 800340c:	3302      	adds	r3, #2
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	fb02 f303 	mul.w	r3, r2, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	003d0900 	.word	0x003d0900
 8003420:	00b71b00 	.word	0x00b71b00

08003424 <LL_USART_IsEnabled>:
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003438:	bf0c      	ite	eq
 800343a:	2301      	moveq	r3, #1
 800343c:	2300      	movne	r3, #0
 800343e:	b2db      	uxtb	r3, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr

0800344a <LL_USART_SetStopBitsLength>:
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	611a      	str	r2, [r3, #16]
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr

0800346e <LL_USART_SetHWFlowCtrl>:
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	615a      	str	r2, [r3, #20]
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr
	...

08003494 <LL_USART_SetBaudRate>:
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	009a      	lsls	r2, r3, #2
 80034aa:	441a      	add	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b4:	4a25      	ldr	r2, [pc, #148]	; (800354c <LL_USART_SetBaudRate+0xb8>)
 80034b6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	b29b      	uxth	r3, r3
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	b299      	uxth	r1, r3
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	009a      	lsls	r2, r3, #2
 80034cc:	441a      	add	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d6:	4b1d      	ldr	r3, [pc, #116]	; (800354c <LL_USART_SetBaudRate+0xb8>)
 80034d8:	fba3 0302 	umull	r0, r3, r3, r2
 80034dc:	095b      	lsrs	r3, r3, #5
 80034de:	2064      	movs	r0, #100	; 0x64
 80034e0:	fb00 f303 	mul.w	r3, r0, r3
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	3332      	adds	r3, #50	; 0x32
 80034ea:	4a18      	ldr	r2, [pc, #96]	; (800354c <LL_USART_SetBaudRate+0xb8>)
 80034ec:	fba2 2303 	umull	r2, r3, r2, r3
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	440b      	add	r3, r1
 80034fc:	b299      	uxth	r1, r3
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	009a      	lsls	r2, r3, #2
 8003508:	441a      	add	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003512:	4b0e      	ldr	r3, [pc, #56]	; (800354c <LL_USART_SetBaudRate+0xb8>)
 8003514:	fba3 0302 	umull	r0, r3, r3, r2
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	2064      	movs	r0, #100	; 0x64
 800351c:	fb00 f303 	mul.w	r3, r0, r3
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	3332      	adds	r3, #50	; 0x32
 8003526:	4a09      	ldr	r2, [pc, #36]	; (800354c <LL_USART_SetBaudRate+0xb8>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	b29b      	uxth	r3, r3
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	b29b      	uxth	r3, r3
 8003536:	440b      	add	r3, r1
 8003538:	b29b      	uxth	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	609a      	str	r2, [r3, #8]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	51eb851f 	.word	0x51eb851f

08003550 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff ff5e 	bl	8003424 <LL_USART_IsEnabled>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d153      	bne.n	8003616 <LL_USART_Init+0xc6>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003576:	f023 030c 	bic.w	r3, r3, #12
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	6851      	ldr	r1, [r2, #4]
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	68d2      	ldr	r2, [r2, #12]
 8003582:	4311      	orrs	r1, r2
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	6912      	ldr	r2, [r2, #16]
 8003588:	430a      	orrs	r2, r1
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff ff57 	bl	800344a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	4619      	mov	r1, r3
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff ff63 	bl	800346e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80035a8:	f107 0308 	add.w	r3, r7, #8
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff fe81 	bl	80032b4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a1a      	ldr	r2, [pc, #104]	; (8003620 <LL_USART_Init+0xd0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d102      	bne.n	80035c0 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	e01a      	b.n	80035f6 <LL_USART_Init+0xa6>
    }
    else if (USARTx == USART2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a18      	ldr	r2, [pc, #96]	; (8003624 <LL_USART_Init+0xd4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d102      	bne.n	80035ce <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	e013      	b.n	80035f6 <LL_USART_Init+0xa6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a15      	ldr	r2, [pc, #84]	; (8003628 <LL_USART_Init+0xd8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d102      	bne.n	80035dc <LL_USART_Init+0x8c>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	e00c      	b.n	80035f6 <LL_USART_Init+0xa6>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a13      	ldr	r2, [pc, #76]	; (800362c <LL_USART_Init+0xdc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d102      	bne.n	80035ea <LL_USART_Init+0x9a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	61bb      	str	r3, [r7, #24]
 80035e8:	e005      	b.n	80035f6 <LL_USART_Init+0xa6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a10      	ldr	r2, [pc, #64]	; (8003630 <LL_USART_Init+0xe0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d101      	bne.n	80035f6 <LL_USART_Init+0xa6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00c      	beq.n	8003616 <LL_USART_Init+0xc6>
        && (USART_InitStruct->BaudRate != 0U))
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <LL_USART_Init+0xc6>
    {
      status = SUCCESS;
 8003604:	2300      	movs	r3, #0
 8003606:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	69b9      	ldr	r1, [r7, #24]
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff ff3f 	bl	8003494 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003616:	7ffb      	ldrb	r3, [r7, #31]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3720      	adds	r7, #32
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40013800 	.word	0x40013800
 8003624:	40004400 	.word	0x40004400
 8003628:	40004800 	.word	0x40004800
 800362c:	40004c00 	.word	0x40004c00
 8003630:	40005000 	.word	0x40005000

08003634 <atoi>:
 8003634:	220a      	movs	r2, #10
 8003636:	2100      	movs	r1, #0
 8003638:	f000 b978 	b.w	800392c <strtol>

0800363c <__errno>:
 800363c:	4b01      	ldr	r3, [pc, #4]	; (8003644 <__errno+0x8>)
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	200000b0 	.word	0x200000b0

08003648 <__libc_init_array>:
 8003648:	b570      	push	{r4, r5, r6, lr}
 800364a:	2500      	movs	r5, #0
 800364c:	4e0c      	ldr	r6, [pc, #48]	; (8003680 <__libc_init_array+0x38>)
 800364e:	4c0d      	ldr	r4, [pc, #52]	; (8003684 <__libc_init_array+0x3c>)
 8003650:	1ba4      	subs	r4, r4, r6
 8003652:	10a4      	asrs	r4, r4, #2
 8003654:	42a5      	cmp	r5, r4
 8003656:	d109      	bne.n	800366c <__libc_init_array+0x24>
 8003658:	f001 fa1a 	bl	8004a90 <_init>
 800365c:	2500      	movs	r5, #0
 800365e:	4e0a      	ldr	r6, [pc, #40]	; (8003688 <__libc_init_array+0x40>)
 8003660:	4c0a      	ldr	r4, [pc, #40]	; (800368c <__libc_init_array+0x44>)
 8003662:	1ba4      	subs	r4, r4, r6
 8003664:	10a4      	asrs	r4, r4, #2
 8003666:	42a5      	cmp	r5, r4
 8003668:	d105      	bne.n	8003676 <__libc_init_array+0x2e>
 800366a:	bd70      	pop	{r4, r5, r6, pc}
 800366c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003670:	4798      	blx	r3
 8003672:	3501      	adds	r5, #1
 8003674:	e7ee      	b.n	8003654 <__libc_init_array+0xc>
 8003676:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800367a:	4798      	blx	r3
 800367c:	3501      	adds	r5, #1
 800367e:	e7f2      	b.n	8003666 <__libc_init_array+0x1e>
 8003680:	08004ef0 	.word	0x08004ef0
 8003684:	08004ef0 	.word	0x08004ef0
 8003688:	08004ef0 	.word	0x08004ef0
 800368c:	08004ef4 	.word	0x08004ef4

08003690 <memset>:
 8003690:	4603      	mov	r3, r0
 8003692:	4402      	add	r2, r0
 8003694:	4293      	cmp	r3, r2
 8003696:	d100      	bne.n	800369a <memset+0xa>
 8003698:	4770      	bx	lr
 800369a:	f803 1b01 	strb.w	r1, [r3], #1
 800369e:	e7f9      	b.n	8003694 <memset+0x4>

080036a0 <iprintf>:
 80036a0:	b40f      	push	{r0, r1, r2, r3}
 80036a2:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <iprintf+0x2c>)
 80036a4:	b513      	push	{r0, r1, r4, lr}
 80036a6:	681c      	ldr	r4, [r3, #0]
 80036a8:	b124      	cbz	r4, 80036b4 <iprintf+0x14>
 80036aa:	69a3      	ldr	r3, [r4, #24]
 80036ac:	b913      	cbnz	r3, 80036b4 <iprintf+0x14>
 80036ae:	4620      	mov	r0, r4
 80036b0:	f000 fb02 	bl	8003cb8 <__sinit>
 80036b4:	ab05      	add	r3, sp, #20
 80036b6:	9a04      	ldr	r2, [sp, #16]
 80036b8:	68a1      	ldr	r1, [r4, #8]
 80036ba:	4620      	mov	r0, r4
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	f000 fe1f 	bl	8004300 <_vfiprintf_r>
 80036c2:	b002      	add	sp, #8
 80036c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036c8:	b004      	add	sp, #16
 80036ca:	4770      	bx	lr
 80036cc:	200000b0 	.word	0x200000b0

080036d0 <_puts_r>:
 80036d0:	b570      	push	{r4, r5, r6, lr}
 80036d2:	460e      	mov	r6, r1
 80036d4:	4605      	mov	r5, r0
 80036d6:	b118      	cbz	r0, 80036e0 <_puts_r+0x10>
 80036d8:	6983      	ldr	r3, [r0, #24]
 80036da:	b90b      	cbnz	r3, 80036e0 <_puts_r+0x10>
 80036dc:	f000 faec 	bl	8003cb8 <__sinit>
 80036e0:	69ab      	ldr	r3, [r5, #24]
 80036e2:	68ac      	ldr	r4, [r5, #8]
 80036e4:	b913      	cbnz	r3, 80036ec <_puts_r+0x1c>
 80036e6:	4628      	mov	r0, r5
 80036e8:	f000 fae6 	bl	8003cb8 <__sinit>
 80036ec:	4b23      	ldr	r3, [pc, #140]	; (800377c <_puts_r+0xac>)
 80036ee:	429c      	cmp	r4, r3
 80036f0:	d117      	bne.n	8003722 <_puts_r+0x52>
 80036f2:	686c      	ldr	r4, [r5, #4]
 80036f4:	89a3      	ldrh	r3, [r4, #12]
 80036f6:	071b      	lsls	r3, r3, #28
 80036f8:	d51d      	bpl.n	8003736 <_puts_r+0x66>
 80036fa:	6923      	ldr	r3, [r4, #16]
 80036fc:	b1db      	cbz	r3, 8003736 <_puts_r+0x66>
 80036fe:	3e01      	subs	r6, #1
 8003700:	68a3      	ldr	r3, [r4, #8]
 8003702:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003706:	3b01      	subs	r3, #1
 8003708:	60a3      	str	r3, [r4, #8]
 800370a:	b9e9      	cbnz	r1, 8003748 <_puts_r+0x78>
 800370c:	2b00      	cmp	r3, #0
 800370e:	da2e      	bge.n	800376e <_puts_r+0x9e>
 8003710:	4622      	mov	r2, r4
 8003712:	210a      	movs	r1, #10
 8003714:	4628      	mov	r0, r5
 8003716:	f000 f91f 	bl	8003958 <__swbuf_r>
 800371a:	3001      	adds	r0, #1
 800371c:	d011      	beq.n	8003742 <_puts_r+0x72>
 800371e:	200a      	movs	r0, #10
 8003720:	e011      	b.n	8003746 <_puts_r+0x76>
 8003722:	4b17      	ldr	r3, [pc, #92]	; (8003780 <_puts_r+0xb0>)
 8003724:	429c      	cmp	r4, r3
 8003726:	d101      	bne.n	800372c <_puts_r+0x5c>
 8003728:	68ac      	ldr	r4, [r5, #8]
 800372a:	e7e3      	b.n	80036f4 <_puts_r+0x24>
 800372c:	4b15      	ldr	r3, [pc, #84]	; (8003784 <_puts_r+0xb4>)
 800372e:	429c      	cmp	r4, r3
 8003730:	bf08      	it	eq
 8003732:	68ec      	ldreq	r4, [r5, #12]
 8003734:	e7de      	b.n	80036f4 <_puts_r+0x24>
 8003736:	4621      	mov	r1, r4
 8003738:	4628      	mov	r0, r5
 800373a:	f000 f95f 	bl	80039fc <__swsetup_r>
 800373e:	2800      	cmp	r0, #0
 8003740:	d0dd      	beq.n	80036fe <_puts_r+0x2e>
 8003742:	f04f 30ff 	mov.w	r0, #4294967295
 8003746:	bd70      	pop	{r4, r5, r6, pc}
 8003748:	2b00      	cmp	r3, #0
 800374a:	da04      	bge.n	8003756 <_puts_r+0x86>
 800374c:	69a2      	ldr	r2, [r4, #24]
 800374e:	429a      	cmp	r2, r3
 8003750:	dc06      	bgt.n	8003760 <_puts_r+0x90>
 8003752:	290a      	cmp	r1, #10
 8003754:	d004      	beq.n	8003760 <_puts_r+0x90>
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	6022      	str	r2, [r4, #0]
 800375c:	7019      	strb	r1, [r3, #0]
 800375e:	e7cf      	b.n	8003700 <_puts_r+0x30>
 8003760:	4622      	mov	r2, r4
 8003762:	4628      	mov	r0, r5
 8003764:	f000 f8f8 	bl	8003958 <__swbuf_r>
 8003768:	3001      	adds	r0, #1
 800376a:	d1c9      	bne.n	8003700 <_puts_r+0x30>
 800376c:	e7e9      	b.n	8003742 <_puts_r+0x72>
 800376e:	200a      	movs	r0, #10
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	6022      	str	r2, [r4, #0]
 8003776:	7018      	strb	r0, [r3, #0]
 8003778:	e7e5      	b.n	8003746 <_puts_r+0x76>
 800377a:	bf00      	nop
 800377c:	08004d70 	.word	0x08004d70
 8003780:	08004d90 	.word	0x08004d90
 8003784:	08004d50 	.word	0x08004d50

08003788 <puts>:
 8003788:	4b02      	ldr	r3, [pc, #8]	; (8003794 <puts+0xc>)
 800378a:	4601      	mov	r1, r0
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	f7ff bf9f 	b.w	80036d0 <_puts_r>
 8003792:	bf00      	nop
 8003794:	200000b0 	.word	0x200000b0

08003798 <siprintf>:
 8003798:	b40e      	push	{r1, r2, r3}
 800379a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800379e:	b500      	push	{lr}
 80037a0:	b09c      	sub	sp, #112	; 0x70
 80037a2:	ab1d      	add	r3, sp, #116	; 0x74
 80037a4:	9002      	str	r0, [sp, #8]
 80037a6:	9006      	str	r0, [sp, #24]
 80037a8:	9107      	str	r1, [sp, #28]
 80037aa:	9104      	str	r1, [sp, #16]
 80037ac:	4808      	ldr	r0, [pc, #32]	; (80037d0 <siprintf+0x38>)
 80037ae:	4909      	ldr	r1, [pc, #36]	; (80037d4 <siprintf+0x3c>)
 80037b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80037b4:	9105      	str	r1, [sp, #20]
 80037b6:	6800      	ldr	r0, [r0, #0]
 80037b8:	a902      	add	r1, sp, #8
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	f000 fc80 	bl	80040c0 <_svfiprintf_r>
 80037c0:	2200      	movs	r2, #0
 80037c2:	9b02      	ldr	r3, [sp, #8]
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	b01c      	add	sp, #112	; 0x70
 80037c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80037cc:	b003      	add	sp, #12
 80037ce:	4770      	bx	lr
 80037d0:	200000b0 	.word	0x200000b0
 80037d4:	ffff0208 	.word	0xffff0208

080037d8 <strchr>:
 80037d8:	b2c9      	uxtb	r1, r1
 80037da:	4603      	mov	r3, r0
 80037dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037e0:	b11a      	cbz	r2, 80037ea <strchr+0x12>
 80037e2:	428a      	cmp	r2, r1
 80037e4:	d1f9      	bne.n	80037da <strchr+0x2>
 80037e6:	4618      	mov	r0, r3
 80037e8:	4770      	bx	lr
 80037ea:	2900      	cmp	r1, #0
 80037ec:	bf18      	it	ne
 80037ee:	2300      	movne	r3, #0
 80037f0:	e7f9      	b.n	80037e6 <strchr+0xe>

080037f2 <strcpy>:
 80037f2:	4603      	mov	r3, r0
 80037f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037f8:	f803 2b01 	strb.w	r2, [r3], #1
 80037fc:	2a00      	cmp	r2, #0
 80037fe:	d1f9      	bne.n	80037f4 <strcpy+0x2>
 8003800:	4770      	bx	lr

08003802 <strstr>:
 8003802:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003804:	7803      	ldrb	r3, [r0, #0]
 8003806:	b17b      	cbz	r3, 8003828 <strstr+0x26>
 8003808:	4604      	mov	r4, r0
 800380a:	7823      	ldrb	r3, [r4, #0]
 800380c:	4620      	mov	r0, r4
 800380e:	1c66      	adds	r6, r4, #1
 8003810:	b17b      	cbz	r3, 8003832 <strstr+0x30>
 8003812:	1e4a      	subs	r2, r1, #1
 8003814:	1e63      	subs	r3, r4, #1
 8003816:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800381a:	b14d      	cbz	r5, 8003830 <strstr+0x2e>
 800381c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003820:	4634      	mov	r4, r6
 8003822:	42af      	cmp	r7, r5
 8003824:	d0f7      	beq.n	8003816 <strstr+0x14>
 8003826:	e7f0      	b.n	800380a <strstr+0x8>
 8003828:	780b      	ldrb	r3, [r1, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	bf18      	it	ne
 800382e:	2000      	movne	r0, #0
 8003830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003832:	4618      	mov	r0, r3
 8003834:	e7fc      	b.n	8003830 <strstr+0x2e>

08003836 <_strtol_l.isra.0>:
 8003836:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800383a:	4680      	mov	r8, r0
 800383c:	4689      	mov	r9, r1
 800383e:	4692      	mov	sl, r2
 8003840:	461e      	mov	r6, r3
 8003842:	460f      	mov	r7, r1
 8003844:	463d      	mov	r5, r7
 8003846:	9808      	ldr	r0, [sp, #32]
 8003848:	f815 4b01 	ldrb.w	r4, [r5], #1
 800384c:	f000 fabe 	bl	8003dcc <__locale_ctype_ptr_l>
 8003850:	4420      	add	r0, r4
 8003852:	7843      	ldrb	r3, [r0, #1]
 8003854:	f013 0308 	ands.w	r3, r3, #8
 8003858:	d132      	bne.n	80038c0 <_strtol_l.isra.0+0x8a>
 800385a:	2c2d      	cmp	r4, #45	; 0x2d
 800385c:	d132      	bne.n	80038c4 <_strtol_l.isra.0+0x8e>
 800385e:	2201      	movs	r2, #1
 8003860:	787c      	ldrb	r4, [r7, #1]
 8003862:	1cbd      	adds	r5, r7, #2
 8003864:	2e00      	cmp	r6, #0
 8003866:	d05d      	beq.n	8003924 <_strtol_l.isra.0+0xee>
 8003868:	2e10      	cmp	r6, #16
 800386a:	d109      	bne.n	8003880 <_strtol_l.isra.0+0x4a>
 800386c:	2c30      	cmp	r4, #48	; 0x30
 800386e:	d107      	bne.n	8003880 <_strtol_l.isra.0+0x4a>
 8003870:	782b      	ldrb	r3, [r5, #0]
 8003872:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003876:	2b58      	cmp	r3, #88	; 0x58
 8003878:	d14f      	bne.n	800391a <_strtol_l.isra.0+0xe4>
 800387a:	2610      	movs	r6, #16
 800387c:	786c      	ldrb	r4, [r5, #1]
 800387e:	3502      	adds	r5, #2
 8003880:	2a00      	cmp	r2, #0
 8003882:	bf14      	ite	ne
 8003884:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003888:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800388c:	2700      	movs	r7, #0
 800388e:	fbb1 fcf6 	udiv	ip, r1, r6
 8003892:	4638      	mov	r0, r7
 8003894:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003898:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800389c:	2b09      	cmp	r3, #9
 800389e:	d817      	bhi.n	80038d0 <_strtol_l.isra.0+0x9a>
 80038a0:	461c      	mov	r4, r3
 80038a2:	42a6      	cmp	r6, r4
 80038a4:	dd23      	ble.n	80038ee <_strtol_l.isra.0+0xb8>
 80038a6:	1c7b      	adds	r3, r7, #1
 80038a8:	d007      	beq.n	80038ba <_strtol_l.isra.0+0x84>
 80038aa:	4584      	cmp	ip, r0
 80038ac:	d31c      	bcc.n	80038e8 <_strtol_l.isra.0+0xb2>
 80038ae:	d101      	bne.n	80038b4 <_strtol_l.isra.0+0x7e>
 80038b0:	45a6      	cmp	lr, r4
 80038b2:	db19      	blt.n	80038e8 <_strtol_l.isra.0+0xb2>
 80038b4:	2701      	movs	r7, #1
 80038b6:	fb00 4006 	mla	r0, r0, r6, r4
 80038ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80038be:	e7eb      	b.n	8003898 <_strtol_l.isra.0+0x62>
 80038c0:	462f      	mov	r7, r5
 80038c2:	e7bf      	b.n	8003844 <_strtol_l.isra.0+0xe>
 80038c4:	2c2b      	cmp	r4, #43	; 0x2b
 80038c6:	bf04      	itt	eq
 80038c8:	1cbd      	addeq	r5, r7, #2
 80038ca:	787c      	ldrbeq	r4, [r7, #1]
 80038cc:	461a      	mov	r2, r3
 80038ce:	e7c9      	b.n	8003864 <_strtol_l.isra.0+0x2e>
 80038d0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80038d4:	2b19      	cmp	r3, #25
 80038d6:	d801      	bhi.n	80038dc <_strtol_l.isra.0+0xa6>
 80038d8:	3c37      	subs	r4, #55	; 0x37
 80038da:	e7e2      	b.n	80038a2 <_strtol_l.isra.0+0x6c>
 80038dc:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80038e0:	2b19      	cmp	r3, #25
 80038e2:	d804      	bhi.n	80038ee <_strtol_l.isra.0+0xb8>
 80038e4:	3c57      	subs	r4, #87	; 0x57
 80038e6:	e7dc      	b.n	80038a2 <_strtol_l.isra.0+0x6c>
 80038e8:	f04f 37ff 	mov.w	r7, #4294967295
 80038ec:	e7e5      	b.n	80038ba <_strtol_l.isra.0+0x84>
 80038ee:	1c7b      	adds	r3, r7, #1
 80038f0:	d108      	bne.n	8003904 <_strtol_l.isra.0+0xce>
 80038f2:	2322      	movs	r3, #34	; 0x22
 80038f4:	4608      	mov	r0, r1
 80038f6:	f8c8 3000 	str.w	r3, [r8]
 80038fa:	f1ba 0f00 	cmp.w	sl, #0
 80038fe:	d107      	bne.n	8003910 <_strtol_l.isra.0+0xda>
 8003900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003904:	b102      	cbz	r2, 8003908 <_strtol_l.isra.0+0xd2>
 8003906:	4240      	negs	r0, r0
 8003908:	f1ba 0f00 	cmp.w	sl, #0
 800390c:	d0f8      	beq.n	8003900 <_strtol_l.isra.0+0xca>
 800390e:	b10f      	cbz	r7, 8003914 <_strtol_l.isra.0+0xde>
 8003910:	f105 39ff 	add.w	r9, r5, #4294967295
 8003914:	f8ca 9000 	str.w	r9, [sl]
 8003918:	e7f2      	b.n	8003900 <_strtol_l.isra.0+0xca>
 800391a:	2430      	movs	r4, #48	; 0x30
 800391c:	2e00      	cmp	r6, #0
 800391e:	d1af      	bne.n	8003880 <_strtol_l.isra.0+0x4a>
 8003920:	2608      	movs	r6, #8
 8003922:	e7ad      	b.n	8003880 <_strtol_l.isra.0+0x4a>
 8003924:	2c30      	cmp	r4, #48	; 0x30
 8003926:	d0a3      	beq.n	8003870 <_strtol_l.isra.0+0x3a>
 8003928:	260a      	movs	r6, #10
 800392a:	e7a9      	b.n	8003880 <_strtol_l.isra.0+0x4a>

0800392c <strtol>:
 800392c:	4b08      	ldr	r3, [pc, #32]	; (8003950 <strtol+0x24>)
 800392e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003930:	681c      	ldr	r4, [r3, #0]
 8003932:	4d08      	ldr	r5, [pc, #32]	; (8003954 <strtol+0x28>)
 8003934:	6a23      	ldr	r3, [r4, #32]
 8003936:	2b00      	cmp	r3, #0
 8003938:	bf08      	it	eq
 800393a:	462b      	moveq	r3, r5
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	4613      	mov	r3, r2
 8003940:	460a      	mov	r2, r1
 8003942:	4601      	mov	r1, r0
 8003944:	4620      	mov	r0, r4
 8003946:	f7ff ff76 	bl	8003836 <_strtol_l.isra.0>
 800394a:	b003      	add	sp, #12
 800394c:	bd30      	pop	{r4, r5, pc}
 800394e:	bf00      	nop
 8003950:	200000b0 	.word	0x200000b0
 8003954:	20000114 	.word	0x20000114

08003958 <__swbuf_r>:
 8003958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395a:	460e      	mov	r6, r1
 800395c:	4614      	mov	r4, r2
 800395e:	4605      	mov	r5, r0
 8003960:	b118      	cbz	r0, 800396a <__swbuf_r+0x12>
 8003962:	6983      	ldr	r3, [r0, #24]
 8003964:	b90b      	cbnz	r3, 800396a <__swbuf_r+0x12>
 8003966:	f000 f9a7 	bl	8003cb8 <__sinit>
 800396a:	4b21      	ldr	r3, [pc, #132]	; (80039f0 <__swbuf_r+0x98>)
 800396c:	429c      	cmp	r4, r3
 800396e:	d12a      	bne.n	80039c6 <__swbuf_r+0x6e>
 8003970:	686c      	ldr	r4, [r5, #4]
 8003972:	69a3      	ldr	r3, [r4, #24]
 8003974:	60a3      	str	r3, [r4, #8]
 8003976:	89a3      	ldrh	r3, [r4, #12]
 8003978:	071a      	lsls	r2, r3, #28
 800397a:	d52e      	bpl.n	80039da <__swbuf_r+0x82>
 800397c:	6923      	ldr	r3, [r4, #16]
 800397e:	b363      	cbz	r3, 80039da <__swbuf_r+0x82>
 8003980:	6923      	ldr	r3, [r4, #16]
 8003982:	6820      	ldr	r0, [r4, #0]
 8003984:	b2f6      	uxtb	r6, r6
 8003986:	1ac0      	subs	r0, r0, r3
 8003988:	6963      	ldr	r3, [r4, #20]
 800398a:	4637      	mov	r7, r6
 800398c:	4283      	cmp	r3, r0
 800398e:	dc04      	bgt.n	800399a <__swbuf_r+0x42>
 8003990:	4621      	mov	r1, r4
 8003992:	4628      	mov	r0, r5
 8003994:	f000 f926 	bl	8003be4 <_fflush_r>
 8003998:	bb28      	cbnz	r0, 80039e6 <__swbuf_r+0x8e>
 800399a:	68a3      	ldr	r3, [r4, #8]
 800399c:	3001      	adds	r0, #1
 800399e:	3b01      	subs	r3, #1
 80039a0:	60a3      	str	r3, [r4, #8]
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	6022      	str	r2, [r4, #0]
 80039a8:	701e      	strb	r6, [r3, #0]
 80039aa:	6963      	ldr	r3, [r4, #20]
 80039ac:	4283      	cmp	r3, r0
 80039ae:	d004      	beq.n	80039ba <__swbuf_r+0x62>
 80039b0:	89a3      	ldrh	r3, [r4, #12]
 80039b2:	07db      	lsls	r3, r3, #31
 80039b4:	d519      	bpl.n	80039ea <__swbuf_r+0x92>
 80039b6:	2e0a      	cmp	r6, #10
 80039b8:	d117      	bne.n	80039ea <__swbuf_r+0x92>
 80039ba:	4621      	mov	r1, r4
 80039bc:	4628      	mov	r0, r5
 80039be:	f000 f911 	bl	8003be4 <_fflush_r>
 80039c2:	b190      	cbz	r0, 80039ea <__swbuf_r+0x92>
 80039c4:	e00f      	b.n	80039e6 <__swbuf_r+0x8e>
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <__swbuf_r+0x9c>)
 80039c8:	429c      	cmp	r4, r3
 80039ca:	d101      	bne.n	80039d0 <__swbuf_r+0x78>
 80039cc:	68ac      	ldr	r4, [r5, #8]
 80039ce:	e7d0      	b.n	8003972 <__swbuf_r+0x1a>
 80039d0:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <__swbuf_r+0xa0>)
 80039d2:	429c      	cmp	r4, r3
 80039d4:	bf08      	it	eq
 80039d6:	68ec      	ldreq	r4, [r5, #12]
 80039d8:	e7cb      	b.n	8003972 <__swbuf_r+0x1a>
 80039da:	4621      	mov	r1, r4
 80039dc:	4628      	mov	r0, r5
 80039de:	f000 f80d 	bl	80039fc <__swsetup_r>
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d0cc      	beq.n	8003980 <__swbuf_r+0x28>
 80039e6:	f04f 37ff 	mov.w	r7, #4294967295
 80039ea:	4638      	mov	r0, r7
 80039ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039ee:	bf00      	nop
 80039f0:	08004d70 	.word	0x08004d70
 80039f4:	08004d90 	.word	0x08004d90
 80039f8:	08004d50 	.word	0x08004d50

080039fc <__swsetup_r>:
 80039fc:	4b32      	ldr	r3, [pc, #200]	; (8003ac8 <__swsetup_r+0xcc>)
 80039fe:	b570      	push	{r4, r5, r6, lr}
 8003a00:	681d      	ldr	r5, [r3, #0]
 8003a02:	4606      	mov	r6, r0
 8003a04:	460c      	mov	r4, r1
 8003a06:	b125      	cbz	r5, 8003a12 <__swsetup_r+0x16>
 8003a08:	69ab      	ldr	r3, [r5, #24]
 8003a0a:	b913      	cbnz	r3, 8003a12 <__swsetup_r+0x16>
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	f000 f953 	bl	8003cb8 <__sinit>
 8003a12:	4b2e      	ldr	r3, [pc, #184]	; (8003acc <__swsetup_r+0xd0>)
 8003a14:	429c      	cmp	r4, r3
 8003a16:	d10f      	bne.n	8003a38 <__swsetup_r+0x3c>
 8003a18:	686c      	ldr	r4, [r5, #4]
 8003a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	0715      	lsls	r5, r2, #28
 8003a22:	d42c      	bmi.n	8003a7e <__swsetup_r+0x82>
 8003a24:	06d0      	lsls	r0, r2, #27
 8003a26:	d411      	bmi.n	8003a4c <__swsetup_r+0x50>
 8003a28:	2209      	movs	r2, #9
 8003a2a:	6032      	str	r2, [r6, #0]
 8003a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a30:	81a3      	strh	r3, [r4, #12]
 8003a32:	f04f 30ff 	mov.w	r0, #4294967295
 8003a36:	e03e      	b.n	8003ab6 <__swsetup_r+0xba>
 8003a38:	4b25      	ldr	r3, [pc, #148]	; (8003ad0 <__swsetup_r+0xd4>)
 8003a3a:	429c      	cmp	r4, r3
 8003a3c:	d101      	bne.n	8003a42 <__swsetup_r+0x46>
 8003a3e:	68ac      	ldr	r4, [r5, #8]
 8003a40:	e7eb      	b.n	8003a1a <__swsetup_r+0x1e>
 8003a42:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <__swsetup_r+0xd8>)
 8003a44:	429c      	cmp	r4, r3
 8003a46:	bf08      	it	eq
 8003a48:	68ec      	ldreq	r4, [r5, #12]
 8003a4a:	e7e6      	b.n	8003a1a <__swsetup_r+0x1e>
 8003a4c:	0751      	lsls	r1, r2, #29
 8003a4e:	d512      	bpl.n	8003a76 <__swsetup_r+0x7a>
 8003a50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a52:	b141      	cbz	r1, 8003a66 <__swsetup_r+0x6a>
 8003a54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a58:	4299      	cmp	r1, r3
 8003a5a:	d002      	beq.n	8003a62 <__swsetup_r+0x66>
 8003a5c:	4630      	mov	r0, r6
 8003a5e:	f000 fa2f 	bl	8003ec0 <_free_r>
 8003a62:	2300      	movs	r3, #0
 8003a64:	6363      	str	r3, [r4, #52]	; 0x34
 8003a66:	89a3      	ldrh	r3, [r4, #12]
 8003a68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a6c:	81a3      	strh	r3, [r4, #12]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	6063      	str	r3, [r4, #4]
 8003a72:	6923      	ldr	r3, [r4, #16]
 8003a74:	6023      	str	r3, [r4, #0]
 8003a76:	89a3      	ldrh	r3, [r4, #12]
 8003a78:	f043 0308 	orr.w	r3, r3, #8
 8003a7c:	81a3      	strh	r3, [r4, #12]
 8003a7e:	6923      	ldr	r3, [r4, #16]
 8003a80:	b94b      	cbnz	r3, 8003a96 <__swsetup_r+0x9a>
 8003a82:	89a3      	ldrh	r3, [r4, #12]
 8003a84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a8c:	d003      	beq.n	8003a96 <__swsetup_r+0x9a>
 8003a8e:	4621      	mov	r1, r4
 8003a90:	4630      	mov	r0, r6
 8003a92:	f000 f9c3 	bl	8003e1c <__smakebuf_r>
 8003a96:	89a2      	ldrh	r2, [r4, #12]
 8003a98:	f012 0301 	ands.w	r3, r2, #1
 8003a9c:	d00c      	beq.n	8003ab8 <__swsetup_r+0xbc>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60a3      	str	r3, [r4, #8]
 8003aa2:	6963      	ldr	r3, [r4, #20]
 8003aa4:	425b      	negs	r3, r3
 8003aa6:	61a3      	str	r3, [r4, #24]
 8003aa8:	6923      	ldr	r3, [r4, #16]
 8003aaa:	b953      	cbnz	r3, 8003ac2 <__swsetup_r+0xc6>
 8003aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ab0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003ab4:	d1ba      	bne.n	8003a2c <__swsetup_r+0x30>
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}
 8003ab8:	0792      	lsls	r2, r2, #30
 8003aba:	bf58      	it	pl
 8003abc:	6963      	ldrpl	r3, [r4, #20]
 8003abe:	60a3      	str	r3, [r4, #8]
 8003ac0:	e7f2      	b.n	8003aa8 <__swsetup_r+0xac>
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	e7f7      	b.n	8003ab6 <__swsetup_r+0xba>
 8003ac6:	bf00      	nop
 8003ac8:	200000b0 	.word	0x200000b0
 8003acc:	08004d70 	.word	0x08004d70
 8003ad0:	08004d90 	.word	0x08004d90
 8003ad4:	08004d50 	.word	0x08004d50

08003ad8 <__sflush_r>:
 8003ad8:	898a      	ldrh	r2, [r1, #12]
 8003ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ade:	4605      	mov	r5, r0
 8003ae0:	0710      	lsls	r0, r2, #28
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	d458      	bmi.n	8003b98 <__sflush_r+0xc0>
 8003ae6:	684b      	ldr	r3, [r1, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	dc05      	bgt.n	8003af8 <__sflush_r+0x20>
 8003aec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	dc02      	bgt.n	8003af8 <__sflush_r+0x20>
 8003af2:	2000      	movs	r0, #0
 8003af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003af8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003afa:	2e00      	cmp	r6, #0
 8003afc:	d0f9      	beq.n	8003af2 <__sflush_r+0x1a>
 8003afe:	2300      	movs	r3, #0
 8003b00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b04:	682f      	ldr	r7, [r5, #0]
 8003b06:	6a21      	ldr	r1, [r4, #32]
 8003b08:	602b      	str	r3, [r5, #0]
 8003b0a:	d032      	beq.n	8003b72 <__sflush_r+0x9a>
 8003b0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b0e:	89a3      	ldrh	r3, [r4, #12]
 8003b10:	075a      	lsls	r2, r3, #29
 8003b12:	d505      	bpl.n	8003b20 <__sflush_r+0x48>
 8003b14:	6863      	ldr	r3, [r4, #4]
 8003b16:	1ac0      	subs	r0, r0, r3
 8003b18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b1a:	b10b      	cbz	r3, 8003b20 <__sflush_r+0x48>
 8003b1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b1e:	1ac0      	subs	r0, r0, r3
 8003b20:	2300      	movs	r3, #0
 8003b22:	4602      	mov	r2, r0
 8003b24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b26:	6a21      	ldr	r1, [r4, #32]
 8003b28:	4628      	mov	r0, r5
 8003b2a:	47b0      	blx	r6
 8003b2c:	1c43      	adds	r3, r0, #1
 8003b2e:	89a3      	ldrh	r3, [r4, #12]
 8003b30:	d106      	bne.n	8003b40 <__sflush_r+0x68>
 8003b32:	6829      	ldr	r1, [r5, #0]
 8003b34:	291d      	cmp	r1, #29
 8003b36:	d848      	bhi.n	8003bca <__sflush_r+0xf2>
 8003b38:	4a29      	ldr	r2, [pc, #164]	; (8003be0 <__sflush_r+0x108>)
 8003b3a:	40ca      	lsrs	r2, r1
 8003b3c:	07d6      	lsls	r6, r2, #31
 8003b3e:	d544      	bpl.n	8003bca <__sflush_r+0xf2>
 8003b40:	2200      	movs	r2, #0
 8003b42:	6062      	str	r2, [r4, #4]
 8003b44:	6922      	ldr	r2, [r4, #16]
 8003b46:	04d9      	lsls	r1, r3, #19
 8003b48:	6022      	str	r2, [r4, #0]
 8003b4a:	d504      	bpl.n	8003b56 <__sflush_r+0x7e>
 8003b4c:	1c42      	adds	r2, r0, #1
 8003b4e:	d101      	bne.n	8003b54 <__sflush_r+0x7c>
 8003b50:	682b      	ldr	r3, [r5, #0]
 8003b52:	b903      	cbnz	r3, 8003b56 <__sflush_r+0x7e>
 8003b54:	6560      	str	r0, [r4, #84]	; 0x54
 8003b56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b58:	602f      	str	r7, [r5, #0]
 8003b5a:	2900      	cmp	r1, #0
 8003b5c:	d0c9      	beq.n	8003af2 <__sflush_r+0x1a>
 8003b5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b62:	4299      	cmp	r1, r3
 8003b64:	d002      	beq.n	8003b6c <__sflush_r+0x94>
 8003b66:	4628      	mov	r0, r5
 8003b68:	f000 f9aa 	bl	8003ec0 <_free_r>
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	6360      	str	r0, [r4, #52]	; 0x34
 8003b70:	e7c0      	b.n	8003af4 <__sflush_r+0x1c>
 8003b72:	2301      	movs	r3, #1
 8003b74:	4628      	mov	r0, r5
 8003b76:	47b0      	blx	r6
 8003b78:	1c41      	adds	r1, r0, #1
 8003b7a:	d1c8      	bne.n	8003b0e <__sflush_r+0x36>
 8003b7c:	682b      	ldr	r3, [r5, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0c5      	beq.n	8003b0e <__sflush_r+0x36>
 8003b82:	2b1d      	cmp	r3, #29
 8003b84:	d001      	beq.n	8003b8a <__sflush_r+0xb2>
 8003b86:	2b16      	cmp	r3, #22
 8003b88:	d101      	bne.n	8003b8e <__sflush_r+0xb6>
 8003b8a:	602f      	str	r7, [r5, #0]
 8003b8c:	e7b1      	b.n	8003af2 <__sflush_r+0x1a>
 8003b8e:	89a3      	ldrh	r3, [r4, #12]
 8003b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b94:	81a3      	strh	r3, [r4, #12]
 8003b96:	e7ad      	b.n	8003af4 <__sflush_r+0x1c>
 8003b98:	690f      	ldr	r7, [r1, #16]
 8003b9a:	2f00      	cmp	r7, #0
 8003b9c:	d0a9      	beq.n	8003af2 <__sflush_r+0x1a>
 8003b9e:	0793      	lsls	r3, r2, #30
 8003ba0:	bf18      	it	ne
 8003ba2:	2300      	movne	r3, #0
 8003ba4:	680e      	ldr	r6, [r1, #0]
 8003ba6:	bf08      	it	eq
 8003ba8:	694b      	ldreq	r3, [r1, #20]
 8003baa:	eba6 0807 	sub.w	r8, r6, r7
 8003bae:	600f      	str	r7, [r1, #0]
 8003bb0:	608b      	str	r3, [r1, #8]
 8003bb2:	f1b8 0f00 	cmp.w	r8, #0
 8003bb6:	dd9c      	ble.n	8003af2 <__sflush_r+0x1a>
 8003bb8:	4643      	mov	r3, r8
 8003bba:	463a      	mov	r2, r7
 8003bbc:	6a21      	ldr	r1, [r4, #32]
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003bc2:	47b0      	blx	r6
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	dc06      	bgt.n	8003bd6 <__sflush_r+0xfe>
 8003bc8:	89a3      	ldrh	r3, [r4, #12]
 8003bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bce:	81a3      	strh	r3, [r4, #12]
 8003bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd4:	e78e      	b.n	8003af4 <__sflush_r+0x1c>
 8003bd6:	4407      	add	r7, r0
 8003bd8:	eba8 0800 	sub.w	r8, r8, r0
 8003bdc:	e7e9      	b.n	8003bb2 <__sflush_r+0xda>
 8003bde:	bf00      	nop
 8003be0:	20400001 	.word	0x20400001

08003be4 <_fflush_r>:
 8003be4:	b538      	push	{r3, r4, r5, lr}
 8003be6:	690b      	ldr	r3, [r1, #16]
 8003be8:	4605      	mov	r5, r0
 8003bea:	460c      	mov	r4, r1
 8003bec:	b1db      	cbz	r3, 8003c26 <_fflush_r+0x42>
 8003bee:	b118      	cbz	r0, 8003bf8 <_fflush_r+0x14>
 8003bf0:	6983      	ldr	r3, [r0, #24]
 8003bf2:	b90b      	cbnz	r3, 8003bf8 <_fflush_r+0x14>
 8003bf4:	f000 f860 	bl	8003cb8 <__sinit>
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <_fflush_r+0x48>)
 8003bfa:	429c      	cmp	r4, r3
 8003bfc:	d109      	bne.n	8003c12 <_fflush_r+0x2e>
 8003bfe:	686c      	ldr	r4, [r5, #4]
 8003c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c04:	b17b      	cbz	r3, 8003c26 <_fflush_r+0x42>
 8003c06:	4621      	mov	r1, r4
 8003c08:	4628      	mov	r0, r5
 8003c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c0e:	f7ff bf63 	b.w	8003ad8 <__sflush_r>
 8003c12:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <_fflush_r+0x4c>)
 8003c14:	429c      	cmp	r4, r3
 8003c16:	d101      	bne.n	8003c1c <_fflush_r+0x38>
 8003c18:	68ac      	ldr	r4, [r5, #8]
 8003c1a:	e7f1      	b.n	8003c00 <_fflush_r+0x1c>
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <_fflush_r+0x50>)
 8003c1e:	429c      	cmp	r4, r3
 8003c20:	bf08      	it	eq
 8003c22:	68ec      	ldreq	r4, [r5, #12]
 8003c24:	e7ec      	b.n	8003c00 <_fflush_r+0x1c>
 8003c26:	2000      	movs	r0, #0
 8003c28:	bd38      	pop	{r3, r4, r5, pc}
 8003c2a:	bf00      	nop
 8003c2c:	08004d70 	.word	0x08004d70
 8003c30:	08004d90 	.word	0x08004d90
 8003c34:	08004d50 	.word	0x08004d50

08003c38 <std>:
 8003c38:	2300      	movs	r3, #0
 8003c3a:	b510      	push	{r4, lr}
 8003c3c:	4604      	mov	r4, r0
 8003c3e:	e9c0 3300 	strd	r3, r3, [r0]
 8003c42:	6083      	str	r3, [r0, #8]
 8003c44:	8181      	strh	r1, [r0, #12]
 8003c46:	6643      	str	r3, [r0, #100]	; 0x64
 8003c48:	81c2      	strh	r2, [r0, #14]
 8003c4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c4e:	6183      	str	r3, [r0, #24]
 8003c50:	4619      	mov	r1, r3
 8003c52:	2208      	movs	r2, #8
 8003c54:	305c      	adds	r0, #92	; 0x5c
 8003c56:	f7ff fd1b 	bl	8003690 <memset>
 8003c5a:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <std+0x38>)
 8003c5c:	6224      	str	r4, [r4, #32]
 8003c5e:	6263      	str	r3, [r4, #36]	; 0x24
 8003c60:	4b04      	ldr	r3, [pc, #16]	; (8003c74 <std+0x3c>)
 8003c62:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c64:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <std+0x40>)
 8003c66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <std+0x44>)
 8003c6a:	6323      	str	r3, [r4, #48]	; 0x30
 8003c6c:	bd10      	pop	{r4, pc}
 8003c6e:	bf00      	nop
 8003c70:	0800485d 	.word	0x0800485d
 8003c74:	0800487f 	.word	0x0800487f
 8003c78:	080048b7 	.word	0x080048b7
 8003c7c:	080048db 	.word	0x080048db

08003c80 <_cleanup_r>:
 8003c80:	4901      	ldr	r1, [pc, #4]	; (8003c88 <_cleanup_r+0x8>)
 8003c82:	f000 b885 	b.w	8003d90 <_fwalk_reent>
 8003c86:	bf00      	nop
 8003c88:	08003be5 	.word	0x08003be5

08003c8c <__sfmoreglue>:
 8003c8c:	b570      	push	{r4, r5, r6, lr}
 8003c8e:	2568      	movs	r5, #104	; 0x68
 8003c90:	1e4a      	subs	r2, r1, #1
 8003c92:	4355      	muls	r5, r2
 8003c94:	460e      	mov	r6, r1
 8003c96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c9a:	f000 f95d 	bl	8003f58 <_malloc_r>
 8003c9e:	4604      	mov	r4, r0
 8003ca0:	b140      	cbz	r0, 8003cb4 <__sfmoreglue+0x28>
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	e9c0 1600 	strd	r1, r6, [r0]
 8003ca8:	300c      	adds	r0, #12
 8003caa:	60a0      	str	r0, [r4, #8]
 8003cac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003cb0:	f7ff fcee 	bl	8003690 <memset>
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	bd70      	pop	{r4, r5, r6, pc}

08003cb8 <__sinit>:
 8003cb8:	6983      	ldr	r3, [r0, #24]
 8003cba:	b510      	push	{r4, lr}
 8003cbc:	4604      	mov	r4, r0
 8003cbe:	bb33      	cbnz	r3, 8003d0e <__sinit+0x56>
 8003cc0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003cc4:	6503      	str	r3, [r0, #80]	; 0x50
 8003cc6:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <__sinit+0x58>)
 8003cc8:	4a12      	ldr	r2, [pc, #72]	; (8003d14 <__sinit+0x5c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6282      	str	r2, [r0, #40]	; 0x28
 8003cce:	4298      	cmp	r0, r3
 8003cd0:	bf04      	itt	eq
 8003cd2:	2301      	moveq	r3, #1
 8003cd4:	6183      	streq	r3, [r0, #24]
 8003cd6:	f000 f81f 	bl	8003d18 <__sfp>
 8003cda:	6060      	str	r0, [r4, #4]
 8003cdc:	4620      	mov	r0, r4
 8003cde:	f000 f81b 	bl	8003d18 <__sfp>
 8003ce2:	60a0      	str	r0, [r4, #8]
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f000 f817 	bl	8003d18 <__sfp>
 8003cea:	2200      	movs	r2, #0
 8003cec:	60e0      	str	r0, [r4, #12]
 8003cee:	2104      	movs	r1, #4
 8003cf0:	6860      	ldr	r0, [r4, #4]
 8003cf2:	f7ff ffa1 	bl	8003c38 <std>
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	2109      	movs	r1, #9
 8003cfa:	68a0      	ldr	r0, [r4, #8]
 8003cfc:	f7ff ff9c 	bl	8003c38 <std>
 8003d00:	2202      	movs	r2, #2
 8003d02:	2112      	movs	r1, #18
 8003d04:	68e0      	ldr	r0, [r4, #12]
 8003d06:	f7ff ff97 	bl	8003c38 <std>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	61a3      	str	r3, [r4, #24]
 8003d0e:	bd10      	pop	{r4, pc}
 8003d10:	08004d4c 	.word	0x08004d4c
 8003d14:	08003c81 	.word	0x08003c81

08003d18 <__sfp>:
 8003d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1a:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <__sfp+0x70>)
 8003d1c:	4607      	mov	r7, r0
 8003d1e:	681e      	ldr	r6, [r3, #0]
 8003d20:	69b3      	ldr	r3, [r6, #24]
 8003d22:	b913      	cbnz	r3, 8003d2a <__sfp+0x12>
 8003d24:	4630      	mov	r0, r6
 8003d26:	f7ff ffc7 	bl	8003cb8 <__sinit>
 8003d2a:	3648      	adds	r6, #72	; 0x48
 8003d2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	d503      	bpl.n	8003d3c <__sfp+0x24>
 8003d34:	6833      	ldr	r3, [r6, #0]
 8003d36:	b133      	cbz	r3, 8003d46 <__sfp+0x2e>
 8003d38:	6836      	ldr	r6, [r6, #0]
 8003d3a:	e7f7      	b.n	8003d2c <__sfp+0x14>
 8003d3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003d40:	b16d      	cbz	r5, 8003d5e <__sfp+0x46>
 8003d42:	3468      	adds	r4, #104	; 0x68
 8003d44:	e7f4      	b.n	8003d30 <__sfp+0x18>
 8003d46:	2104      	movs	r1, #4
 8003d48:	4638      	mov	r0, r7
 8003d4a:	f7ff ff9f 	bl	8003c8c <__sfmoreglue>
 8003d4e:	6030      	str	r0, [r6, #0]
 8003d50:	2800      	cmp	r0, #0
 8003d52:	d1f1      	bne.n	8003d38 <__sfp+0x20>
 8003d54:	230c      	movs	r3, #12
 8003d56:	4604      	mov	r4, r0
 8003d58:	603b      	str	r3, [r7, #0]
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d5e:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <__sfp+0x74>)
 8003d60:	6665      	str	r5, [r4, #100]	; 0x64
 8003d62:	e9c4 5500 	strd	r5, r5, [r4]
 8003d66:	60a5      	str	r5, [r4, #8]
 8003d68:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003d6c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003d70:	2208      	movs	r2, #8
 8003d72:	4629      	mov	r1, r5
 8003d74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d78:	f7ff fc8a 	bl	8003690 <memset>
 8003d7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003d80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003d84:	e7e9      	b.n	8003d5a <__sfp+0x42>
 8003d86:	bf00      	nop
 8003d88:	08004d4c 	.word	0x08004d4c
 8003d8c:	ffff0001 	.word	0xffff0001

08003d90 <_fwalk_reent>:
 8003d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d94:	4680      	mov	r8, r0
 8003d96:	4689      	mov	r9, r1
 8003d98:	2600      	movs	r6, #0
 8003d9a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d9e:	b914      	cbnz	r4, 8003da6 <_fwalk_reent+0x16>
 8003da0:	4630      	mov	r0, r6
 8003da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003da6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003daa:	3f01      	subs	r7, #1
 8003dac:	d501      	bpl.n	8003db2 <_fwalk_reent+0x22>
 8003dae:	6824      	ldr	r4, [r4, #0]
 8003db0:	e7f5      	b.n	8003d9e <_fwalk_reent+0xe>
 8003db2:	89ab      	ldrh	r3, [r5, #12]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d907      	bls.n	8003dc8 <_fwalk_reent+0x38>
 8003db8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	d003      	beq.n	8003dc8 <_fwalk_reent+0x38>
 8003dc0:	4629      	mov	r1, r5
 8003dc2:	4640      	mov	r0, r8
 8003dc4:	47c8      	blx	r9
 8003dc6:	4306      	orrs	r6, r0
 8003dc8:	3568      	adds	r5, #104	; 0x68
 8003dca:	e7ee      	b.n	8003daa <_fwalk_reent+0x1a>

08003dcc <__locale_ctype_ptr_l>:
 8003dcc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003dd0:	4770      	bx	lr

08003dd2 <__swhatbuf_r>:
 8003dd2:	b570      	push	{r4, r5, r6, lr}
 8003dd4:	460e      	mov	r6, r1
 8003dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dda:	b096      	sub	sp, #88	; 0x58
 8003ddc:	2900      	cmp	r1, #0
 8003dde:	4614      	mov	r4, r2
 8003de0:	461d      	mov	r5, r3
 8003de2:	da07      	bge.n	8003df4 <__swhatbuf_r+0x22>
 8003de4:	2300      	movs	r3, #0
 8003de6:	602b      	str	r3, [r5, #0]
 8003de8:	89b3      	ldrh	r3, [r6, #12]
 8003dea:	061a      	lsls	r2, r3, #24
 8003dec:	d410      	bmi.n	8003e10 <__swhatbuf_r+0x3e>
 8003dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003df2:	e00e      	b.n	8003e12 <__swhatbuf_r+0x40>
 8003df4:	466a      	mov	r2, sp
 8003df6:	f000 fda3 	bl	8004940 <_fstat_r>
 8003dfa:	2800      	cmp	r0, #0
 8003dfc:	dbf2      	blt.n	8003de4 <__swhatbuf_r+0x12>
 8003dfe:	9a01      	ldr	r2, [sp, #4]
 8003e00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e08:	425a      	negs	r2, r3
 8003e0a:	415a      	adcs	r2, r3
 8003e0c:	602a      	str	r2, [r5, #0]
 8003e0e:	e7ee      	b.n	8003dee <__swhatbuf_r+0x1c>
 8003e10:	2340      	movs	r3, #64	; 0x40
 8003e12:	2000      	movs	r0, #0
 8003e14:	6023      	str	r3, [r4, #0]
 8003e16:	b016      	add	sp, #88	; 0x58
 8003e18:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e1c <__smakebuf_r>:
 8003e1c:	898b      	ldrh	r3, [r1, #12]
 8003e1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e20:	079d      	lsls	r5, r3, #30
 8003e22:	4606      	mov	r6, r0
 8003e24:	460c      	mov	r4, r1
 8003e26:	d507      	bpl.n	8003e38 <__smakebuf_r+0x1c>
 8003e28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e2c:	6023      	str	r3, [r4, #0]
 8003e2e:	6123      	str	r3, [r4, #16]
 8003e30:	2301      	movs	r3, #1
 8003e32:	6163      	str	r3, [r4, #20]
 8003e34:	b002      	add	sp, #8
 8003e36:	bd70      	pop	{r4, r5, r6, pc}
 8003e38:	ab01      	add	r3, sp, #4
 8003e3a:	466a      	mov	r2, sp
 8003e3c:	f7ff ffc9 	bl	8003dd2 <__swhatbuf_r>
 8003e40:	9900      	ldr	r1, [sp, #0]
 8003e42:	4605      	mov	r5, r0
 8003e44:	4630      	mov	r0, r6
 8003e46:	f000 f887 	bl	8003f58 <_malloc_r>
 8003e4a:	b948      	cbnz	r0, 8003e60 <__smakebuf_r+0x44>
 8003e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e50:	059a      	lsls	r2, r3, #22
 8003e52:	d4ef      	bmi.n	8003e34 <__smakebuf_r+0x18>
 8003e54:	f023 0303 	bic.w	r3, r3, #3
 8003e58:	f043 0302 	orr.w	r3, r3, #2
 8003e5c:	81a3      	strh	r3, [r4, #12]
 8003e5e:	e7e3      	b.n	8003e28 <__smakebuf_r+0xc>
 8003e60:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <__smakebuf_r+0x7c>)
 8003e62:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e64:	89a3      	ldrh	r3, [r4, #12]
 8003e66:	6020      	str	r0, [r4, #0]
 8003e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e6c:	81a3      	strh	r3, [r4, #12]
 8003e6e:	9b00      	ldr	r3, [sp, #0]
 8003e70:	6120      	str	r0, [r4, #16]
 8003e72:	6163      	str	r3, [r4, #20]
 8003e74:	9b01      	ldr	r3, [sp, #4]
 8003e76:	b15b      	cbz	r3, 8003e90 <__smakebuf_r+0x74>
 8003e78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e7c:	4630      	mov	r0, r6
 8003e7e:	f000 fd71 	bl	8004964 <_isatty_r>
 8003e82:	b128      	cbz	r0, 8003e90 <__smakebuf_r+0x74>
 8003e84:	89a3      	ldrh	r3, [r4, #12]
 8003e86:	f023 0303 	bic.w	r3, r3, #3
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	81a3      	strh	r3, [r4, #12]
 8003e90:	89a3      	ldrh	r3, [r4, #12]
 8003e92:	431d      	orrs	r5, r3
 8003e94:	81a5      	strh	r5, [r4, #12]
 8003e96:	e7cd      	b.n	8003e34 <__smakebuf_r+0x18>
 8003e98:	08003c81 	.word	0x08003c81

08003e9c <__ascii_mbtowc>:
 8003e9c:	b082      	sub	sp, #8
 8003e9e:	b901      	cbnz	r1, 8003ea2 <__ascii_mbtowc+0x6>
 8003ea0:	a901      	add	r1, sp, #4
 8003ea2:	b142      	cbz	r2, 8003eb6 <__ascii_mbtowc+0x1a>
 8003ea4:	b14b      	cbz	r3, 8003eba <__ascii_mbtowc+0x1e>
 8003ea6:	7813      	ldrb	r3, [r2, #0]
 8003ea8:	600b      	str	r3, [r1, #0]
 8003eaa:	7812      	ldrb	r2, [r2, #0]
 8003eac:	1c10      	adds	r0, r2, #0
 8003eae:	bf18      	it	ne
 8003eb0:	2001      	movne	r0, #1
 8003eb2:	b002      	add	sp, #8
 8003eb4:	4770      	bx	lr
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	e7fb      	b.n	8003eb2 <__ascii_mbtowc+0x16>
 8003eba:	f06f 0001 	mvn.w	r0, #1
 8003ebe:	e7f8      	b.n	8003eb2 <__ascii_mbtowc+0x16>

08003ec0 <_free_r>:
 8003ec0:	b538      	push	{r3, r4, r5, lr}
 8003ec2:	4605      	mov	r5, r0
 8003ec4:	2900      	cmp	r1, #0
 8003ec6:	d043      	beq.n	8003f50 <_free_r+0x90>
 8003ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ecc:	1f0c      	subs	r4, r1, #4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	bfb8      	it	lt
 8003ed2:	18e4      	addlt	r4, r4, r3
 8003ed4:	f000 fd9a 	bl	8004a0c <__malloc_lock>
 8003ed8:	4a1e      	ldr	r2, [pc, #120]	; (8003f54 <_free_r+0x94>)
 8003eda:	6813      	ldr	r3, [r2, #0]
 8003edc:	4610      	mov	r0, r2
 8003ede:	b933      	cbnz	r3, 8003eee <_free_r+0x2e>
 8003ee0:	6063      	str	r3, [r4, #4]
 8003ee2:	6014      	str	r4, [r2, #0]
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003eea:	f000 bd90 	b.w	8004a0e <__malloc_unlock>
 8003eee:	42a3      	cmp	r3, r4
 8003ef0:	d90b      	bls.n	8003f0a <_free_r+0x4a>
 8003ef2:	6821      	ldr	r1, [r4, #0]
 8003ef4:	1862      	adds	r2, r4, r1
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	bf01      	itttt	eq
 8003efa:	681a      	ldreq	r2, [r3, #0]
 8003efc:	685b      	ldreq	r3, [r3, #4]
 8003efe:	1852      	addeq	r2, r2, r1
 8003f00:	6022      	streq	r2, [r4, #0]
 8003f02:	6063      	str	r3, [r4, #4]
 8003f04:	6004      	str	r4, [r0, #0]
 8003f06:	e7ed      	b.n	8003ee4 <_free_r+0x24>
 8003f08:	4613      	mov	r3, r2
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	b10a      	cbz	r2, 8003f12 <_free_r+0x52>
 8003f0e:	42a2      	cmp	r2, r4
 8003f10:	d9fa      	bls.n	8003f08 <_free_r+0x48>
 8003f12:	6819      	ldr	r1, [r3, #0]
 8003f14:	1858      	adds	r0, r3, r1
 8003f16:	42a0      	cmp	r0, r4
 8003f18:	d10b      	bne.n	8003f32 <_free_r+0x72>
 8003f1a:	6820      	ldr	r0, [r4, #0]
 8003f1c:	4401      	add	r1, r0
 8003f1e:	1858      	adds	r0, r3, r1
 8003f20:	4282      	cmp	r2, r0
 8003f22:	6019      	str	r1, [r3, #0]
 8003f24:	d1de      	bne.n	8003ee4 <_free_r+0x24>
 8003f26:	6810      	ldr	r0, [r2, #0]
 8003f28:	6852      	ldr	r2, [r2, #4]
 8003f2a:	4401      	add	r1, r0
 8003f2c:	6019      	str	r1, [r3, #0]
 8003f2e:	605a      	str	r2, [r3, #4]
 8003f30:	e7d8      	b.n	8003ee4 <_free_r+0x24>
 8003f32:	d902      	bls.n	8003f3a <_free_r+0x7a>
 8003f34:	230c      	movs	r3, #12
 8003f36:	602b      	str	r3, [r5, #0]
 8003f38:	e7d4      	b.n	8003ee4 <_free_r+0x24>
 8003f3a:	6820      	ldr	r0, [r4, #0]
 8003f3c:	1821      	adds	r1, r4, r0
 8003f3e:	428a      	cmp	r2, r1
 8003f40:	bf01      	itttt	eq
 8003f42:	6811      	ldreq	r1, [r2, #0]
 8003f44:	6852      	ldreq	r2, [r2, #4]
 8003f46:	1809      	addeq	r1, r1, r0
 8003f48:	6021      	streq	r1, [r4, #0]
 8003f4a:	6062      	str	r2, [r4, #4]
 8003f4c:	605c      	str	r4, [r3, #4]
 8003f4e:	e7c9      	b.n	8003ee4 <_free_r+0x24>
 8003f50:	bd38      	pop	{r3, r4, r5, pc}
 8003f52:	bf00      	nop
 8003f54:	200002a8 	.word	0x200002a8

08003f58 <_malloc_r>:
 8003f58:	b570      	push	{r4, r5, r6, lr}
 8003f5a:	1ccd      	adds	r5, r1, #3
 8003f5c:	f025 0503 	bic.w	r5, r5, #3
 8003f60:	3508      	adds	r5, #8
 8003f62:	2d0c      	cmp	r5, #12
 8003f64:	bf38      	it	cc
 8003f66:	250c      	movcc	r5, #12
 8003f68:	2d00      	cmp	r5, #0
 8003f6a:	4606      	mov	r6, r0
 8003f6c:	db01      	blt.n	8003f72 <_malloc_r+0x1a>
 8003f6e:	42a9      	cmp	r1, r5
 8003f70:	d903      	bls.n	8003f7a <_malloc_r+0x22>
 8003f72:	230c      	movs	r3, #12
 8003f74:	6033      	str	r3, [r6, #0]
 8003f76:	2000      	movs	r0, #0
 8003f78:	bd70      	pop	{r4, r5, r6, pc}
 8003f7a:	f000 fd47 	bl	8004a0c <__malloc_lock>
 8003f7e:	4a21      	ldr	r2, [pc, #132]	; (8004004 <_malloc_r+0xac>)
 8003f80:	6814      	ldr	r4, [r2, #0]
 8003f82:	4621      	mov	r1, r4
 8003f84:	b991      	cbnz	r1, 8003fac <_malloc_r+0x54>
 8003f86:	4c20      	ldr	r4, [pc, #128]	; (8004008 <_malloc_r+0xb0>)
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	b91b      	cbnz	r3, 8003f94 <_malloc_r+0x3c>
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	f000 fc55 	bl	800483c <_sbrk_r>
 8003f92:	6020      	str	r0, [r4, #0]
 8003f94:	4629      	mov	r1, r5
 8003f96:	4630      	mov	r0, r6
 8003f98:	f000 fc50 	bl	800483c <_sbrk_r>
 8003f9c:	1c43      	adds	r3, r0, #1
 8003f9e:	d124      	bne.n	8003fea <_malloc_r+0x92>
 8003fa0:	230c      	movs	r3, #12
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	6033      	str	r3, [r6, #0]
 8003fa6:	f000 fd32 	bl	8004a0e <__malloc_unlock>
 8003faa:	e7e4      	b.n	8003f76 <_malloc_r+0x1e>
 8003fac:	680b      	ldr	r3, [r1, #0]
 8003fae:	1b5b      	subs	r3, r3, r5
 8003fb0:	d418      	bmi.n	8003fe4 <_malloc_r+0x8c>
 8003fb2:	2b0b      	cmp	r3, #11
 8003fb4:	d90f      	bls.n	8003fd6 <_malloc_r+0x7e>
 8003fb6:	600b      	str	r3, [r1, #0]
 8003fb8:	18cc      	adds	r4, r1, r3
 8003fba:	50cd      	str	r5, [r1, r3]
 8003fbc:	4630      	mov	r0, r6
 8003fbe:	f000 fd26 	bl	8004a0e <__malloc_unlock>
 8003fc2:	f104 000b 	add.w	r0, r4, #11
 8003fc6:	1d23      	adds	r3, r4, #4
 8003fc8:	f020 0007 	bic.w	r0, r0, #7
 8003fcc:	1ac3      	subs	r3, r0, r3
 8003fce:	d0d3      	beq.n	8003f78 <_malloc_r+0x20>
 8003fd0:	425a      	negs	r2, r3
 8003fd2:	50e2      	str	r2, [r4, r3]
 8003fd4:	e7d0      	b.n	8003f78 <_malloc_r+0x20>
 8003fd6:	684b      	ldr	r3, [r1, #4]
 8003fd8:	428c      	cmp	r4, r1
 8003fda:	bf16      	itet	ne
 8003fdc:	6063      	strne	r3, [r4, #4]
 8003fde:	6013      	streq	r3, [r2, #0]
 8003fe0:	460c      	movne	r4, r1
 8003fe2:	e7eb      	b.n	8003fbc <_malloc_r+0x64>
 8003fe4:	460c      	mov	r4, r1
 8003fe6:	6849      	ldr	r1, [r1, #4]
 8003fe8:	e7cc      	b.n	8003f84 <_malloc_r+0x2c>
 8003fea:	1cc4      	adds	r4, r0, #3
 8003fec:	f024 0403 	bic.w	r4, r4, #3
 8003ff0:	42a0      	cmp	r0, r4
 8003ff2:	d005      	beq.n	8004000 <_malloc_r+0xa8>
 8003ff4:	1a21      	subs	r1, r4, r0
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	f000 fc20 	bl	800483c <_sbrk_r>
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	d0cf      	beq.n	8003fa0 <_malloc_r+0x48>
 8004000:	6025      	str	r5, [r4, #0]
 8004002:	e7db      	b.n	8003fbc <_malloc_r+0x64>
 8004004:	200002a8 	.word	0x200002a8
 8004008:	200002ac 	.word	0x200002ac

0800400c <__ssputs_r>:
 800400c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004010:	688e      	ldr	r6, [r1, #8]
 8004012:	4682      	mov	sl, r0
 8004014:	429e      	cmp	r6, r3
 8004016:	460c      	mov	r4, r1
 8004018:	4690      	mov	r8, r2
 800401a:	4699      	mov	r9, r3
 800401c:	d837      	bhi.n	800408e <__ssputs_r+0x82>
 800401e:	898a      	ldrh	r2, [r1, #12]
 8004020:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004024:	d031      	beq.n	800408a <__ssputs_r+0x7e>
 8004026:	2302      	movs	r3, #2
 8004028:	6825      	ldr	r5, [r4, #0]
 800402a:	6909      	ldr	r1, [r1, #16]
 800402c:	1a6f      	subs	r7, r5, r1
 800402e:	6965      	ldr	r5, [r4, #20]
 8004030:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004034:	fb95 f5f3 	sdiv	r5, r5, r3
 8004038:	f109 0301 	add.w	r3, r9, #1
 800403c:	443b      	add	r3, r7
 800403e:	429d      	cmp	r5, r3
 8004040:	bf38      	it	cc
 8004042:	461d      	movcc	r5, r3
 8004044:	0553      	lsls	r3, r2, #21
 8004046:	d530      	bpl.n	80040aa <__ssputs_r+0x9e>
 8004048:	4629      	mov	r1, r5
 800404a:	f7ff ff85 	bl	8003f58 <_malloc_r>
 800404e:	4606      	mov	r6, r0
 8004050:	b950      	cbnz	r0, 8004068 <__ssputs_r+0x5c>
 8004052:	230c      	movs	r3, #12
 8004054:	f04f 30ff 	mov.w	r0, #4294967295
 8004058:	f8ca 3000 	str.w	r3, [sl]
 800405c:	89a3      	ldrh	r3, [r4, #12]
 800405e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004062:	81a3      	strh	r3, [r4, #12]
 8004064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004068:	463a      	mov	r2, r7
 800406a:	6921      	ldr	r1, [r4, #16]
 800406c:	f000 fcaa 	bl	80049c4 <memcpy>
 8004070:	89a3      	ldrh	r3, [r4, #12]
 8004072:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800407a:	81a3      	strh	r3, [r4, #12]
 800407c:	6126      	str	r6, [r4, #16]
 800407e:	443e      	add	r6, r7
 8004080:	6026      	str	r6, [r4, #0]
 8004082:	464e      	mov	r6, r9
 8004084:	6165      	str	r5, [r4, #20]
 8004086:	1bed      	subs	r5, r5, r7
 8004088:	60a5      	str	r5, [r4, #8]
 800408a:	454e      	cmp	r6, r9
 800408c:	d900      	bls.n	8004090 <__ssputs_r+0x84>
 800408e:	464e      	mov	r6, r9
 8004090:	4632      	mov	r2, r6
 8004092:	4641      	mov	r1, r8
 8004094:	6820      	ldr	r0, [r4, #0]
 8004096:	f000 fca0 	bl	80049da <memmove>
 800409a:	68a3      	ldr	r3, [r4, #8]
 800409c:	2000      	movs	r0, #0
 800409e:	1b9b      	subs	r3, r3, r6
 80040a0:	60a3      	str	r3, [r4, #8]
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	441e      	add	r6, r3
 80040a6:	6026      	str	r6, [r4, #0]
 80040a8:	e7dc      	b.n	8004064 <__ssputs_r+0x58>
 80040aa:	462a      	mov	r2, r5
 80040ac:	f000 fcb0 	bl	8004a10 <_realloc_r>
 80040b0:	4606      	mov	r6, r0
 80040b2:	2800      	cmp	r0, #0
 80040b4:	d1e2      	bne.n	800407c <__ssputs_r+0x70>
 80040b6:	6921      	ldr	r1, [r4, #16]
 80040b8:	4650      	mov	r0, sl
 80040ba:	f7ff ff01 	bl	8003ec0 <_free_r>
 80040be:	e7c8      	b.n	8004052 <__ssputs_r+0x46>

080040c0 <_svfiprintf_r>:
 80040c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c4:	461d      	mov	r5, r3
 80040c6:	898b      	ldrh	r3, [r1, #12]
 80040c8:	b09d      	sub	sp, #116	; 0x74
 80040ca:	061f      	lsls	r7, r3, #24
 80040cc:	4680      	mov	r8, r0
 80040ce:	460c      	mov	r4, r1
 80040d0:	4616      	mov	r6, r2
 80040d2:	d50f      	bpl.n	80040f4 <_svfiprintf_r+0x34>
 80040d4:	690b      	ldr	r3, [r1, #16]
 80040d6:	b96b      	cbnz	r3, 80040f4 <_svfiprintf_r+0x34>
 80040d8:	2140      	movs	r1, #64	; 0x40
 80040da:	f7ff ff3d 	bl	8003f58 <_malloc_r>
 80040de:	6020      	str	r0, [r4, #0]
 80040e0:	6120      	str	r0, [r4, #16]
 80040e2:	b928      	cbnz	r0, 80040f0 <_svfiprintf_r+0x30>
 80040e4:	230c      	movs	r3, #12
 80040e6:	f8c8 3000 	str.w	r3, [r8]
 80040ea:	f04f 30ff 	mov.w	r0, #4294967295
 80040ee:	e0c8      	b.n	8004282 <_svfiprintf_r+0x1c2>
 80040f0:	2340      	movs	r3, #64	; 0x40
 80040f2:	6163      	str	r3, [r4, #20]
 80040f4:	2300      	movs	r3, #0
 80040f6:	9309      	str	r3, [sp, #36]	; 0x24
 80040f8:	2320      	movs	r3, #32
 80040fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040fe:	2330      	movs	r3, #48	; 0x30
 8004100:	f04f 0b01 	mov.w	fp, #1
 8004104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004108:	9503      	str	r5, [sp, #12]
 800410a:	4637      	mov	r7, r6
 800410c:	463d      	mov	r5, r7
 800410e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004112:	b10b      	cbz	r3, 8004118 <_svfiprintf_r+0x58>
 8004114:	2b25      	cmp	r3, #37	; 0x25
 8004116:	d13e      	bne.n	8004196 <_svfiprintf_r+0xd6>
 8004118:	ebb7 0a06 	subs.w	sl, r7, r6
 800411c:	d00b      	beq.n	8004136 <_svfiprintf_r+0x76>
 800411e:	4653      	mov	r3, sl
 8004120:	4632      	mov	r2, r6
 8004122:	4621      	mov	r1, r4
 8004124:	4640      	mov	r0, r8
 8004126:	f7ff ff71 	bl	800400c <__ssputs_r>
 800412a:	3001      	adds	r0, #1
 800412c:	f000 80a4 	beq.w	8004278 <_svfiprintf_r+0x1b8>
 8004130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004132:	4453      	add	r3, sl
 8004134:	9309      	str	r3, [sp, #36]	; 0x24
 8004136:	783b      	ldrb	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 809d 	beq.w	8004278 <_svfiprintf_r+0x1b8>
 800413e:	2300      	movs	r3, #0
 8004140:	f04f 32ff 	mov.w	r2, #4294967295
 8004144:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004148:	9304      	str	r3, [sp, #16]
 800414a:	9307      	str	r3, [sp, #28]
 800414c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004150:	931a      	str	r3, [sp, #104]	; 0x68
 8004152:	462f      	mov	r7, r5
 8004154:	2205      	movs	r2, #5
 8004156:	f817 1b01 	ldrb.w	r1, [r7], #1
 800415a:	4850      	ldr	r0, [pc, #320]	; (800429c <_svfiprintf_r+0x1dc>)
 800415c:	f000 fc24 	bl	80049a8 <memchr>
 8004160:	9b04      	ldr	r3, [sp, #16]
 8004162:	b9d0      	cbnz	r0, 800419a <_svfiprintf_r+0xda>
 8004164:	06d9      	lsls	r1, r3, #27
 8004166:	bf44      	itt	mi
 8004168:	2220      	movmi	r2, #32
 800416a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800416e:	071a      	lsls	r2, r3, #28
 8004170:	bf44      	itt	mi
 8004172:	222b      	movmi	r2, #43	; 0x2b
 8004174:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004178:	782a      	ldrb	r2, [r5, #0]
 800417a:	2a2a      	cmp	r2, #42	; 0x2a
 800417c:	d015      	beq.n	80041aa <_svfiprintf_r+0xea>
 800417e:	462f      	mov	r7, r5
 8004180:	2000      	movs	r0, #0
 8004182:	250a      	movs	r5, #10
 8004184:	9a07      	ldr	r2, [sp, #28]
 8004186:	4639      	mov	r1, r7
 8004188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800418c:	3b30      	subs	r3, #48	; 0x30
 800418e:	2b09      	cmp	r3, #9
 8004190:	d94d      	bls.n	800422e <_svfiprintf_r+0x16e>
 8004192:	b1b8      	cbz	r0, 80041c4 <_svfiprintf_r+0x104>
 8004194:	e00f      	b.n	80041b6 <_svfiprintf_r+0xf6>
 8004196:	462f      	mov	r7, r5
 8004198:	e7b8      	b.n	800410c <_svfiprintf_r+0x4c>
 800419a:	4a40      	ldr	r2, [pc, #256]	; (800429c <_svfiprintf_r+0x1dc>)
 800419c:	463d      	mov	r5, r7
 800419e:	1a80      	subs	r0, r0, r2
 80041a0:	fa0b f000 	lsl.w	r0, fp, r0
 80041a4:	4318      	orrs	r0, r3
 80041a6:	9004      	str	r0, [sp, #16]
 80041a8:	e7d3      	b.n	8004152 <_svfiprintf_r+0x92>
 80041aa:	9a03      	ldr	r2, [sp, #12]
 80041ac:	1d11      	adds	r1, r2, #4
 80041ae:	6812      	ldr	r2, [r2, #0]
 80041b0:	9103      	str	r1, [sp, #12]
 80041b2:	2a00      	cmp	r2, #0
 80041b4:	db01      	blt.n	80041ba <_svfiprintf_r+0xfa>
 80041b6:	9207      	str	r2, [sp, #28]
 80041b8:	e004      	b.n	80041c4 <_svfiprintf_r+0x104>
 80041ba:	4252      	negs	r2, r2
 80041bc:	f043 0302 	orr.w	r3, r3, #2
 80041c0:	9207      	str	r2, [sp, #28]
 80041c2:	9304      	str	r3, [sp, #16]
 80041c4:	783b      	ldrb	r3, [r7, #0]
 80041c6:	2b2e      	cmp	r3, #46	; 0x2e
 80041c8:	d10c      	bne.n	80041e4 <_svfiprintf_r+0x124>
 80041ca:	787b      	ldrb	r3, [r7, #1]
 80041cc:	2b2a      	cmp	r3, #42	; 0x2a
 80041ce:	d133      	bne.n	8004238 <_svfiprintf_r+0x178>
 80041d0:	9b03      	ldr	r3, [sp, #12]
 80041d2:	3702      	adds	r7, #2
 80041d4:	1d1a      	adds	r2, r3, #4
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	9203      	str	r2, [sp, #12]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	bfb8      	it	lt
 80041de:	f04f 33ff 	movlt.w	r3, #4294967295
 80041e2:	9305      	str	r3, [sp, #20]
 80041e4:	4d2e      	ldr	r5, [pc, #184]	; (80042a0 <_svfiprintf_r+0x1e0>)
 80041e6:	2203      	movs	r2, #3
 80041e8:	7839      	ldrb	r1, [r7, #0]
 80041ea:	4628      	mov	r0, r5
 80041ec:	f000 fbdc 	bl	80049a8 <memchr>
 80041f0:	b138      	cbz	r0, 8004202 <_svfiprintf_r+0x142>
 80041f2:	2340      	movs	r3, #64	; 0x40
 80041f4:	1b40      	subs	r0, r0, r5
 80041f6:	fa03 f000 	lsl.w	r0, r3, r0
 80041fa:	9b04      	ldr	r3, [sp, #16]
 80041fc:	3701      	adds	r7, #1
 80041fe:	4303      	orrs	r3, r0
 8004200:	9304      	str	r3, [sp, #16]
 8004202:	7839      	ldrb	r1, [r7, #0]
 8004204:	2206      	movs	r2, #6
 8004206:	4827      	ldr	r0, [pc, #156]	; (80042a4 <_svfiprintf_r+0x1e4>)
 8004208:	1c7e      	adds	r6, r7, #1
 800420a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800420e:	f000 fbcb 	bl	80049a8 <memchr>
 8004212:	2800      	cmp	r0, #0
 8004214:	d038      	beq.n	8004288 <_svfiprintf_r+0x1c8>
 8004216:	4b24      	ldr	r3, [pc, #144]	; (80042a8 <_svfiprintf_r+0x1e8>)
 8004218:	bb13      	cbnz	r3, 8004260 <_svfiprintf_r+0x1a0>
 800421a:	9b03      	ldr	r3, [sp, #12]
 800421c:	3307      	adds	r3, #7
 800421e:	f023 0307 	bic.w	r3, r3, #7
 8004222:	3308      	adds	r3, #8
 8004224:	9303      	str	r3, [sp, #12]
 8004226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004228:	444b      	add	r3, r9
 800422a:	9309      	str	r3, [sp, #36]	; 0x24
 800422c:	e76d      	b.n	800410a <_svfiprintf_r+0x4a>
 800422e:	fb05 3202 	mla	r2, r5, r2, r3
 8004232:	2001      	movs	r0, #1
 8004234:	460f      	mov	r7, r1
 8004236:	e7a6      	b.n	8004186 <_svfiprintf_r+0xc6>
 8004238:	2300      	movs	r3, #0
 800423a:	250a      	movs	r5, #10
 800423c:	4619      	mov	r1, r3
 800423e:	3701      	adds	r7, #1
 8004240:	9305      	str	r3, [sp, #20]
 8004242:	4638      	mov	r0, r7
 8004244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004248:	3a30      	subs	r2, #48	; 0x30
 800424a:	2a09      	cmp	r2, #9
 800424c:	d903      	bls.n	8004256 <_svfiprintf_r+0x196>
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0c8      	beq.n	80041e4 <_svfiprintf_r+0x124>
 8004252:	9105      	str	r1, [sp, #20]
 8004254:	e7c6      	b.n	80041e4 <_svfiprintf_r+0x124>
 8004256:	fb05 2101 	mla	r1, r5, r1, r2
 800425a:	2301      	movs	r3, #1
 800425c:	4607      	mov	r7, r0
 800425e:	e7f0      	b.n	8004242 <_svfiprintf_r+0x182>
 8004260:	ab03      	add	r3, sp, #12
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	4622      	mov	r2, r4
 8004266:	4b11      	ldr	r3, [pc, #68]	; (80042ac <_svfiprintf_r+0x1ec>)
 8004268:	a904      	add	r1, sp, #16
 800426a:	4640      	mov	r0, r8
 800426c:	f3af 8000 	nop.w
 8004270:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004274:	4681      	mov	r9, r0
 8004276:	d1d6      	bne.n	8004226 <_svfiprintf_r+0x166>
 8004278:	89a3      	ldrh	r3, [r4, #12]
 800427a:	065b      	lsls	r3, r3, #25
 800427c:	f53f af35 	bmi.w	80040ea <_svfiprintf_r+0x2a>
 8004280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004282:	b01d      	add	sp, #116	; 0x74
 8004284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004288:	ab03      	add	r3, sp, #12
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	4622      	mov	r2, r4
 800428e:	4b07      	ldr	r3, [pc, #28]	; (80042ac <_svfiprintf_r+0x1ec>)
 8004290:	a904      	add	r1, sp, #16
 8004292:	4640      	mov	r0, r8
 8004294:	f000 f9c0 	bl	8004618 <_printf_i>
 8004298:	e7ea      	b.n	8004270 <_svfiprintf_r+0x1b0>
 800429a:	bf00      	nop
 800429c:	08004dba 	.word	0x08004dba
 80042a0:	08004dc0 	.word	0x08004dc0
 80042a4:	08004dc4 	.word	0x08004dc4
 80042a8:	00000000 	.word	0x00000000
 80042ac:	0800400d 	.word	0x0800400d

080042b0 <__sfputc_r>:
 80042b0:	6893      	ldr	r3, [r2, #8]
 80042b2:	b410      	push	{r4}
 80042b4:	3b01      	subs	r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	6093      	str	r3, [r2, #8]
 80042ba:	da07      	bge.n	80042cc <__sfputc_r+0x1c>
 80042bc:	6994      	ldr	r4, [r2, #24]
 80042be:	42a3      	cmp	r3, r4
 80042c0:	db01      	blt.n	80042c6 <__sfputc_r+0x16>
 80042c2:	290a      	cmp	r1, #10
 80042c4:	d102      	bne.n	80042cc <__sfputc_r+0x1c>
 80042c6:	bc10      	pop	{r4}
 80042c8:	f7ff bb46 	b.w	8003958 <__swbuf_r>
 80042cc:	6813      	ldr	r3, [r2, #0]
 80042ce:	1c58      	adds	r0, r3, #1
 80042d0:	6010      	str	r0, [r2, #0]
 80042d2:	7019      	strb	r1, [r3, #0]
 80042d4:	4608      	mov	r0, r1
 80042d6:	bc10      	pop	{r4}
 80042d8:	4770      	bx	lr

080042da <__sfputs_r>:
 80042da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042dc:	4606      	mov	r6, r0
 80042de:	460f      	mov	r7, r1
 80042e0:	4614      	mov	r4, r2
 80042e2:	18d5      	adds	r5, r2, r3
 80042e4:	42ac      	cmp	r4, r5
 80042e6:	d101      	bne.n	80042ec <__sfputs_r+0x12>
 80042e8:	2000      	movs	r0, #0
 80042ea:	e007      	b.n	80042fc <__sfputs_r+0x22>
 80042ec:	463a      	mov	r2, r7
 80042ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042f2:	4630      	mov	r0, r6
 80042f4:	f7ff ffdc 	bl	80042b0 <__sfputc_r>
 80042f8:	1c43      	adds	r3, r0, #1
 80042fa:	d1f3      	bne.n	80042e4 <__sfputs_r+0xa>
 80042fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004300 <_vfiprintf_r>:
 8004300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004304:	460c      	mov	r4, r1
 8004306:	b09d      	sub	sp, #116	; 0x74
 8004308:	4617      	mov	r7, r2
 800430a:	461d      	mov	r5, r3
 800430c:	4606      	mov	r6, r0
 800430e:	b118      	cbz	r0, 8004318 <_vfiprintf_r+0x18>
 8004310:	6983      	ldr	r3, [r0, #24]
 8004312:	b90b      	cbnz	r3, 8004318 <_vfiprintf_r+0x18>
 8004314:	f7ff fcd0 	bl	8003cb8 <__sinit>
 8004318:	4b7c      	ldr	r3, [pc, #496]	; (800450c <_vfiprintf_r+0x20c>)
 800431a:	429c      	cmp	r4, r3
 800431c:	d158      	bne.n	80043d0 <_vfiprintf_r+0xd0>
 800431e:	6874      	ldr	r4, [r6, #4]
 8004320:	89a3      	ldrh	r3, [r4, #12]
 8004322:	0718      	lsls	r0, r3, #28
 8004324:	d55e      	bpl.n	80043e4 <_vfiprintf_r+0xe4>
 8004326:	6923      	ldr	r3, [r4, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d05b      	beq.n	80043e4 <_vfiprintf_r+0xe4>
 800432c:	2300      	movs	r3, #0
 800432e:	9309      	str	r3, [sp, #36]	; 0x24
 8004330:	2320      	movs	r3, #32
 8004332:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004336:	2330      	movs	r3, #48	; 0x30
 8004338:	f04f 0b01 	mov.w	fp, #1
 800433c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004340:	9503      	str	r5, [sp, #12]
 8004342:	46b8      	mov	r8, r7
 8004344:	4645      	mov	r5, r8
 8004346:	f815 3b01 	ldrb.w	r3, [r5], #1
 800434a:	b10b      	cbz	r3, 8004350 <_vfiprintf_r+0x50>
 800434c:	2b25      	cmp	r3, #37	; 0x25
 800434e:	d154      	bne.n	80043fa <_vfiprintf_r+0xfa>
 8004350:	ebb8 0a07 	subs.w	sl, r8, r7
 8004354:	d00b      	beq.n	800436e <_vfiprintf_r+0x6e>
 8004356:	4653      	mov	r3, sl
 8004358:	463a      	mov	r2, r7
 800435a:	4621      	mov	r1, r4
 800435c:	4630      	mov	r0, r6
 800435e:	f7ff ffbc 	bl	80042da <__sfputs_r>
 8004362:	3001      	adds	r0, #1
 8004364:	f000 80c2 	beq.w	80044ec <_vfiprintf_r+0x1ec>
 8004368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800436a:	4453      	add	r3, sl
 800436c:	9309      	str	r3, [sp, #36]	; 0x24
 800436e:	f898 3000 	ldrb.w	r3, [r8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 80ba 	beq.w	80044ec <_vfiprintf_r+0x1ec>
 8004378:	2300      	movs	r3, #0
 800437a:	f04f 32ff 	mov.w	r2, #4294967295
 800437e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004382:	9304      	str	r3, [sp, #16]
 8004384:	9307      	str	r3, [sp, #28]
 8004386:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800438a:	931a      	str	r3, [sp, #104]	; 0x68
 800438c:	46a8      	mov	r8, r5
 800438e:	2205      	movs	r2, #5
 8004390:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004394:	485e      	ldr	r0, [pc, #376]	; (8004510 <_vfiprintf_r+0x210>)
 8004396:	f000 fb07 	bl	80049a8 <memchr>
 800439a:	9b04      	ldr	r3, [sp, #16]
 800439c:	bb78      	cbnz	r0, 80043fe <_vfiprintf_r+0xfe>
 800439e:	06d9      	lsls	r1, r3, #27
 80043a0:	bf44      	itt	mi
 80043a2:	2220      	movmi	r2, #32
 80043a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043a8:	071a      	lsls	r2, r3, #28
 80043aa:	bf44      	itt	mi
 80043ac:	222b      	movmi	r2, #43	; 0x2b
 80043ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043b2:	782a      	ldrb	r2, [r5, #0]
 80043b4:	2a2a      	cmp	r2, #42	; 0x2a
 80043b6:	d02a      	beq.n	800440e <_vfiprintf_r+0x10e>
 80043b8:	46a8      	mov	r8, r5
 80043ba:	2000      	movs	r0, #0
 80043bc:	250a      	movs	r5, #10
 80043be:	9a07      	ldr	r2, [sp, #28]
 80043c0:	4641      	mov	r1, r8
 80043c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043c6:	3b30      	subs	r3, #48	; 0x30
 80043c8:	2b09      	cmp	r3, #9
 80043ca:	d969      	bls.n	80044a0 <_vfiprintf_r+0x1a0>
 80043cc:	b360      	cbz	r0, 8004428 <_vfiprintf_r+0x128>
 80043ce:	e024      	b.n	800441a <_vfiprintf_r+0x11a>
 80043d0:	4b50      	ldr	r3, [pc, #320]	; (8004514 <_vfiprintf_r+0x214>)
 80043d2:	429c      	cmp	r4, r3
 80043d4:	d101      	bne.n	80043da <_vfiprintf_r+0xda>
 80043d6:	68b4      	ldr	r4, [r6, #8]
 80043d8:	e7a2      	b.n	8004320 <_vfiprintf_r+0x20>
 80043da:	4b4f      	ldr	r3, [pc, #316]	; (8004518 <_vfiprintf_r+0x218>)
 80043dc:	429c      	cmp	r4, r3
 80043de:	bf08      	it	eq
 80043e0:	68f4      	ldreq	r4, [r6, #12]
 80043e2:	e79d      	b.n	8004320 <_vfiprintf_r+0x20>
 80043e4:	4621      	mov	r1, r4
 80043e6:	4630      	mov	r0, r6
 80043e8:	f7ff fb08 	bl	80039fc <__swsetup_r>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	d09d      	beq.n	800432c <_vfiprintf_r+0x2c>
 80043f0:	f04f 30ff 	mov.w	r0, #4294967295
 80043f4:	b01d      	add	sp, #116	; 0x74
 80043f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043fa:	46a8      	mov	r8, r5
 80043fc:	e7a2      	b.n	8004344 <_vfiprintf_r+0x44>
 80043fe:	4a44      	ldr	r2, [pc, #272]	; (8004510 <_vfiprintf_r+0x210>)
 8004400:	4645      	mov	r5, r8
 8004402:	1a80      	subs	r0, r0, r2
 8004404:	fa0b f000 	lsl.w	r0, fp, r0
 8004408:	4318      	orrs	r0, r3
 800440a:	9004      	str	r0, [sp, #16]
 800440c:	e7be      	b.n	800438c <_vfiprintf_r+0x8c>
 800440e:	9a03      	ldr	r2, [sp, #12]
 8004410:	1d11      	adds	r1, r2, #4
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	9103      	str	r1, [sp, #12]
 8004416:	2a00      	cmp	r2, #0
 8004418:	db01      	blt.n	800441e <_vfiprintf_r+0x11e>
 800441a:	9207      	str	r2, [sp, #28]
 800441c:	e004      	b.n	8004428 <_vfiprintf_r+0x128>
 800441e:	4252      	negs	r2, r2
 8004420:	f043 0302 	orr.w	r3, r3, #2
 8004424:	9207      	str	r2, [sp, #28]
 8004426:	9304      	str	r3, [sp, #16]
 8004428:	f898 3000 	ldrb.w	r3, [r8]
 800442c:	2b2e      	cmp	r3, #46	; 0x2e
 800442e:	d10e      	bne.n	800444e <_vfiprintf_r+0x14e>
 8004430:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004434:	2b2a      	cmp	r3, #42	; 0x2a
 8004436:	d138      	bne.n	80044aa <_vfiprintf_r+0x1aa>
 8004438:	9b03      	ldr	r3, [sp, #12]
 800443a:	f108 0802 	add.w	r8, r8, #2
 800443e:	1d1a      	adds	r2, r3, #4
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	9203      	str	r2, [sp, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	bfb8      	it	lt
 8004448:	f04f 33ff 	movlt.w	r3, #4294967295
 800444c:	9305      	str	r3, [sp, #20]
 800444e:	4d33      	ldr	r5, [pc, #204]	; (800451c <_vfiprintf_r+0x21c>)
 8004450:	2203      	movs	r2, #3
 8004452:	f898 1000 	ldrb.w	r1, [r8]
 8004456:	4628      	mov	r0, r5
 8004458:	f000 faa6 	bl	80049a8 <memchr>
 800445c:	b140      	cbz	r0, 8004470 <_vfiprintf_r+0x170>
 800445e:	2340      	movs	r3, #64	; 0x40
 8004460:	1b40      	subs	r0, r0, r5
 8004462:	fa03 f000 	lsl.w	r0, r3, r0
 8004466:	9b04      	ldr	r3, [sp, #16]
 8004468:	f108 0801 	add.w	r8, r8, #1
 800446c:	4303      	orrs	r3, r0
 800446e:	9304      	str	r3, [sp, #16]
 8004470:	f898 1000 	ldrb.w	r1, [r8]
 8004474:	2206      	movs	r2, #6
 8004476:	482a      	ldr	r0, [pc, #168]	; (8004520 <_vfiprintf_r+0x220>)
 8004478:	f108 0701 	add.w	r7, r8, #1
 800447c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004480:	f000 fa92 	bl	80049a8 <memchr>
 8004484:	2800      	cmp	r0, #0
 8004486:	d037      	beq.n	80044f8 <_vfiprintf_r+0x1f8>
 8004488:	4b26      	ldr	r3, [pc, #152]	; (8004524 <_vfiprintf_r+0x224>)
 800448a:	bb1b      	cbnz	r3, 80044d4 <_vfiprintf_r+0x1d4>
 800448c:	9b03      	ldr	r3, [sp, #12]
 800448e:	3307      	adds	r3, #7
 8004490:	f023 0307 	bic.w	r3, r3, #7
 8004494:	3308      	adds	r3, #8
 8004496:	9303      	str	r3, [sp, #12]
 8004498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800449a:	444b      	add	r3, r9
 800449c:	9309      	str	r3, [sp, #36]	; 0x24
 800449e:	e750      	b.n	8004342 <_vfiprintf_r+0x42>
 80044a0:	fb05 3202 	mla	r2, r5, r2, r3
 80044a4:	2001      	movs	r0, #1
 80044a6:	4688      	mov	r8, r1
 80044a8:	e78a      	b.n	80043c0 <_vfiprintf_r+0xc0>
 80044aa:	2300      	movs	r3, #0
 80044ac:	250a      	movs	r5, #10
 80044ae:	4619      	mov	r1, r3
 80044b0:	f108 0801 	add.w	r8, r8, #1
 80044b4:	9305      	str	r3, [sp, #20]
 80044b6:	4640      	mov	r0, r8
 80044b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044bc:	3a30      	subs	r2, #48	; 0x30
 80044be:	2a09      	cmp	r2, #9
 80044c0:	d903      	bls.n	80044ca <_vfiprintf_r+0x1ca>
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0c3      	beq.n	800444e <_vfiprintf_r+0x14e>
 80044c6:	9105      	str	r1, [sp, #20]
 80044c8:	e7c1      	b.n	800444e <_vfiprintf_r+0x14e>
 80044ca:	fb05 2101 	mla	r1, r5, r1, r2
 80044ce:	2301      	movs	r3, #1
 80044d0:	4680      	mov	r8, r0
 80044d2:	e7f0      	b.n	80044b6 <_vfiprintf_r+0x1b6>
 80044d4:	ab03      	add	r3, sp, #12
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	4622      	mov	r2, r4
 80044da:	4b13      	ldr	r3, [pc, #76]	; (8004528 <_vfiprintf_r+0x228>)
 80044dc:	a904      	add	r1, sp, #16
 80044de:	4630      	mov	r0, r6
 80044e0:	f3af 8000 	nop.w
 80044e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80044e8:	4681      	mov	r9, r0
 80044ea:	d1d5      	bne.n	8004498 <_vfiprintf_r+0x198>
 80044ec:	89a3      	ldrh	r3, [r4, #12]
 80044ee:	065b      	lsls	r3, r3, #25
 80044f0:	f53f af7e 	bmi.w	80043f0 <_vfiprintf_r+0xf0>
 80044f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044f6:	e77d      	b.n	80043f4 <_vfiprintf_r+0xf4>
 80044f8:	ab03      	add	r3, sp, #12
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	4622      	mov	r2, r4
 80044fe:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <_vfiprintf_r+0x228>)
 8004500:	a904      	add	r1, sp, #16
 8004502:	4630      	mov	r0, r6
 8004504:	f000 f888 	bl	8004618 <_printf_i>
 8004508:	e7ec      	b.n	80044e4 <_vfiprintf_r+0x1e4>
 800450a:	bf00      	nop
 800450c:	08004d70 	.word	0x08004d70
 8004510:	08004dba 	.word	0x08004dba
 8004514:	08004d90 	.word	0x08004d90
 8004518:	08004d50 	.word	0x08004d50
 800451c:	08004dc0 	.word	0x08004dc0
 8004520:	08004dc4 	.word	0x08004dc4
 8004524:	00000000 	.word	0x00000000
 8004528:	080042db 	.word	0x080042db

0800452c <_printf_common>:
 800452c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004530:	4691      	mov	r9, r2
 8004532:	461f      	mov	r7, r3
 8004534:	688a      	ldr	r2, [r1, #8]
 8004536:	690b      	ldr	r3, [r1, #16]
 8004538:	4606      	mov	r6, r0
 800453a:	4293      	cmp	r3, r2
 800453c:	bfb8      	it	lt
 800453e:	4613      	movlt	r3, r2
 8004540:	f8c9 3000 	str.w	r3, [r9]
 8004544:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004548:	460c      	mov	r4, r1
 800454a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800454e:	b112      	cbz	r2, 8004556 <_printf_common+0x2a>
 8004550:	3301      	adds	r3, #1
 8004552:	f8c9 3000 	str.w	r3, [r9]
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	0699      	lsls	r1, r3, #26
 800455a:	bf42      	ittt	mi
 800455c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004560:	3302      	addmi	r3, #2
 8004562:	f8c9 3000 	strmi.w	r3, [r9]
 8004566:	6825      	ldr	r5, [r4, #0]
 8004568:	f015 0506 	ands.w	r5, r5, #6
 800456c:	d107      	bne.n	800457e <_printf_common+0x52>
 800456e:	f104 0a19 	add.w	sl, r4, #25
 8004572:	68e3      	ldr	r3, [r4, #12]
 8004574:	f8d9 2000 	ldr.w	r2, [r9]
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	42ab      	cmp	r3, r5
 800457c:	dc29      	bgt.n	80045d2 <_printf_common+0xa6>
 800457e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004582:	6822      	ldr	r2, [r4, #0]
 8004584:	3300      	adds	r3, #0
 8004586:	bf18      	it	ne
 8004588:	2301      	movne	r3, #1
 800458a:	0692      	lsls	r2, r2, #26
 800458c:	d42e      	bmi.n	80045ec <_printf_common+0xc0>
 800458e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004592:	4639      	mov	r1, r7
 8004594:	4630      	mov	r0, r6
 8004596:	47c0      	blx	r8
 8004598:	3001      	adds	r0, #1
 800459a:	d021      	beq.n	80045e0 <_printf_common+0xb4>
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	68e5      	ldr	r5, [r4, #12]
 80045a0:	f003 0306 	and.w	r3, r3, #6
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	bf18      	it	ne
 80045a8:	2500      	movne	r5, #0
 80045aa:	f8d9 2000 	ldr.w	r2, [r9]
 80045ae:	f04f 0900 	mov.w	r9, #0
 80045b2:	bf08      	it	eq
 80045b4:	1aad      	subeq	r5, r5, r2
 80045b6:	68a3      	ldr	r3, [r4, #8]
 80045b8:	6922      	ldr	r2, [r4, #16]
 80045ba:	bf08      	it	eq
 80045bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045c0:	4293      	cmp	r3, r2
 80045c2:	bfc4      	itt	gt
 80045c4:	1a9b      	subgt	r3, r3, r2
 80045c6:	18ed      	addgt	r5, r5, r3
 80045c8:	341a      	adds	r4, #26
 80045ca:	454d      	cmp	r5, r9
 80045cc:	d11a      	bne.n	8004604 <_printf_common+0xd8>
 80045ce:	2000      	movs	r0, #0
 80045d0:	e008      	b.n	80045e4 <_printf_common+0xb8>
 80045d2:	2301      	movs	r3, #1
 80045d4:	4652      	mov	r2, sl
 80045d6:	4639      	mov	r1, r7
 80045d8:	4630      	mov	r0, r6
 80045da:	47c0      	blx	r8
 80045dc:	3001      	adds	r0, #1
 80045de:	d103      	bne.n	80045e8 <_printf_common+0xbc>
 80045e0:	f04f 30ff 	mov.w	r0, #4294967295
 80045e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e8:	3501      	adds	r5, #1
 80045ea:	e7c2      	b.n	8004572 <_printf_common+0x46>
 80045ec:	2030      	movs	r0, #48	; 0x30
 80045ee:	18e1      	adds	r1, r4, r3
 80045f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045fa:	4422      	add	r2, r4
 80045fc:	3302      	adds	r3, #2
 80045fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004602:	e7c4      	b.n	800458e <_printf_common+0x62>
 8004604:	2301      	movs	r3, #1
 8004606:	4622      	mov	r2, r4
 8004608:	4639      	mov	r1, r7
 800460a:	4630      	mov	r0, r6
 800460c:	47c0      	blx	r8
 800460e:	3001      	adds	r0, #1
 8004610:	d0e6      	beq.n	80045e0 <_printf_common+0xb4>
 8004612:	f109 0901 	add.w	r9, r9, #1
 8004616:	e7d8      	b.n	80045ca <_printf_common+0x9e>

08004618 <_printf_i>:
 8004618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800461c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004620:	460c      	mov	r4, r1
 8004622:	7e09      	ldrb	r1, [r1, #24]
 8004624:	b085      	sub	sp, #20
 8004626:	296e      	cmp	r1, #110	; 0x6e
 8004628:	4617      	mov	r7, r2
 800462a:	4606      	mov	r6, r0
 800462c:	4698      	mov	r8, r3
 800462e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004630:	f000 80b3 	beq.w	800479a <_printf_i+0x182>
 8004634:	d822      	bhi.n	800467c <_printf_i+0x64>
 8004636:	2963      	cmp	r1, #99	; 0x63
 8004638:	d036      	beq.n	80046a8 <_printf_i+0x90>
 800463a:	d80a      	bhi.n	8004652 <_printf_i+0x3a>
 800463c:	2900      	cmp	r1, #0
 800463e:	f000 80b9 	beq.w	80047b4 <_printf_i+0x19c>
 8004642:	2958      	cmp	r1, #88	; 0x58
 8004644:	f000 8083 	beq.w	800474e <_printf_i+0x136>
 8004648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800464c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004650:	e032      	b.n	80046b8 <_printf_i+0xa0>
 8004652:	2964      	cmp	r1, #100	; 0x64
 8004654:	d001      	beq.n	800465a <_printf_i+0x42>
 8004656:	2969      	cmp	r1, #105	; 0x69
 8004658:	d1f6      	bne.n	8004648 <_printf_i+0x30>
 800465a:	6820      	ldr	r0, [r4, #0]
 800465c:	6813      	ldr	r3, [r2, #0]
 800465e:	0605      	lsls	r5, r0, #24
 8004660:	f103 0104 	add.w	r1, r3, #4
 8004664:	d52a      	bpl.n	80046bc <_printf_i+0xa4>
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6011      	str	r1, [r2, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	da03      	bge.n	8004676 <_printf_i+0x5e>
 800466e:	222d      	movs	r2, #45	; 0x2d
 8004670:	425b      	negs	r3, r3
 8004672:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004676:	486f      	ldr	r0, [pc, #444]	; (8004834 <_printf_i+0x21c>)
 8004678:	220a      	movs	r2, #10
 800467a:	e039      	b.n	80046f0 <_printf_i+0xd8>
 800467c:	2973      	cmp	r1, #115	; 0x73
 800467e:	f000 809d 	beq.w	80047bc <_printf_i+0x1a4>
 8004682:	d808      	bhi.n	8004696 <_printf_i+0x7e>
 8004684:	296f      	cmp	r1, #111	; 0x6f
 8004686:	d020      	beq.n	80046ca <_printf_i+0xb2>
 8004688:	2970      	cmp	r1, #112	; 0x70
 800468a:	d1dd      	bne.n	8004648 <_printf_i+0x30>
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	f043 0320 	orr.w	r3, r3, #32
 8004692:	6023      	str	r3, [r4, #0]
 8004694:	e003      	b.n	800469e <_printf_i+0x86>
 8004696:	2975      	cmp	r1, #117	; 0x75
 8004698:	d017      	beq.n	80046ca <_printf_i+0xb2>
 800469a:	2978      	cmp	r1, #120	; 0x78
 800469c:	d1d4      	bne.n	8004648 <_printf_i+0x30>
 800469e:	2378      	movs	r3, #120	; 0x78
 80046a0:	4865      	ldr	r0, [pc, #404]	; (8004838 <_printf_i+0x220>)
 80046a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046a6:	e055      	b.n	8004754 <_printf_i+0x13c>
 80046a8:	6813      	ldr	r3, [r2, #0]
 80046aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046ae:	1d19      	adds	r1, r3, #4
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6011      	str	r1, [r2, #0]
 80046b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046b8:	2301      	movs	r3, #1
 80046ba:	e08c      	b.n	80047d6 <_printf_i+0x1be>
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046c2:	6011      	str	r1, [r2, #0]
 80046c4:	bf18      	it	ne
 80046c6:	b21b      	sxthne	r3, r3
 80046c8:	e7cf      	b.n	800466a <_printf_i+0x52>
 80046ca:	6813      	ldr	r3, [r2, #0]
 80046cc:	6825      	ldr	r5, [r4, #0]
 80046ce:	1d18      	adds	r0, r3, #4
 80046d0:	6010      	str	r0, [r2, #0]
 80046d2:	0628      	lsls	r0, r5, #24
 80046d4:	d501      	bpl.n	80046da <_printf_i+0xc2>
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	e002      	b.n	80046e0 <_printf_i+0xc8>
 80046da:	0668      	lsls	r0, r5, #25
 80046dc:	d5fb      	bpl.n	80046d6 <_printf_i+0xbe>
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	296f      	cmp	r1, #111	; 0x6f
 80046e2:	bf14      	ite	ne
 80046e4:	220a      	movne	r2, #10
 80046e6:	2208      	moveq	r2, #8
 80046e8:	4852      	ldr	r0, [pc, #328]	; (8004834 <_printf_i+0x21c>)
 80046ea:	2100      	movs	r1, #0
 80046ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046f0:	6865      	ldr	r5, [r4, #4]
 80046f2:	2d00      	cmp	r5, #0
 80046f4:	60a5      	str	r5, [r4, #8]
 80046f6:	f2c0 8095 	blt.w	8004824 <_printf_i+0x20c>
 80046fa:	6821      	ldr	r1, [r4, #0]
 80046fc:	f021 0104 	bic.w	r1, r1, #4
 8004700:	6021      	str	r1, [r4, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d13d      	bne.n	8004782 <_printf_i+0x16a>
 8004706:	2d00      	cmp	r5, #0
 8004708:	f040 808e 	bne.w	8004828 <_printf_i+0x210>
 800470c:	4665      	mov	r5, ip
 800470e:	2a08      	cmp	r2, #8
 8004710:	d10b      	bne.n	800472a <_printf_i+0x112>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	07db      	lsls	r3, r3, #31
 8004716:	d508      	bpl.n	800472a <_printf_i+0x112>
 8004718:	6923      	ldr	r3, [r4, #16]
 800471a:	6862      	ldr	r2, [r4, #4]
 800471c:	429a      	cmp	r2, r3
 800471e:	bfde      	ittt	le
 8004720:	2330      	movle	r3, #48	; 0x30
 8004722:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004726:	f105 35ff 	addle.w	r5, r5, #4294967295
 800472a:	ebac 0305 	sub.w	r3, ip, r5
 800472e:	6123      	str	r3, [r4, #16]
 8004730:	f8cd 8000 	str.w	r8, [sp]
 8004734:	463b      	mov	r3, r7
 8004736:	aa03      	add	r2, sp, #12
 8004738:	4621      	mov	r1, r4
 800473a:	4630      	mov	r0, r6
 800473c:	f7ff fef6 	bl	800452c <_printf_common>
 8004740:	3001      	adds	r0, #1
 8004742:	d14d      	bne.n	80047e0 <_printf_i+0x1c8>
 8004744:	f04f 30ff 	mov.w	r0, #4294967295
 8004748:	b005      	add	sp, #20
 800474a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800474e:	4839      	ldr	r0, [pc, #228]	; (8004834 <_printf_i+0x21c>)
 8004750:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004754:	6813      	ldr	r3, [r2, #0]
 8004756:	6821      	ldr	r1, [r4, #0]
 8004758:	1d1d      	adds	r5, r3, #4
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6015      	str	r5, [r2, #0]
 800475e:	060a      	lsls	r2, r1, #24
 8004760:	d50b      	bpl.n	800477a <_printf_i+0x162>
 8004762:	07ca      	lsls	r2, r1, #31
 8004764:	bf44      	itt	mi
 8004766:	f041 0120 	orrmi.w	r1, r1, #32
 800476a:	6021      	strmi	r1, [r4, #0]
 800476c:	b91b      	cbnz	r3, 8004776 <_printf_i+0x15e>
 800476e:	6822      	ldr	r2, [r4, #0]
 8004770:	f022 0220 	bic.w	r2, r2, #32
 8004774:	6022      	str	r2, [r4, #0]
 8004776:	2210      	movs	r2, #16
 8004778:	e7b7      	b.n	80046ea <_printf_i+0xd2>
 800477a:	064d      	lsls	r5, r1, #25
 800477c:	bf48      	it	mi
 800477e:	b29b      	uxthmi	r3, r3
 8004780:	e7ef      	b.n	8004762 <_printf_i+0x14a>
 8004782:	4665      	mov	r5, ip
 8004784:	fbb3 f1f2 	udiv	r1, r3, r2
 8004788:	fb02 3311 	mls	r3, r2, r1, r3
 800478c:	5cc3      	ldrb	r3, [r0, r3]
 800478e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004792:	460b      	mov	r3, r1
 8004794:	2900      	cmp	r1, #0
 8004796:	d1f5      	bne.n	8004784 <_printf_i+0x16c>
 8004798:	e7b9      	b.n	800470e <_printf_i+0xf6>
 800479a:	6813      	ldr	r3, [r2, #0]
 800479c:	6825      	ldr	r5, [r4, #0]
 800479e:	1d18      	adds	r0, r3, #4
 80047a0:	6961      	ldr	r1, [r4, #20]
 80047a2:	6010      	str	r0, [r2, #0]
 80047a4:	0628      	lsls	r0, r5, #24
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	d501      	bpl.n	80047ae <_printf_i+0x196>
 80047aa:	6019      	str	r1, [r3, #0]
 80047ac:	e002      	b.n	80047b4 <_printf_i+0x19c>
 80047ae:	066a      	lsls	r2, r5, #25
 80047b0:	d5fb      	bpl.n	80047aa <_printf_i+0x192>
 80047b2:	8019      	strh	r1, [r3, #0]
 80047b4:	2300      	movs	r3, #0
 80047b6:	4665      	mov	r5, ip
 80047b8:	6123      	str	r3, [r4, #16]
 80047ba:	e7b9      	b.n	8004730 <_printf_i+0x118>
 80047bc:	6813      	ldr	r3, [r2, #0]
 80047be:	1d19      	adds	r1, r3, #4
 80047c0:	6011      	str	r1, [r2, #0]
 80047c2:	681d      	ldr	r5, [r3, #0]
 80047c4:	6862      	ldr	r2, [r4, #4]
 80047c6:	2100      	movs	r1, #0
 80047c8:	4628      	mov	r0, r5
 80047ca:	f000 f8ed 	bl	80049a8 <memchr>
 80047ce:	b108      	cbz	r0, 80047d4 <_printf_i+0x1bc>
 80047d0:	1b40      	subs	r0, r0, r5
 80047d2:	6060      	str	r0, [r4, #4]
 80047d4:	6863      	ldr	r3, [r4, #4]
 80047d6:	6123      	str	r3, [r4, #16]
 80047d8:	2300      	movs	r3, #0
 80047da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047de:	e7a7      	b.n	8004730 <_printf_i+0x118>
 80047e0:	6923      	ldr	r3, [r4, #16]
 80047e2:	462a      	mov	r2, r5
 80047e4:	4639      	mov	r1, r7
 80047e6:	4630      	mov	r0, r6
 80047e8:	47c0      	blx	r8
 80047ea:	3001      	adds	r0, #1
 80047ec:	d0aa      	beq.n	8004744 <_printf_i+0x12c>
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	079b      	lsls	r3, r3, #30
 80047f2:	d413      	bmi.n	800481c <_printf_i+0x204>
 80047f4:	68e0      	ldr	r0, [r4, #12]
 80047f6:	9b03      	ldr	r3, [sp, #12]
 80047f8:	4298      	cmp	r0, r3
 80047fa:	bfb8      	it	lt
 80047fc:	4618      	movlt	r0, r3
 80047fe:	e7a3      	b.n	8004748 <_printf_i+0x130>
 8004800:	2301      	movs	r3, #1
 8004802:	464a      	mov	r2, r9
 8004804:	4639      	mov	r1, r7
 8004806:	4630      	mov	r0, r6
 8004808:	47c0      	blx	r8
 800480a:	3001      	adds	r0, #1
 800480c:	d09a      	beq.n	8004744 <_printf_i+0x12c>
 800480e:	3501      	adds	r5, #1
 8004810:	68e3      	ldr	r3, [r4, #12]
 8004812:	9a03      	ldr	r2, [sp, #12]
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	42ab      	cmp	r3, r5
 8004818:	dcf2      	bgt.n	8004800 <_printf_i+0x1e8>
 800481a:	e7eb      	b.n	80047f4 <_printf_i+0x1dc>
 800481c:	2500      	movs	r5, #0
 800481e:	f104 0919 	add.w	r9, r4, #25
 8004822:	e7f5      	b.n	8004810 <_printf_i+0x1f8>
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1ac      	bne.n	8004782 <_printf_i+0x16a>
 8004828:	7803      	ldrb	r3, [r0, #0]
 800482a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800482e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004832:	e76c      	b.n	800470e <_printf_i+0xf6>
 8004834:	08004dcb 	.word	0x08004dcb
 8004838:	08004ddc 	.word	0x08004ddc

0800483c <_sbrk_r>:
 800483c:	b538      	push	{r3, r4, r5, lr}
 800483e:	2300      	movs	r3, #0
 8004840:	4c05      	ldr	r4, [pc, #20]	; (8004858 <_sbrk_r+0x1c>)
 8004842:	4605      	mov	r5, r0
 8004844:	4608      	mov	r0, r1
 8004846:	6023      	str	r3, [r4, #0]
 8004848:	f7fc fff6 	bl	8001838 <_sbrk>
 800484c:	1c43      	adds	r3, r0, #1
 800484e:	d102      	bne.n	8004856 <_sbrk_r+0x1a>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	b103      	cbz	r3, 8004856 <_sbrk_r+0x1a>
 8004854:	602b      	str	r3, [r5, #0]
 8004856:	bd38      	pop	{r3, r4, r5, pc}
 8004858:	20001738 	.word	0x20001738

0800485c <__sread>:
 800485c:	b510      	push	{r4, lr}
 800485e:	460c      	mov	r4, r1
 8004860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004864:	f000 f8fa 	bl	8004a5c <_read_r>
 8004868:	2800      	cmp	r0, #0
 800486a:	bfab      	itete	ge
 800486c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800486e:	89a3      	ldrhlt	r3, [r4, #12]
 8004870:	181b      	addge	r3, r3, r0
 8004872:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004876:	bfac      	ite	ge
 8004878:	6563      	strge	r3, [r4, #84]	; 0x54
 800487a:	81a3      	strhlt	r3, [r4, #12]
 800487c:	bd10      	pop	{r4, pc}

0800487e <__swrite>:
 800487e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004882:	461f      	mov	r7, r3
 8004884:	898b      	ldrh	r3, [r1, #12]
 8004886:	4605      	mov	r5, r0
 8004888:	05db      	lsls	r3, r3, #23
 800488a:	460c      	mov	r4, r1
 800488c:	4616      	mov	r6, r2
 800488e:	d505      	bpl.n	800489c <__swrite+0x1e>
 8004890:	2302      	movs	r3, #2
 8004892:	2200      	movs	r2, #0
 8004894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004898:	f000 f874 	bl	8004984 <_lseek_r>
 800489c:	89a3      	ldrh	r3, [r4, #12]
 800489e:	4632      	mov	r2, r6
 80048a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048a4:	81a3      	strh	r3, [r4, #12]
 80048a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048aa:	463b      	mov	r3, r7
 80048ac:	4628      	mov	r0, r5
 80048ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048b2:	f000 b823 	b.w	80048fc <_write_r>

080048b6 <__sseek>:
 80048b6:	b510      	push	{r4, lr}
 80048b8:	460c      	mov	r4, r1
 80048ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048be:	f000 f861 	bl	8004984 <_lseek_r>
 80048c2:	1c43      	adds	r3, r0, #1
 80048c4:	89a3      	ldrh	r3, [r4, #12]
 80048c6:	bf15      	itete	ne
 80048c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80048ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80048ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80048d2:	81a3      	strheq	r3, [r4, #12]
 80048d4:	bf18      	it	ne
 80048d6:	81a3      	strhne	r3, [r4, #12]
 80048d8:	bd10      	pop	{r4, pc}

080048da <__sclose>:
 80048da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048de:	f000 b81f 	b.w	8004920 <_close_r>

080048e2 <__ascii_wctomb>:
 80048e2:	b149      	cbz	r1, 80048f8 <__ascii_wctomb+0x16>
 80048e4:	2aff      	cmp	r2, #255	; 0xff
 80048e6:	bf8b      	itete	hi
 80048e8:	238a      	movhi	r3, #138	; 0x8a
 80048ea:	700a      	strbls	r2, [r1, #0]
 80048ec:	6003      	strhi	r3, [r0, #0]
 80048ee:	2001      	movls	r0, #1
 80048f0:	bf88      	it	hi
 80048f2:	f04f 30ff 	movhi.w	r0, #4294967295
 80048f6:	4770      	bx	lr
 80048f8:	4608      	mov	r0, r1
 80048fa:	4770      	bx	lr

080048fc <_write_r>:
 80048fc:	b538      	push	{r3, r4, r5, lr}
 80048fe:	4605      	mov	r5, r0
 8004900:	4608      	mov	r0, r1
 8004902:	4611      	mov	r1, r2
 8004904:	2200      	movs	r2, #0
 8004906:	4c05      	ldr	r4, [pc, #20]	; (800491c <_write_r+0x20>)
 8004908:	6022      	str	r2, [r4, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	f7fc ff47 	bl	800179e <_write>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d102      	bne.n	800491a <_write_r+0x1e>
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	b103      	cbz	r3, 800491a <_write_r+0x1e>
 8004918:	602b      	str	r3, [r5, #0]
 800491a:	bd38      	pop	{r3, r4, r5, pc}
 800491c:	20001738 	.word	0x20001738

08004920 <_close_r>:
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	2300      	movs	r3, #0
 8004924:	4c05      	ldr	r4, [pc, #20]	; (800493c <_close_r+0x1c>)
 8004926:	4605      	mov	r5, r0
 8004928:	4608      	mov	r0, r1
 800492a:	6023      	str	r3, [r4, #0]
 800492c:	f7fc ff53 	bl	80017d6 <_close>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	d102      	bne.n	800493a <_close_r+0x1a>
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	b103      	cbz	r3, 800493a <_close_r+0x1a>
 8004938:	602b      	str	r3, [r5, #0]
 800493a:	bd38      	pop	{r3, r4, r5, pc}
 800493c:	20001738 	.word	0x20001738

08004940 <_fstat_r>:
 8004940:	b538      	push	{r3, r4, r5, lr}
 8004942:	2300      	movs	r3, #0
 8004944:	4c06      	ldr	r4, [pc, #24]	; (8004960 <_fstat_r+0x20>)
 8004946:	4605      	mov	r5, r0
 8004948:	4608      	mov	r0, r1
 800494a:	4611      	mov	r1, r2
 800494c:	6023      	str	r3, [r4, #0]
 800494e:	f7fc ff4d 	bl	80017ec <_fstat>
 8004952:	1c43      	adds	r3, r0, #1
 8004954:	d102      	bne.n	800495c <_fstat_r+0x1c>
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	b103      	cbz	r3, 800495c <_fstat_r+0x1c>
 800495a:	602b      	str	r3, [r5, #0]
 800495c:	bd38      	pop	{r3, r4, r5, pc}
 800495e:	bf00      	nop
 8004960:	20001738 	.word	0x20001738

08004964 <_isatty_r>:
 8004964:	b538      	push	{r3, r4, r5, lr}
 8004966:	2300      	movs	r3, #0
 8004968:	4c05      	ldr	r4, [pc, #20]	; (8004980 <_isatty_r+0x1c>)
 800496a:	4605      	mov	r5, r0
 800496c:	4608      	mov	r0, r1
 800496e:	6023      	str	r3, [r4, #0]
 8004970:	f7fc ff4b 	bl	800180a <_isatty>
 8004974:	1c43      	adds	r3, r0, #1
 8004976:	d102      	bne.n	800497e <_isatty_r+0x1a>
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	b103      	cbz	r3, 800497e <_isatty_r+0x1a>
 800497c:	602b      	str	r3, [r5, #0]
 800497e:	bd38      	pop	{r3, r4, r5, pc}
 8004980:	20001738 	.word	0x20001738

08004984 <_lseek_r>:
 8004984:	b538      	push	{r3, r4, r5, lr}
 8004986:	4605      	mov	r5, r0
 8004988:	4608      	mov	r0, r1
 800498a:	4611      	mov	r1, r2
 800498c:	2200      	movs	r2, #0
 800498e:	4c05      	ldr	r4, [pc, #20]	; (80049a4 <_lseek_r+0x20>)
 8004990:	6022      	str	r2, [r4, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	f7fc ff43 	bl	800181e <_lseek>
 8004998:	1c43      	adds	r3, r0, #1
 800499a:	d102      	bne.n	80049a2 <_lseek_r+0x1e>
 800499c:	6823      	ldr	r3, [r4, #0]
 800499e:	b103      	cbz	r3, 80049a2 <_lseek_r+0x1e>
 80049a0:	602b      	str	r3, [r5, #0]
 80049a2:	bd38      	pop	{r3, r4, r5, pc}
 80049a4:	20001738 	.word	0x20001738

080049a8 <memchr>:
 80049a8:	b510      	push	{r4, lr}
 80049aa:	b2c9      	uxtb	r1, r1
 80049ac:	4402      	add	r2, r0
 80049ae:	4290      	cmp	r0, r2
 80049b0:	4603      	mov	r3, r0
 80049b2:	d101      	bne.n	80049b8 <memchr+0x10>
 80049b4:	2300      	movs	r3, #0
 80049b6:	e003      	b.n	80049c0 <memchr+0x18>
 80049b8:	781c      	ldrb	r4, [r3, #0]
 80049ba:	3001      	adds	r0, #1
 80049bc:	428c      	cmp	r4, r1
 80049be:	d1f6      	bne.n	80049ae <memchr+0x6>
 80049c0:	4618      	mov	r0, r3
 80049c2:	bd10      	pop	{r4, pc}

080049c4 <memcpy>:
 80049c4:	b510      	push	{r4, lr}
 80049c6:	1e43      	subs	r3, r0, #1
 80049c8:	440a      	add	r2, r1
 80049ca:	4291      	cmp	r1, r2
 80049cc:	d100      	bne.n	80049d0 <memcpy+0xc>
 80049ce:	bd10      	pop	{r4, pc}
 80049d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049d8:	e7f7      	b.n	80049ca <memcpy+0x6>

080049da <memmove>:
 80049da:	4288      	cmp	r0, r1
 80049dc:	b510      	push	{r4, lr}
 80049de:	eb01 0302 	add.w	r3, r1, r2
 80049e2:	d807      	bhi.n	80049f4 <memmove+0x1a>
 80049e4:	1e42      	subs	r2, r0, #1
 80049e6:	4299      	cmp	r1, r3
 80049e8:	d00a      	beq.n	8004a00 <memmove+0x26>
 80049ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049ee:	f802 4f01 	strb.w	r4, [r2, #1]!
 80049f2:	e7f8      	b.n	80049e6 <memmove+0xc>
 80049f4:	4283      	cmp	r3, r0
 80049f6:	d9f5      	bls.n	80049e4 <memmove+0xa>
 80049f8:	1881      	adds	r1, r0, r2
 80049fa:	1ad2      	subs	r2, r2, r3
 80049fc:	42d3      	cmn	r3, r2
 80049fe:	d100      	bne.n	8004a02 <memmove+0x28>
 8004a00:	bd10      	pop	{r4, pc}
 8004a02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a06:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004a0a:	e7f7      	b.n	80049fc <memmove+0x22>

08004a0c <__malloc_lock>:
 8004a0c:	4770      	bx	lr

08004a0e <__malloc_unlock>:
 8004a0e:	4770      	bx	lr

08004a10 <_realloc_r>:
 8004a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a12:	4607      	mov	r7, r0
 8004a14:	4614      	mov	r4, r2
 8004a16:	460e      	mov	r6, r1
 8004a18:	b921      	cbnz	r1, 8004a24 <_realloc_r+0x14>
 8004a1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a1e:	4611      	mov	r1, r2
 8004a20:	f7ff ba9a 	b.w	8003f58 <_malloc_r>
 8004a24:	b922      	cbnz	r2, 8004a30 <_realloc_r+0x20>
 8004a26:	f7ff fa4b 	bl	8003ec0 <_free_r>
 8004a2a:	4625      	mov	r5, r4
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a30:	f000 f826 	bl	8004a80 <_malloc_usable_size_r>
 8004a34:	42a0      	cmp	r0, r4
 8004a36:	d20f      	bcs.n	8004a58 <_realloc_r+0x48>
 8004a38:	4621      	mov	r1, r4
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	f7ff fa8c 	bl	8003f58 <_malloc_r>
 8004a40:	4605      	mov	r5, r0
 8004a42:	2800      	cmp	r0, #0
 8004a44:	d0f2      	beq.n	8004a2c <_realloc_r+0x1c>
 8004a46:	4631      	mov	r1, r6
 8004a48:	4622      	mov	r2, r4
 8004a4a:	f7ff ffbb 	bl	80049c4 <memcpy>
 8004a4e:	4631      	mov	r1, r6
 8004a50:	4638      	mov	r0, r7
 8004a52:	f7ff fa35 	bl	8003ec0 <_free_r>
 8004a56:	e7e9      	b.n	8004a2c <_realloc_r+0x1c>
 8004a58:	4635      	mov	r5, r6
 8004a5a:	e7e7      	b.n	8004a2c <_realloc_r+0x1c>

08004a5c <_read_r>:
 8004a5c:	b538      	push	{r3, r4, r5, lr}
 8004a5e:	4605      	mov	r5, r0
 8004a60:	4608      	mov	r0, r1
 8004a62:	4611      	mov	r1, r2
 8004a64:	2200      	movs	r2, #0
 8004a66:	4c05      	ldr	r4, [pc, #20]	; (8004a7c <_read_r+0x20>)
 8004a68:	6022      	str	r2, [r4, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f7fc fe7a 	bl	8001764 <_read>
 8004a70:	1c43      	adds	r3, r0, #1
 8004a72:	d102      	bne.n	8004a7a <_read_r+0x1e>
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	b103      	cbz	r3, 8004a7a <_read_r+0x1e>
 8004a78:	602b      	str	r3, [r5, #0]
 8004a7a:	bd38      	pop	{r3, r4, r5, pc}
 8004a7c:	20001738 	.word	0x20001738

08004a80 <_malloc_usable_size_r>:
 8004a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a84:	1f18      	subs	r0, r3, #4
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	bfbc      	itt	lt
 8004a8a:	580b      	ldrlt	r3, [r1, r0]
 8004a8c:	18c0      	addlt	r0, r0, r3
 8004a8e:	4770      	bx	lr

08004a90 <_init>:
 8004a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a92:	bf00      	nop
 8004a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a96:	bc08      	pop	{r3}
 8004a98:	469e      	mov	lr, r3
 8004a9a:	4770      	bx	lr

08004a9c <_fini>:
 8004a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9e:	bf00      	nop
 8004aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa2:	bc08      	pop	{r3}
 8004aa4:	469e      	mov	lr, r3
 8004aa6:	4770      	bx	lr
